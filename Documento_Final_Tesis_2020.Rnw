\documentclass{report}

\usepackage[backend= biber,style=apa]{biblatex}
\bibliography{Referencias}
\usepackage{graphicx}
\usepackage{float}
\usepackage[spanish]{babel}
\usepackage{enumitem}
\usepackage{pdflscape}
\usepackage{amsmath}
\usepackage{array}
\usepackage{listings}
\usepackage[utf8]{inputenc} 
\usepackage{dcolumn} 
\usepackage{multirow} 
\usepackage{colortbl} 
\usepackage{subfigure}
\usepackage{rotating} 
\usepackage{longtable} 
\usepackage{tabularx} 
\usepackage{booktabs}
\usepackage{subfig}
\addto\captionsspanish{
\renewcommand{\partname}{Sección}
\renewcommand{\chaptername}{Capítulo}
}
\renewcommand{\theequation}{\arabic{equation}}
\renewcommand{\baselinestretch}{1.5}
\usepackage{anysize}
\usepackage{appendix}
\newcounter{neq}
\papersize{27.9cm}{21.5cm}
\marginsize{2.5cm}{2.5cm}{2.5cm}{2.5cm}
\makeatletter
\@addtoreset{chapter}{part}
\makeatother
\setcounter{secnumdepth}{3}
\setcounter{tocdepth}{4}


<<biber, eval= TRUE, include= FALSE, cache= FALSE, echo= FALSE>>=
system (paste ("biber", sub ("\\.Rnw$", "", current_input())))
@            

\begin{document}

\begin{titlepage}
\centering
{\bfseries\LARGE Análisis de la percepción de la calidad de tres empresas colombianas de telefonía móvil en Twitter, mediante técnicas de minería de texto y analítica de negocios \par}
\vfill
{\Large Autores: \par}
{\Large Eduar Felipe Riaño Torres \par}
{\Large José Dario Navas Torres \par}
\vspace{1cm}
{\Large Directora: \par}
{\Large M.Sc Yamile Adriana Jaime Arias \par}
\vfill
{\Large Universidad de La Salle Colombia \par}
{\Large Facultad de Ingenería \par}
{\Large Departamento de Ingeniería Industrial \par}
{\Large Bogotá D.C \par}
{\Large 2020 \par}
\end{titlepage}

\tableofcontents
\listoffigures
\listoftables
\chapter*{Agradecimientos}
Agradecemos al apoyo recibido por parte de nuestros padres, quienes fueron la mayor motivación para alcanzar nuestras metas personales y profesionales. También por ser ejemplo de fortaleza y apoyo incondicional para tomar decisiones asertivas en cualquier momento. \\

Damos gracias a todos los docentes que fueron parte de nuestra formación como Ingenieros Industriales. Especialmente a la Ingeniera Yamile Jaime por su constante disposición y entrega para el desarrollo de este trabajo; y ser una profesional integra que nos motivó durante este proceso a alcanzar lo que considerabamos un gran reto.

\chapter*{Resumen}
Este documento presenta una solución a un caso teórico-práctico en la red social Twitter empleando técnicas de minería de texto y analítica de negocios en el software gratuito y de código abierto para ciencia de datos, investigación científica y comunicación técnica R. Para esto, se desarrolló un ejercicio aplicado a las empresas de Telecomunicaciones Claro, Movistar y Tigo, debido a la cantidad de datos y al dinamismo económico que estas compañías presentan actualmente en Colombia.  

Para llevar a cabo esta investigación se requirió realizar una revisión exhaustiva de diversas temáticas como minería de texto, análisis de sentimientos, vigilancia empresarial, analítica de negocios, visualización de datos, entre otros. Estas temáticas se desarrollaron en este caso empleando una combinación de las metodologías de análisis de datos CRISP-DM e IBM. En este proyecto se utilizaron siete fases: (1) comprensión del negocio, (2) acercamiento al proyecto de analítica, (3) análisis de requerimientos y recolección de datos (4) Comprensión de los datos, (5) Preparación de los datos, (6) Modelado y (7) Visualización.  

Posterior a la construcción de las bases de datos de cada una de las empresas y sus respectivos clientes, el resultado del análisis de texto aplicado a las empresas de Telecomunicaciones presentó una consistencia con su modelo de negocio, siendo palabras como ‘Caso’, ‘Saludarte’, ‘Información’, ‘DM’ con mayor recurrencia en los tweets que emiten estas compañías. Siendo Movistar y Tigo, las empresas que presentan mayor correlación en la manera que manejan su discurso en la red social Twitter. En el caso de las bases de datos de los clientes se evidencia el uso de palabras como ‘Servicio’, ‘Internet’, ‘SICsuper’, entre otras como las más frecuentes. Además, se evaluaron los indicadores de desempeño obtenidos por el algoritmo de clasificación Naïve Bayes sobre la variable ScreenName, obteniendo una precisión del modelo de 0.877, 0.691 y 0.660 para Claro, Movistar y Tigo respectivamente. Adicionalmente, en la fase de análisis se construyeron gráficas analíticas que complementaron los resultados obtenidos. Finalmente, se plantea una etapa adicional denominada maduración con el fin de refinar los resultados obtenidos en la presente investigación; además de algunos retos, como trabajo futuro, los cuales, vale la pena profundizar, pero que están fuera del alcance de esta investigación. 
 

\chapter{Introducción}
La Inteligencia Artificial (AI) es uno de los temas que esta tomando cada vez más relevancia en el mundo debido a la posibilidad que brinda para adaptarse a cualquier industria y crear innovación basada en conocimiento \parencite{Inteligencia}. Formar capacidades orientadas al mercado de las tecnologías emergentes como la Inteligencia Artificial, la analítica de datos y lo que conocemos como aprendizaje de máquina se hace necesario para la búsqueda de la mejora, la productividad y la competitividad en diferentes sectores económicos, y para proporcionar una oportunidad que le permita al conocimiento del mercado mejorar e impulsar a las empresas a generar nuevas y sobresalientes experiencias con sus clientes y marcas \parencite{Transformacion_Digital}. 

Estudios señalan que para finales del 2019 el 40\% de las iniciativas de transformación digital utilizarían servicios de AI, para el año 2021, el 75\% de las aplicaciones comerciales de las compañías utilizarán las capacidades de esta herramienta, y para 2025, 180 zettabits será la cantidad de datos disponibles gracias a dispositivos de Internet de las cosas (por sus siglas en inglés IoT) \parencite{Analitica1}. 

La aplicación de la Analítica de Datos permea diferentes sectores económicos, como el político, económico, salud, deportivo o telecomunicaciones. Este último, relevante para esta investigación, ha tenido resultados positivos que evidencian un potencial de aplicación de la analítica en este sector. Según los resultados de la encuesta nacional de servicios, aplicada por el DANE en 2018, la industria de tecnologías de la información (TI) obtuvo resultados que evidencian que los temas asociados a telecomunicaciones, desarrollo de sistemas informáticos y procesamiento de datos pertenecen a los sectores con mayor crecimiento en puestos de trabajo y en remuneración de los empleos relacionados en Colombia \parencite{DANE1}.

Similarmente, según un informe emitido por la Comisión de Regulación de Comunicaciones (CRC), para el año 2017, el 52.4\% de la población en Colombia contó con un servicio de internet móvil vinculado a sus dispositivos digitales \parencite{Tecnosfera}; de los cuales, en promedio el 69.4\% del total de la población a nivel nacional usan todos los días el internet como medio de comunicación, y el 75.7\% de la población que utiliza el internet lo hacen a través de un celular \parencite{DANE2}. Para 2017, el internet móvil fue el sector que generó mayores ingresos con un aporte de 4.2 billones de pesos \parencite{Comision}; y aunque su aporte para ese año fue el más bajo respecto a los años anteriores, en el 2018 y 2019 uno de los sectores que tuvo mayor crecimiento y que aportó a la economía en el primer trimestre, 1.08\% de crecimiento por encima del PIB (2.96\%), fue el de las telecomunicaciones \parencite{mintic}. Es notable observar la rápida evolución de las Tecnologías de la Información y las Comunicaciones (TIC) con el paso del tiempo, y también como las necesidades del mercado con nuevas oportunidades de expansión están obligando a las empresas y a los ciudadanos a buscar una sociedad cada vez más digitalizada e interconectada \parencite{morante2015}.

En Colombia Claro, Movistar y Tigo se consideran las empresas de telecomunicaciones con mayor alcance y cobertura en el país \parencite{Tecnosfera}. Sin embargo, la cantidad de quejas relacionadas con la calidad de los servicios prestados por estas empresas se hacen cada vez mayores y visibles para los usuarios adscritos a estos operadores telefónicos \parencite{Portafolio}. De acuerdo con un estudio realizado por el periódico La República, en el que se evaluaron criterios como incremento tarifario, fallas en la continuidad del servicio, indebida atención para la cancelación de contratos y silencio administrativo, el operador con mayor deficiencia en los servicios de telefonía celular fue Claro (45.5\%), seguido de Movistar (13.6\%) y Tigo (9.1\%). Similarmente, según un informe de la CRC en el año 2018, los operadores que presentaron mayor cantidad de caídas en llamadas telefónicas fueron los operadores Claro, Avantel y Tigo, y en relación con las llamadas no exitosas se encuentran Avantel, Movistar y Claro. Finalmente, el informe señala que Movistar y Claro son los operadores que presentan las principales fallas debido a problemas con la velocidad de descarga de contenidos web \parencite{RCN}. Con la aparición de las redes sociales Facebook y Twitter estas quejas y la inconformidad de los usuarios con los servicios empezaron a ser visibles, y el valor atribuido a un mensaje en las cuentas de las empresas comenzó a tener relevancia en la sociedad.

Twitter es una de las plataformas sociales con más de 6.5 millones de usuarios en Colombia para el año 2019, y en ella se publican diariamente, en promedio, 500 millones de tweets en todo el mundo, y donde más del 47\% de los usuarios activos revisan esta red social al menos una vez por día \parencite{MEN} \parencite{MinTIC2}. Con la llegada de esta red social, las inconformidades de los clientes se volvieron públicas. Las personas comenzaron a interactuar con las empresas por medio de tweets para precisar que las organizaciones ofrecieran un nivel de servicio acorde con sus expectativas \parencite{Twitter}. Debido a esto, el número de Tweets que manifiestan solicitudes de atención al cliente en las cuentas de Twitter de las distintas organizaciones se ha triplicado en los últimos años, debido a que los usuarios exigen calidad en los servicios, pues ambicionan flexibilidad, disponibilidad y atención personalizada sobre cómo, dónde y cuándo deberían ser escuchados. Debido a esto, las empresas decidieron fundar un departamento encargado y dispuesto a tratar con las constantes quejas de clientes insatisfechos \parencite{Pelegri}.

Una problemática similar, se abordó en un estudio realizado por \parencite{alamsyah2016network} en Indonesia, donde contrasta tres de los proveedores de telecomunicaciones más importantes en este país, Telkomsel, XL e Indosat. En este documento, se recopilaron las conversaciones sobre esas compañías en la red social Twitter, además se construyó y analizó el texto obtenido sobre cada marca. Para el estudio se utilizaron técnicas de minería de texto, análisis de sentimientos y visualización, se encontró que las palabras Paket, Internet y Tau presentaron la conexión más ponderada, lo cual se refiere a que la expresión del consumidor es más dominante sobre el producto de Internet de Telkomsel llamado Tau, que considera es un producto barato y valioso. Para el texto de la red XL, se encontró que las palabras Sinyal, 3G y Paket dominan el texto de las redes. Finalmente, para la red de Indosat, se determinó que Internet, Sinyal y Gangguan son palabras dominantes, lo que significa que los consumidores tienen sentimientos negativos hacia los servicios de Indosat, como la señal de red perdida o incorrecta para datos y voz, baja velocidad en cuanto a conexión, y en su mayoría presentaron su denuncia por la mañana. 

De acuerdo con un informe de Lithium Technologies, llevado a cabo en octubre de 2013, el 62\% de las personas que emplean Twitter para exteriorizar quejas esperan una respuesta en un tiempo menor a una hora. Lo cual constituye presión para las compañías, dado que deben disponer tanto de personal calificado como de una estrategia para interactuar con los clientes en esta red social. Igualmente, una encuesta realizada por Simply Measured a mediados de marzo de 2015 señaló que, cada año aumenta cerca de un 20\% el número de compañías que emiten cuentas dedicadas a la asistencia técnica de solicitudes en esta red social.  

Estadísticas del Ministerio de Tecnologías de la Información y las Comunicaciones (TIC) del año 2018 señalan que tan solo el 1.8\% de las compañías, vinculadas a los sectores de servicios públicos, textiles, productos metalúrgicos, productos químicos y farmacéuticos, construcción e información, utilizan la Inteligencia Artificial como herramienta para la toma de decisiones \parencite{MinTIC3}. 

Debido a lo anterior, desarrollar habilidades en este campo que le permitan al Ingeniero Industrial optimizar procesos y aumentar la eficiencia de las compañías, mediante herramientas innovadoras, brindaría una oportunidad para aportar en el desarrollo de la Cuarta Revolución Industrial en Colombia, y al mejoramiento de productos y servicios en diferentes sectores económicos del país.

Por lo anterior, este trabajo tiene como objetivo implementar habilidades en el área de analítica de negocios por medio de una investigación cualitativa y cuantitativa basada en tres problemáticas principales. 1) La falta de aprovechamiento de los datos como estrategia para la caracterización y análisis del cliente, 2) el bajo porcentaje de las empresas de consultoría en Colombia que realizan un trabajo efectivo en analítica para la toma de decisiones, y 3) la percepción de la calidad de un producto o servicio en una red social. Para esto, se desarrolla un caso práctico aplicado a la industria de telecomunicaciones en Twitter, donde se evalúan mediante herramientas de Ingeniería Industrial y analítica de negocios la percepción de la calidad de los servicios de las empresas de comunicación más importantes de Colombia: Claro, Movistar y Tigo \parencite{Republica}.

\section {Formulación de la investigación}

\subsection {Pregunta rectora de la investigación}
Teniendo en cuenta la información presentada anteriormente, se plantea la siguiente pregunta de investigación:
¿Cuál es la percepción de los clientes sobre la calidad de los servicios de las tres empresas de telefonía móvil más importantes de Colombia (Movistar, Claro y Tigo) en Twitter en un periodo de seis meses? 

\subsection {Objetivos}
\subsubsection {Objetivo general}
Analizar la percepción de la calidad de los servicios de las tres empresas de telefonía móvil más importantes de Colombia, Movistar, Claro y Tigo, en la red social Twitter.

\subsubsection {Objetivos específicos}

\begin{itemize}
\item Construir la base de datos correspondiente a cada uno de los operadores telefónicos seleccionados de mayor participación en el mercado, en un periodo correspondiente a seis meses; entre octubre de 2018 hasta mayo de 2019. 

\item Analizar el conjunto de datos recolectados mediante técnicas de minería de texto, análisis de sentimientos y analítica de negocios. 

\item Representar los resultados obtenidos en la investigación, a través de herramientas de visualización de datos. \end{itemize}

\newpage
\chapter {Marco teórico}
Para la construcción del marco teórico se hizo una revisión en las bases de datos \textit {IEEEXplore, Taylor and Francis, Science Direct, Research Gate}, fuentes de información económica y estadística, y en libros relacionados con la ciencia de los datos. Se revisaron los temas pertinentes sobre minería de texto, análisis de sentimientos, vigilancia empresarial, analítica de negocios y visualización de datos.

A continuación, se presentan las definiciones generalmente aceptadas, algunas aplicaciones y la descripción teórica de las técnicas implementadas en este proyecto de investigación. 

\section {Minería de Texto}
El concepto de minería de texto surge a finales de los años 90, época donde el interés por investigar este tema comenzó a ser destacado \parencite{justicia}, y considerado como uno de los principales métodos para extraer y descubrir información relevante de documentos de texto no estructurados. La importancia de la minería de texto nace de la necesidad de extraer información de documentos no estructurados de manera automatizada \parencite{subbaiah2013extracting} \parencite{halibas2018application}. Con el paso del tiempo que la información documental digital fue creciendo \parencite{kim2017practical}, como se observa en la figura \ref{fig:evolucion}, y estudiar las redes sociales se convirtió en un factor trascendental para el trabajo de las compañías, donde analizar la cantidad de información no estructurada y desconocida (70\%) representaba un reto para la época \parencite{kim2017practical}. 

\begin{figure}[H] 
\centering 
\includegraphics [width=0.80\textwidth] {figure/Evolution.jpg} 
\centering 
\caption {Evolución técnicas análisis de texto. Fuente: \parencite{justicia}} 
\label{fig:evolucion} 
\end{figure} 

La minería de texto es el descubrimiento de conocimiento en documentos de texto para encontrar patrones de seguimiento importantes acerca del cliente y de esta manera, satisfacer los requerimientos asociados con la adquisición de un bien o un servicio \parencite{kamruzzaman2010text}. Por esta razón, hacer uso de la información y el conocimiento generado mediante el análisis de grandes cantidades de datos es una oportunidad para obtener beneficios para realizar actividades como estudios de mercado, análisis de solicitudes o  para la administración general de los negocios \parencite{velasqueznivel}.

Existen aplicaciones como los sistemas de identificación de tendencias emergentes (ETD), los cuales están construidos con base en minería de texto, y muestran las necesidades de un cliente en tiempo real \parencite{berry10survey}. Estos sistemas permiten manejar grandes cantidades de información en poco tiempo, lo que facilita a la empresa tomar rápidas decisiones en función de las emergentes peticiones del consumidor.  

Otras aplicaciones de la minería de texto son nombradas en \parencite{sukanya2012techniques}, de las cuales se destacan, clasificación de noticias como un texto, análisis de tendencias del mercado, análisis de correos no deseado, vigilancia tecnológica o relacionadas directamente con el e-Commerce, marketing, análisis de sentimientos, minería de tesauros, e-Learning, entre otras, las cuales son potenciales para el mejoramiento de la competitividad y el desempeño de las compañías \parencite{malaver2016vigilancia}.

\subsection{Knowledge Discovery in Text (KDT), CRISP-DM y Knowledge discovery in databases (KDD)}

CRISP-DM consiste en módulos de desarrollo, como se muestra en la figura \ref{fig:CRISP}, que se interrelacionan entre sí para la ejecución de seis fases, no necesariamente secuencial, de un proyecto sistemático y estructurado de minería de datos \parencite{velasqueznivel} \parencite{Elizabeth}.

\begin{figure}[H] 
\centering 
\includegraphics [width=0.80\textwidth] {figure/CRISP DM.jpg} 
\centering 
\caption {Metodología CRISP-DM. Fuente: \parencite{wirth2000crisp}} 
\label{fig:CRISP} 
\end{figure} 

Esta metodología de análisis (CRISP-DM)  permite llevar a cabo un proceso para el análisis de datos denominado \textit {Knowledge discovery in databases (KDD)}, un proceso iterativo e interactivo \parencite{Elizabeth} \parencite{shafique2014comparative}, que tiene como finalidad la extracción de conocimiento desconocido de conjuntos de datos estructurados \parencite{Elizabeth}, como se muestra en la figura \ref{fig:KDD}.

Con la minería de texto y la necesidad de extraer conocimiento de documentos no estructurados nace el concepto de \textit {Knowledge Discovery in Text (KDT)}, como una adaptación del proceso KDD aplicada al análisis de información textual \parencite{feldman1995knowledge}. En el cuadro \ref{tabla:autores} se presenta una comparación de seis autores sobre los pasos propuestos para emplear esta metodología de minería de textos.

\begin{figure}[H] 
\centering 
\includegraphics [width=0.77\textwidth] {figure/Metodología KDD.jpg} 
\centering 
\caption {Metodología KDD. Fuente: \parencite{fayyad1996knowledge}} 
\label{fig:KDD} 
\end{figure} 

\begin{table}[H]
\centering
\begin{center}
\begin{tabular}{m{2.8cm} m{2.8cm} m{2.8cm} m{2.8cm} m{2.8cm}}
\toprule[0.6mm]
\multicolumn{1}{c}{\textbf{Autor}} & \multicolumn{1}{c}{\textbf{Paso I}} & \multicolumn{1}{c}{\textbf{Paso II}} & \multicolumn{1}{c}{\textbf{Paso III}} & \multicolumn{1}{c}{\textbf{Paso IV}} \\
\midrule[0.6mm]
\centering \parencite{kim2017practical}&Recolección de los datos &Procesamiento del lenguaje Natural&Análisis de texto &Visualización\\
\midrule[0.25mm]
\centering \parencite{justicia}&Preprocesamiento &Minería de textos & Visualización & \\
\midrule[0.25mm]
\centering \parencite{halibas2018application}&Extracción de datos &Preprocesamiento de la información &Aplicación de algoritmos& \\
\midrule[0.25mm]
\centering \parencite{sukanya2012techniques}&Preprocesamiento del texto &Técnicas de Minería de Textos &Análisis de texto& \\
\midrule[0.25mm]
\centering \parencite{shukri2015twitter}&Recolección de los datos &Preprocesamiento de los datos &Aplicación modelos de Machine Learning & \\
\bottomrule[0.6mm]
\end{tabular}
\caption{Símil de pasos para aplicar minería de texto. Fuente:(Los autores)}
\label{tabla:autores}
\end{center}
\end{table}

De acuerdo con lo anterior, el proceso para la extracción de conocimiento de documentos de texto (KDT) se simplifica mediante la figura \ref{fig:KDT} y será la metodología guía para cumplir con la fase dos de la presente investigación.

\begin{figure}[H] 
\centering 
\includegraphics [width=0.80 \textwidth] {figure/Ilustración 9 Metodología KDT.jpg} 
\centering 
\caption {Metodología KDT. Fuente: https://bit.ly/2ZkYUCV}
\label{fig:KDT}
\end{figure}

\subsection{Técnicas utilizadas en la minería de texto}
La minería de texto utiliza técnicas como procesamiento del lenguaje natural (NLP), Machine Learning y administración del conocimiento \parencite{andrews2007recent}, las cuales son ejecutadas mediante los pasos que enuncia \parencite{mohanty2013big} en procesos de extracción, agrupamiento, asociación, resúmenes o visualización de información \parencite{sukanya2012techniques}.

Existen técnicas avanzadas clasificadas por el tipo de aprendizaje, supervisado y no supervisado \parencite{halibas2018application}, tales como arboles de decisión, algoritmos bayesianos, algoritmos genéticos, redes neuronales o máquinas de soporte vectorial (SVM) para manejar documentos cuya estructura de datos es compleja \parencite{shukri2015twitter}. En la figura \ref{fig:supervisado} se presenta un esquema de las técnicas anteriormente enunciadas.

\begin{figure}[H] 
\centering 
\includegraphics [width=1\textwidth] {figure/Algoritmos Machine Learning.jpg} 
\centering 
\caption {Técnicas de aprendizaje supervisado y no supervisado. Fuente: Los autores} 
\label{fig:supervisado}
\end{figure}

\subsection{Conceptos matemáticos en la minería de texto}
En esta sección se presentan los conceptos básicos y la formulación matemática de la técnicas utilizadas en esta investigación. Estos términos se emplean en el análisis de los datos, así como en el algoritmo de clasificación que se presentará posteriormente.

\textbf{Matriz de terminos y documentos:} 
Se refiere a una matriz que almacena en sus filas a un conjunto de términos y en las columnas a los documentos. Es una de las más utilizadas para representar documentos. Con estas matrices se cuenta el número de veces de coocurrencia de cada término. Es un espacio de unos y ceros, para definir el contenido de un documento $J$, si el término de la fila $i$ pertenece al documento entonces $a_{ij}=1$, de lo contrario $a_{ij}=0$ \parencite{bagga1998entity} \parencite{jaimediseno}. Esta relación se expresa mediante una matriz de términos-documentos denominada $N$ de dimensión $[mxn]$, donde $m$ es el número de términos de la colección de documentos \parencite{bagga1998entity}, $n$ es el total de documentos de la matriz y un elemento $a_{ij}$ de la matriz $A$ es una representación entre el término $i$ y el documento $d$, tal como se observa en la fórmula 1. Los vectores columna de dichas matrices indican si los textos son similares o no. Para más información consultar \parencite{valero2017tecnicas}.

\begin{equation}
\begin{bmatrix}
a_{11} & a_{12} & a_{13} & ... & a_{1n}\\
a_{21} & a_{22} & a_{23} & ... & a_{2n}\\
... & ... & ... & ... & ...\\
a_{m1} & a_{m2} & a_{m3} & ... & a_{mn}\\
\end{bmatrix}
\addtocounter{neq}{1}
\end{equation}

\textbf{tf (term frequency):}  
Es una medida para cuantificar la importancia de una palabra en un documento. Teoricamente es la aparición de un término en un documento, donde $tf_{ij}$ es igual número de repeticiones del término $t_i$ en el documento $d_j$ \parencite{jaimediseno}. Ver fórmula 2  

\begin{equation}
tf = \frac{t_i}{longitudocument_j}
\end{equation}

\textbf{idf (frecuencia inversa de documento):}  Representa la importancia de un término $i$ del documento $j$ en un conjunto de documentos $N$, donde $n_i$ es el número de documentos que contienen el término $i$, como se observa en la fórmula 3 \parencite{cobo2006tecnicas}.

\begin{equation}
idf = \log{\frac{N}{n_i}} \forall n_i > 0
\end{equation}

\textbf{tf idf:} 
El estadístico $tf-idf$ mide el peso de un término en un documento teniendo en cuenta la frecuencia de este término en otros documentos. Ver fórmula 4.

\begin{equation}
tf-idf = tf * idf
\end{equation}


\section{Análisis de sentimientos}
Análisis de sentimientos o minería de opinión es el estudio computacional de las opiniones, valoraciones, actitudes y emociones de las personas sobre un producto, marca, institución, organización, empresa, evento o persona \parencite{liu2012survey}. Es una de las áreas de investigación con mayor participación en el procesamiento del lenguaje natural, y ampliamente estudiada en minería web y de texto. De acuerdo con \parencite{godbole2007large}, el análisis de sentimientos de textos es un campo amplio y creciente que ha permeado diferentes sectores debido a su importancia para la sociedad y las compañias\parencite{liu2012sentiment}. 

El análisis de sentimientos proporciona a las empresas un medio para estimar el grado de aceptación de un producto o servicio, y para determinar estrategias que les permita mejorar la percepción de la calidad de los mismos. Facilita a los tomadores de decisiones la formulación de políticas o estrategias enfocadas en el desarrollo de la organización \parencite{PRABOWO2009143}. El sentimiento que se encuentra en los comentarios o críticas proporcionan información que resulta valiosa para el desarrollo de actividades como el monitoreo de redes sociales, marcas, voz del cliente, servicio al cliente, detección de tendencias e investigación de mercados que pertenecen a la operación diaria de una organización \parencite{miner2012practical}. La importancia del análisis de sentimientos coincide con el crecimiento de las redes sociales en la web, los individuos y las organizaciones están utilizando las opiniones públicas como medio principal para la toma de decisiones \parencite{liu2012survey}. Los sistemas de análisis de sentimientos están siendo aplicados en diferentes sectores y dominios sociales debido a que las opiniones son centrales en las actividades humanas y son influenciadores clave de comportamientos a nivel social \parencite{liu2012sentiment}. 

Las redes sociales al ser un espacio donde los usuarios tienen la oportunidad de expresar comentarios o ideas asociadas a un hecho determinado, la necesidad de estudiar la manera en como las emociones o sentimientos pueden ser interpretados a través de un texto es cada vez más importante \parencite{liu2010sentiment}. De acuerdo con la literatura, se considera el enojo, disgusto, miedo, alegría, tristeza, sorpresa y amor como las emociones universales, siendo la alegría, tristeza, amor, confusión y enojo las más representativas en Twitter \parencite{montesinos2014analisis}. Para \parencite{parveen2016sentiment} las emociones también pueden ser reconocidas mediante emoticones. En el cuadro \ref{tabla:listaemojis} se presenta un resumen de los emoticones más utilizados, ordenados de acuerdo con su uso en Twitter. 

\begin{table}[H] 
\centering 
\begin{center} 
\begin{tabular}{m{2.5cm} m{6cm} m{2.5cm}} 
\toprule[0.6mm] 
\multicolumn{1}{c}{\textbf{Sentimiento}} & \multicolumn{1}{c}{\textbf{Descripción}} & \multicolumn{1}{c}{\textbf{Representación}} \\ 
\midrule[0.6mm] 
\centering Cara con lágrimas de risa & El emoji con lágrimas de alegría se puede usar para demostrar algo divertido o agradable  &\includegraphics[width=15mm]{figure/laugh.jpg}\\ 
\midrule[0.25mm] 
\centering Cara de llanto &El emoji con lágrimas representa la tristeza o incertidumbre que los usuarios tienen cuando se enteran de algo. &\includegraphics[width=15mm]{figure/crying.jpg} \\ 
\midrule[0.25mm] 
\centering Ojos con corazones &Este emoji es usado para expresar amor o un estado de encanto ya sea con el mensaje, objeto o con una persona. &\includegraphics[width=15mm]{figure/love.jpg}  \\ 
\midrule[0.25mm] 
\centering Risa descontrolada &Este emoji, al igual que la risa con lágrimas, muestra un nivel de diversión mas intenso. &\includegraphics[width=15mm]{figure/lol.jpg}  \\ 
\midrule[0.25mm] 
\centering Cara de arrepentimiento &Es utilizado para expresar el desagrado que causa alguna publicación. &\includegraphics[width=15mm]{figure/whiteeyes.jpg}  \\ 
\bottomrule[0.6mm] 
\end{tabular} 
\caption{Lista de emojis más utilizados en Twitter. Fuente:(Los autores)} 
\label{tabla:listaemojis} 
\end{center} 
\end{table} 

Afirman los autores \parencite{herrero} que debido a la cantidad de comentarios, emociones, opiniones, gustos y valoraciones que se manifiestan diariamente a través de diversos canales de comunicación resulta útil extraer de forma automática el sentimiento predominante asociado a una marca, empresa o producto. Estos sentimientos pueden clasificarse en dos categorías: positivos y negativos; o en una escala de n-punto, muy bueno, bueno, satisfactorio, malo o muy malo. Por esta razón, el análisis de sentimientos puede interpretarse como una tarea de clasificación en la que cada categoría representa un sentimiento \parencite{PRABOWO2009143}. Los cuales se monitorizan utilizando metodologías de análisis tradicional o herramientas propiamente de aprendizaje de maquina \parencite{sisodia2017sentiment}, pues esta información es espontánea, poco estructurada y requiere de un análisis computacional \parencite{liu2010sentiment}. La figura \ref{fig:tecnicas} representa las metodologías de análisis de sentimientos que \parencite{sisodia2017sentiment} plantean. 

\begin{figure}[H] 
\centering 
\includegraphics [width=0.8\textwidth] {figure/Tecnicas de analisis de sentimientos.jpg} 
\centering 
\caption {Técnicas usadas en el análisis de sentimientos. Fuente \parencite{sisodia2017sentiment}}
\label{fig:tecnicas} 
\end{figure} 

Encontrar fuentes de opinión y monitorearlas en la web todavía puede ser una tarea que requiere esfuerzos debido a la amplia cantidad de fuentes disponibles. En muchos casos, las opiniones se ocultan en los mensajes de foros y blogs. Es difícil para una persona encontrar fuentes relevantes, extraer frases relacionadas con opiniones, leerlas, resumirlas y organizarlas en formas utilizables. Por lo tanto, se necesitan sistemas automatizados de descubrimiento y resumen de opiniones que permitan optimizar esta actividad \parencite{liu2010sentiment}.

\section{Vigilancia Empresarial}
La introducción de nuevas tecnologías y el acelerado surgimiento de diferentes campos de actividad interdisciplinares están presentando nuevos desafíos para las organizaciones. La globalización ha conducido a las empresas a la búsqueda de herramientas que les permitan adelantarse a los acontecimientos que pueden surgir, lo cual significa permanecer en un mercado mundial en el que sobreviven los competidores más fuertes. 

Lo anterior representó para las empresas, desde inicios de los años ochenta, un contexto de creciente necesidad por adaptarse al entorno competitivo y tecnológico. \parencite{porter1992estrategia} sugiere la necesidad de realizar un análisis detenido de la competencia mediante el empleo de sistemas formalizados de inteligencia. Desde entonces la progresiva aceptación de enfoques formales de vigilancia como forma de optimizar la captación, análisis y utilización de la información ha sido utilizada y analizada en compañías de distintas partes del mundo \parencite{palop1999vigilancia}. 

Hacia finales del año 2000 comenzó a observarse el desafío que significaba el exceso de información para la productividad de las organizaciones, puesto que la cantidad de información generada, así como el número de medios a través de los cuales es posible acceder, excedía la capacidad de procesamiento y análisis \parencite{Ortega}. Es así como el interés de las compañías por captar información externa con la intención de transformarla en conocimientos específicos les conduce a acoger comportamientos proactivos y a desplegar, dentro del marco de los espacios de creación, intercambio, difusión y aplicación de conocimientos, su propio sistema de alarma temprana trabajando como un radar para reconocer y recopilar aquellos datos e información que pueden ser fuente de amenaza u oportunidad \parencite{morcillo2003vigilancia}. Dicho método de alerta se encontraría enmarcado al interior de las llamadas prácticas de vigilancia e inteligencia competitiva. En consecuencia, se entiende vigilancia empresarial \parencite{palop1999vigilancia} como: \\

\begin{quote}
\small El esfuerzo sistemático y organizado por la empresa de observación, captación, análisis, difusión                precisa y      recuperación de información sobre los hechos del entorno económico, tecnológico,                  social o comercial,             relevantes para la misma por poder implicar una oportunidad u amenaza            para ésta (pg. 22).
\end{quote}
          
Uno de los instrumentos imprescindibles para poder gestionar exitosamente la innovación es la \textit{vigilancia}, \parencite{escorsa2001vigilancia} que les ha permitido a las compañías percatarse de los acontecimientos que surgen en el sector, tanto en el ámbito tecnológico como de mercados, competidores, normativa, etc. No obstante, estos ambitos formales no han estado exentos de dificultades y resultados desalentadores. La insuficiente destinación de recursos y apoyo a estos sistemas, funciones organizadas inadecuadamente, la ausencia de capacitación al personal, la comunicación limitada con la alta dirección, la no identificación de objetivos propios de la organización o la dificultad en la integración de la inteligencia en el proceso de toma de decisiones son algunas de las causas de fracaso de estos sistemas \parencite{palop1999vigilancia}.

En cualquier caso, la adopción de un enfoque de este tipo debe relacionarse con las capacidades que aglutinan las acciones materiales e intelectuales de la empresa y también debe abordarse desde la perspectiva de las necesidades particulares de la organización, mediante una implementación a medida y en el transcurso de un proceso paulatino pero continuo, todo ello, con la finalidad de lograr un aprendizaje organizativo a partir de la transformación de conocimientos colectivos.

\subsection{Enfoques de la vigilancia empresarial}
De acuerdo con \parencite{castro2007guia} los cinco factores determinantes de la competitividad de una empresa son: los clientes, proveedores, productos sustitutos, los competidores y los nuevos potenciales competidores en el sector. Estos factores definen los enfoques generales de la vigilancia estratégica en: vigilancia comercial, vigilancia competitiva, vigilancia tecnológica, vigilancia del entorno o de políticas normativas \parencite{palop1999vigilancia} \parencite{jaimediseno}.

\begin{figure}[H] 
\centering 
\includegraphics [width=0.70\textwidth]{figure/Tipos de vigilancia.jpg} 
\centering 
\caption {Tipos y enfoques de la vigilancia comercial. Fuente \parencite{jaimediseno}} 
\label{fig:vigilancia} 
\end{figure} 

La vigilancia comercial es la encargada de estudiar las dinámicas, atención y datos relacionados con el cliente y el proveedor \parencite{rey2009informe}. La vigilancia tecnológica realiza el seguimiento de las tecnologías emergentes y disponibles para llevar a cabo una tarea relacionada con el sistema, proceso o producto de la empresa \parencite{leon2006valoracion}. La vigilancia del entorno o de políticas normativas se ocupa de revisar toda la reglamentación externa (Política, social, legal, etc.) que afecta a la empresa. Finalmente, la vigilancia competitiva se encarga de hacer un análisis de los competidores actuales y potenciales en el sector, así como la influencia de los productos sustitutos del mercado que benefician o afectan el desarrollo comercial de la compañía \parencite{castro2007guia}.

A raíz de la necesidad de estar al tanto de lo que está sucediendo en el entorno con nuevos competidores, nuevos mercados o nuevas amenazas, ha sido, junto con la aparición del Internet, la razón para implementar un sistema de vigilancia capaz de filtrar, interpretar y evaluar la información para permitir a sus usuarios tomar decisiones de manera más precisa \parencite{escorsa2001vigilancia}.

Finalmente, \parencite{rey2009informe} explica dos conjuntos de técnicas que componen la vigilancia Avanzada, las cuales permiten explorar grandes volúmenes de datos, información y conocimientos que se almacenan en distintos medios. Vázquez expone la minería de datos como un proceso de identificación novedosa de patrones ocultos en los datos y la minería de texto como la exploración a partir de técnicas de aprendizaje automático de regularidades o patrones que se hallan dentro de un texto. 

\section{Analítica de negocios}
La analítica de negocios surge en los años 70 como una herramienta de apoyo para la toma de decisiones \parencite{seiter2017business}. Al trascurrir el tiempo, las empresas tuvieron la necesidad de aplicar esta ciencia como medio de apoyo para la operación de sus negocios \parencite{roiganalitica}. Con la ayuda de la analítica las compañías comenzaron a entender sistemáticamente sus procesos, promoviendo la eficiencia de las operaciones y actividades mediante modelos analíticos que permitieron la optimización de costos y la predicción de las tendencias del mercado \parencite{trkman2010impact}. La Analítica nace como una ciencia dedicada al análisis de datos, métodos y herramientas que permiten la generación de conocimiento, tanto en empresas del sector de manufactura como en la de servicios \parencite{george2017analytics}.

Con la aparición de la analítica diversas disciplinas e industrias comenzaron a verse influenciadas por las nuevas herramientas que esta ciencia ofrecía, obligándolas a cambiar sus procesos tradicionales de operación desde la planeación de la producción hasta la toma de decisiones estratégicas. Áreas relacionadas con la consultoría, ventas, logística, producción o calidad son áreas que están siendo permeadas por nuevas tecnologías emergentes en búsqueda de eficiencia y efectividad en los procesos de las compañías \parencite{davenport2018analytics}. La analítica de negocios y su relación con la tecnología permite a las organizaciones tener un mejor entendimiento de sus negocios y mercados, y aprovechar las oportunidades que se presentan debido a los grandes volúmenes de datos y dominios específicos que esta ciencia posee \parencite{Analitica_T}. Para el entendimiento de los dominios que la analítica tiene se realizó una búsqueda en la literatura, la cual cuenta con una cantidad de información de autores como \textit{Thomas H. Davenport, Bernard Marr, David Loshin, Mischa Seiter}, entre otros. Para la utilidad de esta investigación se resaltan tres modelos clave, tal como se observa en el cuadro \ref{tabla:analiticas}.

\begin{table}[H] 
\centering 
\begin{center} 
\begin{tabular}{m{2.6cm} m{3.4cm} m{3.4cm} m{3.4cm}} 
\toprule[0.6mm] 
\multicolumn{1}{c}{\textbf{Autor}} & \multicolumn{1}{c}{\textbf{Analítica descriptiva}} & \multicolumn{1}{c}{\textbf{Analítica predictiva}} & \multicolumn{1}{c}{\textbf{Analítica prescriptiva}} \\ 
\midrule[0.6mm] 
\centering \parencite{schniederjans2014business} & Aplicación de conceptos y técnicas estadísticas que describen la composición interna de un conjunto o base de datos&En esta fase se estudia la construcción de modelos que permitan la predicción e identificación de futuros eventos &En esta etapa se generan modelos avanzados que combinan técnicas de optimización e investigación de operaciones \\
\midrule[0.25mm] 
\centering \parencite{seiter2017business} &Busqueda de información que describa una situación en específico acerca del estatus de un activo o un producto& Entender cómo predecir cuándo es probable que ocurra un evento futuro&Modelos que combinan técnicas de investigación de operaciones a través de la experimentación \\ 
\bottomrule[0.6mm] 
\end{tabular} 
\caption{Clasificación de los modelos de la analítica. Fuente:(Los autores)} 
\label{tabla:analiticas} 
\end{center} 
\end{table} 

Actualmente, diversas industrias utilizan las aplicaciones de la analítica en sus procesos diarios de operación. Por ejemplo, Organizaciones No Gubernamentales (ONGs) hacen uso de la Inteligencia Artificial para realizar campañas de recolección de dinero, y mediante esta tecnología, predecir y crear mensajes razonables que creen interés en los donantes \parencite{Analitica_E}. En la industria del deporte la estadística y la analítica son usadas para tomar mejores decisiones en los partidos, y también para el monitoreo de la salud, el estado físico y la nutrición de sus jugadores \parencite{Analitica_E}. En el sector de la salud, los hospitales han estado recolectando importantes cantidades de datos para mejorar el cuidado del paciente, así como también, para el control de indicadores. Por ejemplo, en Estados Unidos el 45\% de los hospitales hacen uso de la analítica predictiva para reducir costos y para predecir la capacidad de las habitaciones y la demanda de la fuerza de trabajo necesaria \parencite{Analitica_E}. 

La analítica de negocios, como toda ciencia, ha pasado por diferentes etapas de desarrollo, desde la era 1.0, donde el enfoque era la inteligencia de negocios y la comprensión de los modelos organizacionales, hasta la era 4.0 donde la inteligencia artificial es la herramienta básica para su implementación \parencite{davenport2018analytics}. Esta evolución se presenta en la figura \ref{fig:Analytics}.

\begin{figure}[H] 
\centering 
\includegraphics [width=0.85\textwidth]{figure/Diagrama Analytics.jpg} 
\centering 
\caption {Evolución de las eras analíticas. Adaptado de \parencite{davenport2018analytics}} 
\label{fig:Analytics} 
\end{figure}

Formar habilidades en este sector es una ventaja competitiva que las organizaciones están requiriendo para la mejora y optimización de sus procesos. Para el Instituto de Ingenieros Industriales y de Sistemas (IISE por sus siglas en inglés), la intersección entre la Ingeniería Industrial y la Analítica de negocios es cada vez más estrecha \parencite{IISE}. Para 2021 más del 90\% de los clientes del mercado a nivel mundial interactuarán con sistemas inteligentes \parencite{Analitica_L}; y es allí, donde la Ingeniería Industrial debe estar preparada para asumir nuevos retos que le permitan optimizar y mejorar el desempeño de las compañías. Esto por medio de nuevas herramientas, aplicaciones y técnicas que le permitan analizar datos y ayudar a tomar decisiones estratégicas basadas en hechos y evidencias \parencite{turbanbusiness}. Asumir una responsabilidad en el campo de la analítica de negocios permite explotar habilidades en sectores como la administración de proyectos, pensamiento crítico para la solución de problemas; y abrir oportunidades en la industria como gerentes de datos, gerente de mercadeo y del consumidor, arquitectos Big Data o como analista de mercados y negocios \parencite{Analitica_T}.


\section{Visualización de datos}
Actualmente, el mundo se enfrenta con el manejo de volúmenes de datos cada vez más grandes. En la última década, la mejora constante de los dispositivos de almacenamiento de datos y los medios para crear y recopilar datos influyeron en la manera en que se procesa la información \parencite{keim2010mastering}. Debido al progreso en la potencia y capacidad de almacenamiento de la computadoras en las últimas décadas, los datos se producen a un ritmo más acelerado que la capacidad para almacenarlos y analizarlos, entorpeciendo la posibilidad de ser empleados en la toma de decisiones \parencite{keim2008visual}. Este fenómeno es conocido como sobrecarga de información.

La visión global de conducción de la analítica visual es convertir la sobrecarga de información en una oportunidad para que las organizaciones puedan procesar datos e información de forma transparente en un proceso analítico. A pesar de que se han implementado nuevas herramientas para el análisis automatizado de datos, todavía la industria de la tecnología se enfrenta al problema de la comprensión y el análisis de la información \parencite{osti_912515}. En consecuencia, la analítica visual surge como una herramienta para fomentar la evaluación constructiva, la corrección y evaluación rápida de procesos y modelos que permitan la mejora en la construcción de conocimiento y toma de decisiones \parencite{keim2010mastering}. 

La analítica visual es una consecuencia de los campos de la visualización científica e informativa que incluye tecnologías de otros campos, incluyendo la gestión del conocimiento, el análisis estadístico, la ciencia cognitiva, la ciencia de decisiones, entre otros \parencite{wong2004visual}. En ésta, la visualización se integra como núcleo y, en conjunto con otras disciplinas científicas, mejora la división del trabajo entre el hombre y la máquina, combina el razonamiento analítico con visualización interactiva, es decir, representaciones visuales y técnicas de interacción, que explotan las capacidades perceptivas del ser humano para permitir a los usuarios ver, explorar y entender grandes cantidades de información de forma simultánea, así como técnicas de apoyo a la producción, presentación y difusión de resultados analíticos que comuniquen información en el contexto adecuado para una variedad de audiencias \parencite{keim2011solving}. Esta combinación entre las capacidades de análisis automático de las computadoras y el razonamiento humano lo denominan los autores como Visual Analytics. 

En general, la analítica visual puede describirse como la ciencia del razonamiento analítico facilitada por las interfaces visuales interactivas. Este es un proceso iterativo que implica la recopilación de información, el procesamiento previo de datos, la representación del conocimiento y la toma de decisiones. El objetivo de esta herramienta es obtener información sobre el problema que representa el análisis de grandes cantidades de datos procedentes de diversas fuentes heterogéneas de información \parencite{keim2011solving}.

En este capítulo se revisaron los temas pertinentes para el desarrollo de esta investigación. Se describieron las técnicas y su formulación matemática, además, temas de relevancia que fueron el soporte para la implementación de la metodología de este proyecto de analítica en Twitter. 

\chapter{Metodología de la investigación}
Para dar cumplimiento a los objetivos de esta investigación, se presenta mediante el siguiente esquema la metodología empleada para el desarrollo de este proyecto. En el siguiente capítulo se explicaran cada uno de siete pasos empleados, como se observa en la figura \ref{fig:CRISP_IBM}. Cada etapa se enumera del (1)-(7) donde 1) Comprensión del negocio, 2) Acercamiento al proyecto de analítica, 3) Requerimientos y recolección de los datos, 4) Comprensión de los datos, 5) Preparación de los datos, 6) Modelado y 7) Visualización. En cada una de estas etapas se describen las herramientas y técnicas utilizadas en el proceso, así como las limitaciones encontradas.

La metodología se construye con base en dos metodologías utilizadas para proyectos de ciencia de los datos, CRISP-DM (Cross Industry Standard Process for Data Mining) y la metodología propuesta por la compañia de tecnología IBM. Se decide emplear CRISP-DM debido a su completitud, popularidad en el desarrollo de proyectos y porque este método de análisis tiene en cuenta al entorno de negocio, lo que permite tener un panorama más amplio de los resultados \parencite{CRISPDM}. IBM propone una metodología de implementación de proyectos de analítica de datos estándar, ampliamente utilizada y reconocida en compañías americanas como American Air-Lines \parencite{IBMCORP}. Por estas razones, se propuso una combinación de ambas metodologías con el objetivo de abordar y generar un proyecto integral de analítica de datos, y así darle respuesta a las preguntas del caso desarrollado en Twitter.      

\begin{landscape}
\begin{figure}
\centering 
\includegraphics [width=1.4\textwidth]{figure/Metodología CRISP DM IBM.jpg} 
\centering 
\caption {Metodología empleada para el desarrollo de la investigación. Fuente. Los autores} 
\label{fig:CRISP_IBM} 
\end{figure} 
\end{landscape}

\section{Comprensión del negocio}
Con el propósito de identificar, analizar y comprender el problema y poder traducirlo a un problema de carácter analítico, se realizó en primera instancia una investigación asociada al sector de las Telecomunicaciones en Colombia, el cual fue seleccionado para llevar a cabo, mediante herramientas de Ingeniería Industrial, el análisis de la percepción de la calidad de los servicios de las empresas de comunicación más importantes de Colombia: Claro, Movistar y Tigo. 

Posteriormente, se planteó una pregunta rectora que le diera claridad, orientación y delimitación a la investigación. A través de esta pregunta el investigador construye, desde sus intereses, el eje articulador de la investigación. De acuerdo con lo anterior, se busca responder al siguiente interrogante: 

\begin{quote}
\small ¿Cuál es la percepción de los clientes sobre la calidad de los servicios de las tres empresas de telefonía móvil más importantes de Colombia (Claro, Movistar y Tigo) en Twitter en un periodo de seis meses?
\end{quote}

A continuación, se realizó la identificación de los implicados dentro del estudio, contemplando las áreas tecnológicas, analíticas y de negocio. Siendo estos las partes interesadas en la implementación de esta clase de propuestas. Finalmente, se fijó la tipología de análisis, es decir, se tradujo este problema de negocio en un problema analítico subyacente relacionado a un análisis descriptivo, inferencial, predictivo o prescriptivo.  

\section{Acercamiento al proyecto de analítica}
De acuerdo con la pregunta planteada en esta investigación, el desarrollo de este proyecto se fundamenta en el uso de dos enfoques analíticos para el análisis de los datos, analítica descriptiva, para la realización de un diagnóstico general de la base datos, y analítica predictiva, para predecir un conjunto de palabras basado en un conjunto de características dadas por cada empresa analizada. Para cada uno de estos enfoques analíticos se emplearon herramientas de Análisis Exploratorio de Datos, Aprendizaje de Maquina y analítica visual, las cuales serán explicadas en los siguientes apartados.

\section{Requerimientos y recolección de datos}
\subsection{Extracción datos en Twitter}
Para realizar la extracción de datos de Twitter se construyó un código utilizando R, un lenguaje de programación ampliamente utilizado para abordar este tipo de problemas, debido a sus características que permiten facilidad de implementacón, herramienta de análisis estadistico y paquetes propieamente de ciencia de los datos y aprendizaje de máquina. El código construido esta compuesto de tres secciones: librerias, generación de claves de acceso a la API de twitter y extracción de datos de las empresas y de los clientes de las compañias de telecomunicaciones analizadas. 
El esquema \ref{fig:ExtracciónTwitter} muestra la metodología utilizada en el proceso de extracción.

\begin{figure}[H] 
\centering 
\includegraphics [width=0.85\textwidth]{figure/Diagrama Extracción Datos.jpg} 
\centering 
\caption {Metodología de extracción de datos en Twitter. Fuente: Los autores} 
\label{fig:ExtracciónTwitter} 
\end{figure} 

Las librerias utilizadas en el proceso de extracción fueron: TwitteR, un paquete que permite acceder a la API de Twitter, TidyR, cuya funcionalidad es realizar el ordenamiento de los datos, dplyr, una libreria diseñada para la manipulación general de los datos, y Purrr, un paquete adicional que provee herramientas funcionales para el manejo de datos en R \parencite{LibreriasTwitter}.

Para el acceso de la API en Twitter se realizó una solicitud a \textit{Twitter Incorporation} para la asginación de una cuenta de desarrollador que permitiera crear una Aplicación; y así, adquirir Tokens de acceso que autorizara la extracción de los datos de las empresas en Twitter. El cuadro \ref{tabla:parametros} describe los parámetros de extracción utilizados. 

Posteriormente a la solictud de acceso a la API de Twitter, se procedió a crear el código de extracción de los datos de interés para esta investigación. Para esto, se utilizaron las funciones UserTimeline(), que permitió recuperar datos de periodos de tiempo semanales dentro de Twitter y  searchTwitter(), una función que permitió configurar el criterio especifico de busqueda de las empresas en Twitter. Para el caso de esta investigación se recopilaron los datos en archivos tipo CSV por cada empresa, con la información asociada a las empresas y a los clientes de Claro, Movistar y Tigo \parencite{LibreriasTwitter}. 

\begin{table}[H]  
\centering  
\begin{center}  
\begin{tabular}{m{6cm} m{7.5cm}}  
\toprule[0.6mm]  
\multicolumn{1}{c}{\textbf{Parámetro}} & \multicolumn{1}{c}{\textbf{Descripción}} \\  
\midrule[0.6mm]  
\centering ConsumerKey &Es la clave única de acceso a una API que un proveedor de servicios, en este caso Twitter, entrega a un cliente para que pueda consumir los recursos de un usuario en los servicios que presta este proveedor \\ 
\midrule[0.25mm]  
\centering ConsumerSecret &Es la contraseña del cliente que se usa, junto con ConsumerKey, para solicitar el acceso a los recursos de un usuario de un proveedor de servicios \\
\midrule[0.25mm]  
\centering AccessToken y AccessSecret &Los tokens de acceso son credenciales utilizadas para acceder a recursos protegidos. Un    token de acceso es una cadena que representa una autorización emitida al cliente \\
\bottomrule[0.6mm]  
\end{tabular}  
\caption{Parámetros utilizados en el proceso de extracción. Fuente:(Los autores)}  
\label{tabla:parametros}  
\end{center}  
\end{table}

\subsection{Almacenamiento de los datos recolectados}
Tras obtener los archivos correspondientes a cada semana para las distintas empresas, se procedió a almacenar estos documentos en Google Drive, el cual permitió guardar, crear, modificar, compartir y acceder a documentos, archivos y carpetas de todo tipo de forma segura desde cualquier dispositivo, así mismo la unidad de Drive incluye 15 GB de espacio gratuito. Siendo estas, las razones principales por las cuales se opta por este servicio integrado como espacio para el almacenamiento de la información extraída.   

Para cada semana se generaba una carpeta la cual contenía diez archivos correspondientes a las empresas Claro, Movistar y Tigo y sus respectivos clientes. Donde finalmente, se realizó la extracción de 200 archivos CSV, para los meses en que se efectuó este proceso iterativo de descarga. La última fecha de recolección de datos se presentó el 16 de mayo del año 2019.  

Para el desarrollo de la investigación y el análisis que este implica realizar, es favorable recuperar tantos tweets como sea posible, sin embargo, la literatura no especifica la cantidad exacta de tweets que se deban recolectar. De la misma forma, es importante tener en cuenta el tiempo estimado para la investigación, y que la cantidad máxima de tweets recolectados por consulta es de 200.


\section{Comprensión de los datos}
Con el objetivo de comprender el conjunto de datos obtenido, se procedió a utilizar una herramienta de la Analítica Descriptiva denominada Análisis Exploratorio de los Datos (Por sus siglas en inglés E.D.A). E.D.A es un ciclo iterativo que permite mediante la visualización y la transformación, explorar y comprender los datos de manera sistemática \parencite{grolemund2018r}. Mediante esta metodología se pretendió generar preguntas que permitieran realizar la comprensión de los datos, buscar respuestas visualizando, limpiar impurezas y generar conocimiento mediante el modelado de datos. \parencite{wickham2016r} destaca que E.D.A es una importante fase de cualquier proyecto de analítica. Por esta razón, adaptando la metodología planteada por International Business Machines (IBM) para el análisis de un conjunto de datos se planteó la siguiente metodología para llevar a cabo el proceso de comprensión de los datos descrito en la metodología, ver figura \ref{fig:EDA}.  

\begin{figure}[H] 
\centering 
\includegraphics [width=0.65\textwidth]{figure/Diagrama Data Analysis.jpg} 
\centering 
\caption {Metodología E.D.A y preparación de datos. Fuente: Los autores} 
\label{fig:EDA} 
\end{figure} 

\begin{itemize}
\item \textbf{Revisión del conjunto de datos:} En esta sección se realizó un escaneo general del conjunto de datos. Además, se revisó la estructura, la dimensión y las variables de los conjuntos de datos construidos. Variables que se describen en el \textit{AnexoII} del documento.

\item \textbf{Análisis estadístico del conjunto:} Haciendo uso de las librerías Dplyr y Tidyverse \parencite{grolemund2018r}, se procedió a revisar el estado de las variables, ver \textit{AnexoII}, la cantidad de registros, cálculo de medias, frecuencia de los datos, entre otras medidas estadísticas que permitieron comprender el estado actual de cada una de las variables del conjunto analizado. 

\item \textbf{Evaluación de Outliers y N/A:} Para la evaluación de la calidad del conjunto de datos se utilizaron los criterios especificados en la figura \ref{fig:Quality} como guía para el análisis actual de las variables. Mediante paquetes de R se calculó el número de registros vacíos y valores atípicos de cada variable. El resultado de esta evaluación se describe en la sección 4.2 del capítulo análisis de resultados de este documento. 

\item \textbf{Análisis de las variables:} Se revisó el contenido de cada una de las variables, y mediante herramientas de visualización se procedió a verificar la relevancia de cada una de ellas en el conjunto de datos. Para esto, se evaluaron los criterios descritos en la figura \ref{fig:Quality}.

\begin{figure}[H] 
\centering 
\includegraphics [width=0.75\textwidth]{figure/Data Quality Diagram.jpg} 
\centering 
\caption {Parámetros para evaluar la calidad de los datos. Fuente: IBM Corp} 
\label{fig:Quality} 
\end{figure} 
\end{itemize}


\section{Preparación de los datos}
\subsection{Selección de variables}
El acercamiento inicial a los datos permitió observar las múltiples variables con las que se contaban, descritas en el \textit{AnexoII}. No obstante, dada las condiciones de calidad de los datos y las características que la componen  para el desarrollo de este análisis únicamente se emplea: \textit{contenido del tweet}, el cual es un campo de texto que lleva el contenido textual presente en un tweet , \textit{fecha de publicación} en la que se compartió el tweet, \textit{hora de publicación} del tweet, siendo estos dos últimos campos útiles para el análisis de tendencias, \textit{fuente de la plataforma}  desde la cual se publican los tweets y el contador de los \textit{retweet}, el cual indica el número de veces que el tweet actual se ha retuiteado. El recuento de retweets resulta útil para predecir la popularidad de un tweet. 

\subsection{Ingeniería de variables}
Además de seleccionar campos con variables que ya estaban presentes dentro del conjunto de datos (Anexo II), con frecuencia es preciso establecer nuevas columnas en función de columnas existentes \parencite{wickham2016r}. Por esta razón la variable \textit{created at}, la cual es un campo que registra el Tiempo Universal Coordinado (UTC) de la creación del tweet y la variable source, la cual menciona el medio utilizado para publicar el Tweet, como una cadena con formato HTML, fueron transformadas en distintas columnas conteniendo de forma estructurada la información de los campos nombrados anteriormente.  

\subsection{Transformación de las estructuras de datos}
Procediendo con el proceso de limpieza de datos, se eliminó todo texto, teniendo en cuenta los criterios enunciados en la figura \ref{fig:Quality} de calidad de datos de IBM, que no aportara información, dada su estructura, temática, o contenido. Esto se debe a que en las redes sociales los usuarios pueden escribir de manera informal, lo que deriva en un uso de abreviaturas y signos de puntuación. Es así como se procedió a prescindir de los patrones no informativos, urls de páginas web, signos de puntuación, etiquetas HTML, caracteres sueltos y números sin información relevante.  

En R, las estructuras de datos para el análisis exploratorio son el DataFrame y Tibble, no obstante, al realizar la tokenización, el cual es el proceso que rompe los grandes párrafos llamados fragmentos de texto en tokens, para esta investigación palabras,\parencite{ahuja2019impact}, se presenta un cambio importante, pues se incumple con la condición de Tidy data: una observación, una fila. De esta manera, para retornar de nuevo a la estructura de Tidy data se aplicó el proceso conocido como expansión o unnest, el cual permitió que cada elemento de la lista fuera su propia fila \parencite{wickham2016package}.

\section{Modelos}
Luego de preparar el conjunto de datos se procedió a la construcción de los modelos de minería de texto propuestos para la investigación. A continuación, se realiza la descripción del modelo construido y algunos conceptos clave derivados para el análisis.  

Para esta investigación se utilizó el procedimiento descrito en \parencite{silge2017text} como guía para el análisis de los datos. Este diagrama muestra la metodología adaptada para el análisis de textos con Tidy Text y TDM.  

\begin{figure}[H] 
\centering 
\includegraphics [width=0.88 \textwidth]{figure/Diagrama Tidy Text & DTM.jpg} 
\centering 
\caption {Metodología empleada para el analisis de texto. Fuente: \parencite{silge2017text}} 
\label{fig:Tidy} 
\end{figure}

\subsection{Análisis de texto - Paquete Tidy Text}
Para el análisis de texto se utiliza la metodología Tidy Text y TDM. Para esto se realizó una exploración literaria de ambos métodos que se describen en los siguientes apartados. Además, se compararon estos dos métodos con otras metodologías tradicionales de análisis de texto.  

El uso de los principios de Tidy data permite que diversas tareas relacionadas con la minería de texto se realicen de manera fácil y efectiva. De acuerdo con \parencite{wickham2014tidy}, los datos ordenados, Tidy Data, poseen una estructura definida: cada variable es una columna, cada observación es una fila y cada tipo de unidad de observación es una tabla. 

Es así como \parencite{silge2017text} definen el formato Tidy text como una tabla con un token por fila. Para la minería de texto ordenada, el token que se almacena en cada fila suele ser una sola palabra, sin embargo, esta técnica también posibilita el análisis de oraciones, n-gramas o párrafos, los cuales también se pueden considerar como tokens dependiendo de la investigación. Los conjuntos de datos ordenados (Tidy data sets) permite la manipulación de conjuntos mediante el uso de herramientas estándar y ordenadas, que incluyen paquetes populares como Tidyr \parencite{wickham2016package}, ggplot2 \parencite{wickham2016ggplot2}, dplyr \parencite{wickham2015dplyr} y broom \parencite{robinson2014broom}. 

\subsubsection{Comparación de Tidy Text con otras estructuras de datos}

Esta estructura de un token por fila difiere con la forma en que el texto se almacena en los análisis que se llevan a cabo tradicionalmente, quizás como cadenas de texto o en matrices de términos y documentos (Term-Document Matrix) \parencite{silge2017text}. A continuación, se plantea un contraste entre los diferentes métodos encontrados para realizar minería de texto en R: 

\textbf {Cadenas de texto/String:} el texto puede almacenarse como cadenas, es decir, vectores de caracteres dentro de R, y a menudo los datos de texto se leen primero en memoria. 

\textbf {Corpus:} estos tipos de objetos suelen contener cadenas sin formato anotadas con metadatos y detalles adicionales. Corpus es una colección de documentos de texto sobre los cuales se aplica minería de texto o rutinas de procesamiento de lenguaje natural para la toma de decisiones. En el paquete tm (Text Mining Package) de R existen funciones disponibles para crear corpus a partir de archivos, vectores, etc. 

\textbf {Matriz de términos del documento (Term-Document Matrix):} Es una matriz dispersa que describe una colección de corpus de documentos con una fila para cada término y una columna para cada documento.  

Una de las estructuras más comunes con las que trabajan los paquetes de minería de texto es la matriz de términos del documento o TDM. Esta es una matriz donde cada columna representa un documento, cada fila representa un término, y cada valor, por lo general, contiene el número de apariciones de ese término en ese documento.

Los objetos TDM no pueden ser usados directamente con herramientas ordenadas (Tidy tools). Por esta razón, el paquete Tidytext proporciona dos funciones que permiten trabajar este modelo: 

\begin{itemize}
\item Tidy () convierte una matriz de términos del documento en un marco de datos ordenado. Este verbo proviene del paquete Broom \parencite{robinson2014broom}, que proporciona funciones de ordenación similares para muchos modelos y objetos estadísticos. 

\item cast () convierte un marco ordenado de datos de un término por fila en una matriz. 
\end{itemize}

\subsection{Análisis de sentimientos}
Construida la matriz TDM se procedió a realizar el análisis de sentimiento de las palabras extraídas mediante la función Get Nrc Sentiment de R, el cual se describe a continuación. 

\subsubsection{Función Get Nrc Sentiment}
La construcción del siguiente texto se fundamenta en la publicación de los investigadores del Consejo Nacional de Investigación de Canadá, Saif M Mohammad y Peter D Turney, titulada como \textit{Emotions evoked by common words and phrases: using mechanical turk to create an emotion lexicon}. Dichos autores amplían la documentación relacionada con la función get nrc sentiment.  

Get nrc sentiment es una función que pertenece al paquete Syuzhet y apoya el uso de diferentes léxicos de análisis de sentimientos. Este paquete, desarrollado por el grupo de procesamiento del lenguaje natural (The Natural Language Processing Group o NLP Group) en la Universidad de Stanford, viene con cuatro diccionarios de sentimientos que proporcionan un método para acceder a la herramienta de extracción de sentimientos robusta.  

Get nrc sentiment permite implementar el léxico propuesto por el Consejo Nacional de Investigación (NRC, por sus siglas en inglés) de Saif Mohammad. Esta función llama al diccionario de sentimientos de la NRC para calcular la presencia de ocho emociones y su correspondiente valencia en un archivo de texto. De acuerdo con \parencite{mohammad2010emotions} , el léxico emocional de la NRC es una lista de palabras que se clasifican de acuerdo con ocho emociones: ira, miedo, anticipación, confianza, sorpresa, tristeza, alegría e inconformidad, y dos sentimientos, negativo y positivo. 

Para el uso de Get nrc sentiment se deben tener en cuenta los siguientes parámetros que configuran a esta función: 

\begin{table}[H]  
\centering  
\begin{center}  
\begin{tabular}{m{3.33cm} m{6.5cm}}  
\toprule[0.6mm]  
\multicolumn{1}{c}{\textbf{Argumento}} & \multicolumn{1}{c}{\textbf{Descripción}} \\  
\midrule[0.6mm]  
\centering char v &Un vector de caracteres  \\ 
\midrule[0.25mm]  
\centering cl &Parámetro opcional, para análisis paralelo \\  
\midrule[0.25mm]  
\centering language &Un string \\ 
\bottomrule[0.6mm]  
\end{tabular}  
\caption{Argumentos de la función get nrc sentiment. Fuente:(Los autores)}  
\label{tabla:getnrc}  
\end{center}  
\end{table}
Tal como se describió anteriormente, el resultado que se obtuvo de la implementación de la función get nrc sentiment es un data frame donde cada fila representa una frase del archivo original. Las columnas describen a cada tipo de emoción, así como una valencia positiva o negativa. Las emociones analizadas son: ira, anticipación, inconformidad, miedo, alegría, tristeza, sorpresa, confianza, negativo, positivo.

\subsection{Algoritmo clasificador de Naive Bayes}
Uno de los métodos que comúnmente es usado en la tarea de clasificación y exploración de textos. Autores como \parencite{Tom} destaca que este algoritmo de aprendizaje supervisado en diversas áreas es comparable con arboles de decisión y redes neuronales artificiales, no solo debido a las ventajas que este ofrece a nivel cualitativo, como el análisis de los atributos y valores que pueden intervenir en el problema, sino también porque este algoritmo permite evaluar la importancia cuantitativa de estos atributos. La utilidad del teorema de Bayes en cualquier problema de aprendizaje automático, en especial los de clasificación, es estimar las probabilidades a posteriori de cualquier hipótesis consistente con el conjunto de datos de entrenamiento.

Para el caso de esta investigación se implementó el algoritmo Naive Bayes como ejercicio práctico para predecir la etiqueta de cada empresa analizada: @ClaroColombia, @MovistarCo y @TigoColombia.

\subsection{Fundamento matemático del algoritmo}
Cualquier sistema de clasificación se basa en: dado un conjunto de datos, dividido en un conjunto de entrenamiento y de prueba, representados por pares $<Atributo,Valor>$, el problema consiste en encontrar una función $f(x)$, llamada hipótesis, que clasifique dichos ejemplos.

Dado un ejemplo $x$ representado por $n$ valores, el algoritmo de Naive Bayes se basa en encontrar la hipótesis más probable $f(x)$ que describa a este ejemplo. Cada ejemplo de $x$ se describe mediante un conjunto de valores del atributo $v_j$, y donde la función objetivo $f(x)$ puede tomar cualquier valor de algún conjunto finito $V$. Si dados los valores $< a_1, a_2,…,a_n>$, describen al ejemplo $x$, como se observa en fórmula 1, la hipótesis más probable será aquella que cumpla con:

\begin{equation}
v_{MAP} = argmax_{(v_j \in V)} P(v_j \mid a_1,a_2,...,a_n)
\addtocounter{neq}{1}
\end{equation}

Es decir, la probabilidad que valores $k$ describan a este ejemplo y pertenezcan a la clase $v_j$. Por teorema de Bayes la anterior expresión se puede reescribir como se observa en la fórmula 2.

\begin{equation}
\begin{split}
v_{MAP} & = argmax_{(v_j \in V)} \frac{P(a_1,a_2,...,a_n \mid v_j ) P(v_j)} {P(a_1,a_2,...,a_n)} \\
& = argmax_{(v_j \in V)} P(a_1,a_2,...,a_n \mid v_j ) P(v_j)
\end{split}
\end{equation}

Para estimar $P(v_j)$ es posible contar el numero de veces que aparece el ejemplo $v_j$ en el conjunto de entrenamiento y dividirlo por el numero total de ejemplos de este conjunto.  Para estimar el termino $P(a_1,…,a_n \mid v_j)$, es decir, para las veces que para cada categoría aj aparecen los valores del ejemplo, es necesario recorrer todo el conjunto de entrenamiento. Para \parencite{Tom} el calculo para recorrer un conjunto representa un esfuerzo no practico por lo que sugiere simplicar la expresión por medio del supuesto de independencia condicional con el fin de factorizar la probabilidad. Este supuesto dice:

Los valores $a_j$ que describen un atributo de cualquier ejemplo $x$ son condicionalmente independientes entre sí conocido el valor de la categoría a la que pertenecen \parencite{Tom}. Es decir que, dado el valor objetivo del ejemplo, la probabilidad de observar el conjunto $(a_1, a_2,…,a_n)$, es solo el producto de las probabilidades para los atributos individuales \parencite{Tom}.  De esta manera, la probabilidad de observar el conjunto de atributos $a_j$, dada una categoría de clasificación a la que pertenecen es el producto de las probabilidades de cada uno de los valores por separado.

Replanteando el modelo inicial, plasmado en la fórmula 3, con el supuesto de independencia se tiene que:
\begin{equation}
v_{NB} = argmax_{(v_j \in V)} P(v_j) \prod_{i}P(a_i \mid v_j)
\addtocounter{neq}{1}
\end{equation}

Donde $v_{NB}$ denota el resultado del valor objetivo del clasificador.

\subsection{Algoritmo Naive Bayes para clasificación de texto en R}
El Proceso usado para la implementación del algoritmo de aprendizaje automático denominado como Naïve Bayes consistió en primera instancia en la preparación del entorno, es decir, la descarga de los paquetes de trabajo necesarios para clasificar texto:  library(Tidyverse), library(Tidytext), library(naivebayes), library(tm), library(caret).
 
Posteriormente, se determinó el procesamiento de los datos, lo cual radicó en la definición de una función para retirar URLs y demás caracteres que carecieran de significado. A continuación, se construyó la matriz dispersa, para lo cual es importante contar con una estructura específica de los datos, donde cada renglón debe corresponder a un texto, cada columna debe corresponder a una palabra y en las celdas debe indicarse si una palabra aparece en un tweet. Por tanto, se emplearon las funciones de unnest tokens() del paquete Tidytext, count() de dplyr y spread() de Tidyr.  

Una vez concluidos los pasos anteriores, se comenzó con la construcción de un modelo de predicción para determinar si un tweet pertenecía a un usuario específico. Si bien Naïve Bayes consigue hacer clasificaciones con múltiples categorías, se empezó con un ejemplo de clasificación binaria. En seguida se recodifico la variable objetivo, screen name (@ClaroColombia, @Movistarco y @Tigo Colombia) y se creó una matriz dispersa con las funciones mutate() dedplyr e ifelse() de base.  

Con el fin de realizar un diagnóstico del desempeño del modelo creado previamente. Se dividió el conjunto de datos en dos subconjuntos, uno de entrenamiento (train) y uno correspondiente para pruebas (test). Para tal fin, se usó la función sample frac() de dplyr para obtener una muestra aleatoria de los datos y luego setdiff() del mismo paquete para conseguir su complemento. 

Finalmente, se ajustó el modelo con el set de entrenamiento usando la función naive bayes() del paquete naivebayes: 

\textit{naive bayes(formula, data, prior = NULL, laplace = 0,usekernel = FALSE, subset, na.action = stats::na.pass)}

Esta función cuenta con los siguientes argumentos:

\begin{table}[H]  
\centering  
\begin{center}  
\begin{tabular}{m{2.5cm} m{9.25cm}}  
\toprule[0.6mm]  
\multicolumn{1}{c}{\textbf{Argumento}} & \multicolumn{1}{c}{\textbf{Descripción}} \\  
\midrule[0.6mm]  
\centering formula &Un objeto de clase "fórmula" de la forma: clase ~ predictores (la clase debe ser un factor / carácter / lógico)  \\ 
\midrule[0.25mm]  
\centering data &Matriz o data frame con predictores categóricos (carácter / factor / lógico) o métricos (numéricos) \\
\midrule[0.25mm]  
\centering na.action &Una función que indica qué debe suceder cuando los datos contienen NA \\
\bottomrule[0.6mm]  
\end{tabular}  
\caption{Argumentos que componen la función naivebayes. Fuente:(Los autores)}  
\label{tabla:naive}  
\end{center}  
\end{table}


\subsubsection{Evaluación}
En esta sección se procedió a realizar la evaluación del modelo del algoritmo de Bayes, mediante validación cruzada. Para más información sobre este método de validación remitirse a \parencite{Tom}.

\section{Visualización}
R posee diversos sistemas para elaborar gráficos, no obstante, ggplot2 es uno de los más elegantes y versátiles, debido a que este implementa un sistema para representar y elaborar gráficos, denominado como la gramática de gráficos \parencite{wickham2016r}.

Durante todo el desarrollo de la investigación estuvo inmersa la visualización de datos, pues a medida que se obtenían resultados la representación gráfica facilitaban la interpretación y descubrimiento de información valiosa. De acuerdo con lo anterior, se diseñó para cada situación un gráfico distinto donde se analizaba si existía una relación, una conexión o una correlación entre una o varias variables. Si una colección de datos tenía alguna interacción entre ellos o si estaban correlacionados. Para esto se elaboraron graficas para representar una distribución en función del tiempo, y así detectar tendencias y valores atípicos, por otro lado, si una serie de variables reaccionaban frente a una variable común, se buscaba una gráfica de comparación a través de las cuales se muestra diferencias a lo largo del tiempo. Por último, se elaboraron gráficas compuestas para presentar partes de un todo y variaciones a lo largo del tiempo. 

\begin{figure}[H] 
\centering 
\includegraphics [width=0.65\textwidth]{figure/Tipo.jpg} 
\centering 
\caption {Visualización estadística de datos. Fuente: \parencite{kiper2017visualizing}} 
\label{fig:Estadistica} 
\end{figure} 

Dentro de los ejemplos de los gráficos estadísticos realizados se encuentran graficas de barras, diagramas de sectores, gráficos circulares polares, gráficos de dispersión de palabras, nubes de palabras, entre otros. 

En este capítulo se revisó la metodología utilizada para el desarrollo de la investigación. Además, se describieron los siete pasos formulados, las técnicas, los conceptos, la formulación matemática del algoritmo construido y las librerias del software R empleadas a lo largo del caso implementado de las empresas Claro, Movistar y Tigo en Twitter. 

\chapter{Análisis de resultados}

En este capítulo se presentan los resultados obtenidos para cada una de las etapas de la metodología descrita en el capítulo 3, figura \ref{fig:CRISP_IBM}, además del respectivo análisis de empresas y clientes. Se divide en tres secciones, en la primera se especifica la conexión, extracción y almacenamiento de los datos obtenidos de Twitter, en la segunda sección se presenta el análisis de las variables seleccionadas, el análisis exploratorio de los datos y el análisis de los tweets. Por último, se describe el desempeño del algoritmo de clasificación Naive-Bayes. 

\section{Extracción de datos en Twitter}
Tal como se expuso en la metodología, capítulo tres, Twitter proporciona un conjunto de tokens de identificación y claves de acceso que permiten establecer una conexión con su API, y así, acceder a la plataforma de extracción de los datos asociados a cada empresa. Para la extracción de la información se emplearon los siguientes tokens y claves de acceso a la API:

<<warning=FALSE,message=FALSE, error=TRUE, echo=TRUE,results='hide'>>=
consumerKey = "Xls3fBLc7----------------h1fgV2Dq" 
consumerSecret = "hdX0W---------------7XH51vD" 
accessToken = "10373431-----------------U1hgpG" 
accessSecret = "gWT3NJ------------------KQgUFjg" 
@

Obteniendo el acceso a las cuentas de @Clarocolombia, @Movistarco y @Tigo Colombia en Twitter, se procedió a la extracción de los datos de interés correspondientes a cada empresa y sus respectivos clientes. Para esto, se utilizaron las siguientes líneas de código:
\begin{figure}[H] 
\centering 
\includegraphics [width=1.01 \textwidth]{figure/Chunk 1.jpg} 
\end{figure}

Finalmente se generó un archivo CSV para el alamancenamiento de los datos obtenidos de las empresas y sus clientes:
\begin{figure}[H] 
\centering 
\includegraphics [width=1.01 \textwidth]{figure/Chunk 2.jpg} 
\end{figure}

A continuación, se muestra el marco general del data frame generado:
\begin{figure}[H] 
\centering 
\includegraphics [width=0.92 \textwidth]{figure/Dataframe Datos.jpg} 
\caption {Data Frame ejemplo} 
\label{fig:DFE} 
\end{figure}

Cada base de datos es un objeto de tipo DataFrame que cuenta con 17 variables, \textit{Identificador de tweets, text, favorited, favoriteCount, replyToSN, created, truncated, replyToSID, id, replyToUID, statusSource, screenName, retweetCount, isRetweet, retweeted, longitude, latitude}, que están descritas en el Anexo variables de este documento. Además, cada base de datos cuenta con una cantidad especifica de registros recopliados teniendo en cuenta la restricción de extracción de datos explicada en \parencite{Ratelimiting}. Para el caso de los tweets recopilados de las empresas, Claro, Movistar y Tigo, se obtuvieron 4,602, 61,665 y 59,469 respectivamente. De la misma forma, para los clientes Claro, Movistar y Tigo, la cantidad fue 53,464, 31,603 y 22,455 respectivamente. De esta manera, se da cumplimiento al primer objetivo de investigación propuesto.

\section{Resultados de la comprensión de los datos}
En esta sección se presentan los resultados asociados al análisis exploratorio de datos, minería de texto y análisis de sentimientos. Para cada uno de los análisis realizados se contemplaron las variables \textit{text, created, statusSource, screenName y retweetCount} seleccionadas de acuerdo con los criterios nombrados en la figura \ref{fig:Quality}. Además, se evaluaron la cantidad de celdas vacias por atributo, donde las variables \textit{ReplyToSID, ReplyToUID, Longitude, Latitude}, descritas en el \textit{AnexoII}, presentaban más del 50\% de información no relevante.      

\subsection{Análisis Exploratorio de Datos E.D.A}
\subsubsection{Empresas}

\begin{figure}[H] 
\centering 
<<fig=TRUE,warning=FALSE,message=FALSE,echo=FALSE,results='hide', fig.height=3.7,fig.width=6>>=
# Configuración del directorio de trabajo
setwd("C:/Users/josen/OneDrive/Documentos/RTesis/VERSION FINAL EMPRESAS")
#Librerias utilizadas en el proceso
library(tidyr)
library(dplyr)
library(readxl)
library(ggplot2)
library(plotly)
library(wesanderson)
library(RColorBrewer)
library(tidytext)
library(stopwords)
library(stringr)
library(tibble)
library(tm)
library(wordcloud)
library(scales)
library(plotrix)
library(ggiraph)

#Datos utilizados de cada empresa
Claro   <-  read.csv("Claro.csv", stringsAsFactors = FALSE)
Tigo     <- read.csv("Tigo.csv", stringsAsFactors = FALSE)
Movistar <- read.csv("Movistar.csv", stringsAsFactors = FALSE)
Virgin   <- read.csv("Virgin.csv", stringsAsFactors = FALSE)
Avantel  <- read.csv("Avantel.csv", stringsAsFactors = FALSE)

#Separación de la variable Created
Info_Claro <- data.frame(do.call('rbind',strsplit(as.character(Claro$created)," ",fixed=TRUE)))

# separacion de la hora en el campo de la fecha
horas_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X2),":",fixed=TRUE)))

#Separación Fecha
Fecha_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X1),"-",fixed=TRUE)))

#Separación de la variable Status Source
Info_Claro_1  <- data.frame(do.call('rbind',strsplit(as.character(Claro$statusSource),">",fixed=TRUE)))
Info_Claro_2  <- data.frame(do.call('rbind',strsplit(as.character(Claro$statusSource),"<",fixed=TRUE)))
Info_Claro_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro_1$X2),"<",fixed=TRUE)))

Sep_horas_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X2),":",fixed=TRUE)))

#Data Frame Final con las variables a utilizar en el conjunto Empresa Claro

Empresa_Claro <- data.frame(Claro$text, Fecha_Claro, Sep_horas_Claro$X1, Info_Claro_3$X1, Claro$retweetCount)
Empresa_Claro$X2 <- as.character(Empresa_Claro$X2)

Empresa_Claro$X2 <- case_when(
                   Empresa_Claro$X2 == '01' ~ "Enero",
                   Empresa_Claro$X2 == '02' ~ "Febrero",
                   Empresa_Claro$X2 == '03' ~ "Marzo",
                   Empresa_Claro$X2 == '04' ~ "Abril",
                   Empresa_Claro$X2 == '05' ~ "Mayo",
                   Empresa_Claro$X2 == '06' ~ "Junio",
                   Empresa_Claro$X2 == '07' ~ "Julio",
                   Empresa_Claro$X2 == '08' ~ "Agosto",
                   Empresa_Claro$X2 == '09' ~ "Septiembre",
                   Empresa_Claro$X2 == '10' ~ "Octubre",
                   Empresa_Claro$X2 == '11' ~ "Noviembre",
                   Empresa_Claro$X2 == '12' ~ "Diciembre",
                  TRUE ~ as.character(Empresa_Claro$X2))

# Nueva lectura
Claro   <-  read.csv("Claro.csv", stringsAsFactors = FALSE)

Fusion_Empresas_Claro <- data.frame(Claro$screenName,Fecha_Claro, Sep_horas_Claro$X1,Claro$created, Claro$text)
names(Fusion_Empresas_Claro)[1] <-"screen_name"
names(Fusion_Empresas_Claro)[2] <-"year"
names(Fusion_Empresas_Claro)[3] <-"month"
names(Fusion_Empresas_Claro)[4] <-"day"
names(Fusion_Empresas_Claro)[5] <-"hour"
names(Fusion_Empresas_Claro)[6] <-"fecha"
names(Fusion_Empresas_Claro)[7] <-"Text"

#Separación de la variable Created
Info_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Tigo$created)," ",fixed=TRUE)))

#Separacion de la hora en el campo de la fecha
horas_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X2),":",fixed=TRUE)))

#Separación Fecha
Fecha_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X1),"-",fixed=TRUE)))

#Separación de la variable Status Source
Info_Tigo_1  <- data.frame(do.call('rbind',strsplit(as.character(Tigo$statusSource),">",fixed=TRUE)))
Info_Tigo_2  <- data.frame(do.call('rbind',strsplit(as.character(Tigo$statusSource),"<",fixed=TRUE)))
Info_Tigo_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo_1$X2),"<",fixed=TRUE)))

Sep_horas_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X2),":",fixed=TRUE)))

# Data Frame Final con las variables a utilizar en el conjunto Empresa Tigo
Empresa_Tigo <- data.frame(Tigo$text, Fecha_Tigo, Sep_horas_Tigo$X1, Info_Tigo_3$X1, Tigo$retweetCount)
Empresa_Tigo$X2 <- case_when(
                   Empresa_Tigo$X2 == '01' ~ "Enero",
                   Empresa_Tigo$X2 == '02' ~ "Febrero",
                   Empresa_Tigo$X2 == '03' ~ "Marzo",
                   Empresa_Tigo$X2 == '04' ~ "Abril",
                   Empresa_Tigo$X2 == '05' ~ "Mayo",
                   Empresa_Tigo$X2 == '06' ~ "Junio",
                   Empresa_Tigo$X2 == '07' ~ "Julio",
                   Empresa_Tigo$X2 == '08' ~ "Agosto",
                   Empresa_Tigo$X2 == '09' ~ "Septiembre",
                   Empresa_Tigo$X2 == '10' ~ "Octubre",
                   Empresa_Tigo$X2 == '11' ~ "Noviembre",
                   Empresa_Tigo$X2 == '12' ~ "Diciembre",
                  TRUE ~ as.character(Empresa_Tigo$X2))

# Nueva lectura
Tigo   <-  read.csv("Tigo.csv", stringsAsFactors = FALSE)

Fusion_Empresas_Tigo <- data.frame(Tigo$screenName,Fecha_Tigo, Sep_horas_Tigo$X1,Tigo$created, Tigo$text)
names(Fusion_Empresas_Tigo)[1] <-"screen_name"
names(Fusion_Empresas_Tigo)[2] <-"year"
names(Fusion_Empresas_Tigo)[3] <-"month"
names(Fusion_Empresas_Tigo)[4] <-"day"
names(Fusion_Empresas_Tigo)[5] <-"hour"
names(Fusion_Empresas_Tigo)[6] <-"fecha"
names(Fusion_Empresas_Tigo)[7] <-"Text"

#Separación de la variable Created
Info_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Movistar$created)," ",fixed=TRUE)))

#Separacion de la hora en el campo de la fecha
horas_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X2),":",fixed=TRUE)))

#Separación Fecha
Fecha_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X1),"-",fixed=TRUE)))

#Separación de la variable Status Source
Info_Movistar_1  <- data.frame(do.call('rbind',strsplit(as.character(Movistar$statusSource),">",fixed=TRUE)))
Info_Movistar_2  <- data.frame(do.call('rbind',strsplit(as.character(Movistar$statusSource),"<",fixed=TRUE)))
Info_Movistar_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar_1$X2),"<",fixed=TRUE)))

Sep_horas_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X2),":",fixed=TRUE)))

#Data Frame Empresa Movistar
Empresa_Movistar <- data.frame(Movistar$text, Fecha_Movistar, Sep_horas_Movistar$X1, Info_Movistar_3$X1, Movistar$retweetCount)

Empresa_Movistar$X2 <- case_when(
                   Empresa_Movistar$X2 == '01' ~ "Enero",
                   Empresa_Movistar$X2 == '02' ~ "Febrero",
                   Empresa_Movistar$X2 == '03' ~ "Marzo",
                   Empresa_Movistar$X2 == '04' ~ "Abril",
                   Empresa_Movistar$X2 == '05' ~ "Mayo",
                   Empresa_Movistar$X2 == '06' ~ "Junio",
                   Empresa_Movistar$X2 == '07' ~ "Julio",
                   Empresa_Movistar$X2 == '08' ~ "Agosto",
                   Empresa_Movistar$X2 == '09' ~ "Septiembre",
                   Empresa_Movistar$X2 == '10' ~ "Octubre",
                   Empresa_Movistar$X2 == '11' ~ "Noviembre",
                   Empresa_Movistar$X2 == '12' ~ "Diciembre",
                  TRUE ~ as.character(Empresa_Movistar$X2))

# Nueva lectura
Movistar <- read.csv("Movistar.csv", stringsAsFactors = FALSE)

Fusion_Empresas_Movistar <- data.frame(Movistar$screenName,Fecha_Movistar, Sep_horas_Movistar$X1,Movistar$created, Movistar$text)
names(Fusion_Empresas_Movistar)[1] <-"screen_name"
names(Fusion_Empresas_Movistar)[2] <-"year"
names(Fusion_Empresas_Movistar)[3] <-"month"
names(Fusion_Empresas_Movistar)[4] <-"day"
names(Fusion_Empresas_Movistar)[5] <-"hour"
names(Fusion_Empresas_Movistar)[6] <-"fecha"
names(Fusion_Empresas_Movistar)[7] <-"Text"

# Uniendo los data frames con merge ---------------------------------------------
Fusion_ClaroMovistar  <- rbind(Fusion_Empresas_Claro,Fusion_Empresas_Movistar)
Fusion_Total          <- rbind(Fusion_ClaroMovistar,Fusion_Empresas_Tigo)
# -------------------------------------------------------------------------------

library(lubridate) 

ggplot(Fusion_Total, aes(x = as.Date(fecha), fill = Fusion_Total$screen_name)) + 
  geom_histogram(position = "identity", bins = 20, show.legend = FALSE) + 
  scale_x_date(date_labels = "%m-%Y", date_breaks = "1 month") + 
  labs(x = "Fecha de publicación", y = "Número de tweets") + 
  facet_wrap(~ Fusion_Total$screen_name, ncol = 1) + 
  theme_bw() + 
  theme(axis.text.x = element_text(angle = 90)) + 
  scale_fill_brewer(palette = "Set1") 

@
\caption {Histórico de Tweets recolectados 2018-2019} 
\label{fig:Historico} 
\end{figure}

Como primera instancia, se procedió a obtener una representación visual de la cantidad de tweets generados por empresa mensualmente. Esto con el fin de reconocer la distribución de los datos en el periodo de tiempo empleado para la recuperación de datos. Mediante la figura \ref{fig:Historico} se observa una desproporción en la cantidad de datos recolectados de la empresa Claro, en comparación con las empresas Movistar y Tigo. Pues el volúmen de datos obtenidos respecto a las otras compañias es tan solo de 4,602 tweets, cantidad que representa tan solo el 7.59\% de la información total recolectada.

Para el caso de la empresa Movistar, se observa que el comportamiento de los datos a lo largo del tiempo es regular, a excepción de los meses de octubre de 2018 y mayo del 2019; mientras que, para Tigo la mayor cantidad de tweets se recolectaron en los primeros meses de extracción. Finalmente, la representación porcentual de participación de cada empresa en el total del conjunto empresas es de 3.66\%, 49.04\% y 47.29\% para Claro, Movistar y Tigo respectivamente.  

\begin{figure}[H] 
\centering 
<<fig=TRUE,warning=FALSE,message=FALSE,echo=FALSE,results='hide', fig.height=3.7,fig.width=6>>=
# Configuración del directorio de trabajo
setwd("C:/Users/josen/OneDrive/Documentos/RTesis/VERSION FINAL EMPRESAS")
#Librerias utilizadas en el proceso
library(tidyr)
library(dplyr)
library(readxl)
library(ggplot2)
library(plotly)
library(wesanderson)
library(RColorBrewer)
library(tidytext)
library(stopwords)
library(stringr)
library(tibble)
library(tm)
library(wordcloud)
library(scales)
library(plotrix)
library(ggiraph)

#Datos utilizados de cada empresa
Claro   <-  read.csv("Claro.csv", stringsAsFactors = FALSE)
Tigo     <- read.csv("Tigo.csv", stringsAsFactors = FALSE)
Movistar <- read.csv("Movistar.csv", stringsAsFactors = FALSE)
Virgin   <- read.csv("Virgin.csv", stringsAsFactors = FALSE)
Avantel  <- read.csv("Avantel.csv", stringsAsFactors = FALSE)

#Separación de la variable Created
Info_Claro <- data.frame(do.call('rbind',strsplit(as.character(Claro$created)," ",fixed=TRUE)))

# separacion de la hora en el campo de la fecha
horas_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X2),":",fixed=TRUE)))

#Separación Fecha
Fecha_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X1),"-",fixed=TRUE)))

#Separación de la variable Status Source
Info_Claro_1  <- data.frame(do.call('rbind',strsplit(as.character(Claro$statusSource),">",fixed=TRUE)))
Info_Claro_2  <- data.frame(do.call('rbind',strsplit(as.character(Claro$statusSource),"<",fixed=TRUE)))
Info_Claro_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro_1$X2),"<",fixed=TRUE)))

Sep_horas_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X2),":",fixed=TRUE)))

#Data Frame Final con las variables a utilizar en el conjunto Empresa Claro

Empresa_Claro <- data.frame(Claro$text, Fecha_Claro, Sep_horas_Claro$X1, Info_Claro_3$X1, Claro$retweetCount)
Empresa_Claro$X2 <- as.character(Empresa_Claro$X2)

Empresa_Claro$X2 <- case_when(
                   Empresa_Claro$X2 == '01' ~ "Enero",
                   Empresa_Claro$X2 == '02' ~ "Febrero",
                   Empresa_Claro$X2 == '03' ~ "Marzo",
                   Empresa_Claro$X2 == '04' ~ "Abril",
                   Empresa_Claro$X2 == '05' ~ "Mayo",
                   Empresa_Claro$X2 == '06' ~ "Junio",
                   Empresa_Claro$X2 == '07' ~ "Julio",
                   Empresa_Claro$X2 == '08' ~ "Agosto",
                   Empresa_Claro$X2 == '09' ~ "Septiembre",
                   Empresa_Claro$X2 == '10' ~ "Octubre",
                   Empresa_Claro$X2 == '11' ~ "Noviembre",
                   Empresa_Claro$X2 == '12' ~ "Diciembre",
                  TRUE ~ as.character(Empresa_Claro$X2))

# Nueva lectura
Claro   <-  read.csv("Claro.csv", stringsAsFactors = FALSE)

Fusion_Empresas_Claro <- data.frame(Claro$screenName,Fecha_Claro, Sep_horas_Claro$X1,Claro$created, Claro$text)
names(Fusion_Empresas_Claro)[1] <-"screen_name"
names(Fusion_Empresas_Claro)[2] <-"year"
names(Fusion_Empresas_Claro)[3] <-"month"
names(Fusion_Empresas_Claro)[4] <-"day"
names(Fusion_Empresas_Claro)[5] <-"hour"
names(Fusion_Empresas_Claro)[6] <-"fecha"
names(Fusion_Empresas_Claro)[7] <-"Text"

#Separación de la variable Created
Info_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Tigo$created)," ",fixed=TRUE)))

#Separacion de la hora en el campo de la fecha
horas_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X2),":",fixed=TRUE)))

#Separación Fecha
Fecha_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X1),"-",fixed=TRUE)))

#Separación de la variable Status Source
Info_Tigo_1  <- data.frame(do.call('rbind',strsplit(as.character(Tigo$statusSource),">",fixed=TRUE)))
Info_Tigo_2  <- data.frame(do.call('rbind',strsplit(as.character(Tigo$statusSource),"<",fixed=TRUE)))
Info_Tigo_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo_1$X2),"<",fixed=TRUE)))

Sep_horas_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X2),":",fixed=TRUE)))

# Data Frame Final con las variables a utilizar en el conjunto Empresa Tigo
Empresa_Tigo <- data.frame(Tigo$text, Fecha_Tigo, Sep_horas_Tigo$X1, Info_Tigo_3$X1, Tigo$retweetCount)
Empresa_Tigo$X2 <- case_when(
                   Empresa_Tigo$X2 == '01' ~ "Enero",
                   Empresa_Tigo$X2 == '02' ~ "Febrero",
                   Empresa_Tigo$X2 == '03' ~ "Marzo",
                   Empresa_Tigo$X2 == '04' ~ "Abril",
                   Empresa_Tigo$X2 == '05' ~ "Mayo",
                   Empresa_Tigo$X2 == '06' ~ "Junio",
                   Empresa_Tigo$X2 == '07' ~ "Julio",
                   Empresa_Tigo$X2 == '08' ~ "Agosto",
                   Empresa_Tigo$X2 == '09' ~ "Septiembre",
                   Empresa_Tigo$X2 == '10' ~ "Octubre",
                   Empresa_Tigo$X2 == '11' ~ "Noviembre",
                   Empresa_Tigo$X2 == '12' ~ "Diciembre",
                  TRUE ~ as.character(Empresa_Tigo$X2))

# Nueva lectura
Tigo   <-  read.csv("Tigo.csv", stringsAsFactors = FALSE)

Fusion_Empresas_Tigo <- data.frame(Tigo$screenName,Fecha_Tigo, Sep_horas_Tigo$X1,Tigo$created, Tigo$text)
names(Fusion_Empresas_Tigo)[1] <-"screen_name"
names(Fusion_Empresas_Tigo)[2] <-"year"
names(Fusion_Empresas_Tigo)[3] <-"month"
names(Fusion_Empresas_Tigo)[4] <-"day"
names(Fusion_Empresas_Tigo)[5] <-"hour"
names(Fusion_Empresas_Tigo)[6] <-"fecha"
names(Fusion_Empresas_Tigo)[7] <-"Text"

#Separación de la variable Created
Info_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Movistar$created)," ",fixed=TRUE)))

#Separacion de la hora en el campo de la fecha
horas_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X2),":",fixed=TRUE)))

#Separación Fecha
Fecha_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X1),"-",fixed=TRUE)))

#Separación de la variable Status Source
Info_Movistar_1  <- data.frame(do.call('rbind',strsplit(as.character(Movistar$statusSource),">",fixed=TRUE)))
Info_Movistar_2  <- data.frame(do.call('rbind',strsplit(as.character(Movistar$statusSource),"<",fixed=TRUE)))
Info_Movistar_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar_1$X2),"<",fixed=TRUE)))

Sep_horas_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X2),":",fixed=TRUE)))

#Data Frame Empresa Movistar
Empresa_Movistar <- data.frame(Movistar$text, Fecha_Movistar, Sep_horas_Movistar$X1, Info_Movistar_3$X1, Movistar$retweetCount)

Empresa_Movistar$X2 <- case_when(
                   Empresa_Movistar$X2 == '01' ~ "Enero",
                   Empresa_Movistar$X2 == '02' ~ "Febrero",
                   Empresa_Movistar$X2 == '03' ~ "Marzo",
                   Empresa_Movistar$X2 == '04' ~ "Abril",
                   Empresa_Movistar$X2 == '05' ~ "Mayo",
                   Empresa_Movistar$X2 == '06' ~ "Junio",
                   Empresa_Movistar$X2 == '07' ~ "Julio",
                   Empresa_Movistar$X2 == '08' ~ "Agosto",
                   Empresa_Movistar$X2 == '09' ~ "Septiembre",
                   Empresa_Movistar$X2 == '10' ~ "Octubre",
                   Empresa_Movistar$X2 == '11' ~ "Noviembre",
                   Empresa_Movistar$X2 == '12' ~ "Diciembre",
                  TRUE ~ as.character(Empresa_Movistar$X2))

# Nueva lectura
Movistar <- read.csv("Movistar.csv", stringsAsFactors = FALSE)

Fusion_Empresas_Movistar <- data.frame(Movistar$screenName,Fecha_Movistar, Sep_horas_Movistar$X1,Movistar$created, Movistar$text)
names(Fusion_Empresas_Movistar)[1] <-"screen_name"
names(Fusion_Empresas_Movistar)[2] <-"year"
names(Fusion_Empresas_Movistar)[3] <-"month"
names(Fusion_Empresas_Movistar)[4] <-"day"
names(Fusion_Empresas_Movistar)[5] <-"hour"
names(Fusion_Empresas_Movistar)[6] <-"fecha"
names(Fusion_Empresas_Movistar)[7] <-"Text"

# Uniendo los data frames con merge ---------------------------------------------
Fusion_ClaroMovistar  <- rbind(Fusion_Empresas_Claro,Fusion_Empresas_Movistar)
Fusion_Total          <- rbind(Fusion_ClaroMovistar,Fusion_Empresas_Tigo)
# -------------------------------------------------------------------------------

tweets_mes_anyo <- Fusion_Total %>% mutate(mes_anyo = format(as.Date(fecha), "%Y-%m")) 
tweets_mes_anyo %>% group_by(screen_name, mes_anyo) %>%  
                    summarise(n = n()) %>% 
                    ggplot(aes(x = mes_anyo, y = n, color= screen_name)) + 
                    geom_line(aes(group = screen_name), size=0.7) + 
                    labs(title = "Número de tweets publicados", x = "Fecha de publicación", 
                    y = "Número de tweets") + 
                    theme_bw() + 
                    theme(axis.text.x = element_text(angle = 90, size = 6), 
                    legend.position = "bottom")+ 
                    geom_point()+ 
                    scale_colour_brewer(palette = "Set1")

@
\caption {Gráfico de tendencias Tweets empresas 2018-2019} 
\label{fig:Tendencias} 
\end{figure}

Con el fin de identificar los meses de mayor y menor actividad de publicación de las empresas se realiza el gráfico representado en la figura \ref{fig:Tendencias}. Mediante esta gráfica puede observarse que Movistar muestra una actividad inicial menor por debajo de la de Tigo, sin embargo, a partir, del mes de noviembre de 2018, Movistar incrementó sustancialmente el número de tweets publicados, pasando de 8,000 a 13,000 tweets. Tigo presenta una actividad muy alta en el mes de octubre de 2018, mientras que para Movistar fue el mes de diciembre. De esta forma, se establece diciembre como el mes con mayor actividad para las empresas Claro y Movistar, mes en el cual la empresa Claro estuvo enfocada en una campaña relacionada con la navidad con el numeral \textit{PonleNavidadATuVida}, ofertando distintos productos como el \textit{Apple Watch serie 4} o la programación del canal HBO para Latinoamérica. Por su parte, la empresa Movistar también ofreció ofertas y descuentos exclusivos relacionados con paquetes de internet móvil, incentivando a los clientes de otras empresas a cambiar de operador y adquirir los servicios de Movistar. La empresa Tigo reportó mayor actividad el mes de octubre, en el cual invito a sus clientes a disfrutar del 2x1 con el Huawei P Smart y el Samsung J6, de la misma forma recordó a los hinchas del Junior de Barranquilla apoyar la campaña de este equipo en la Liga del fútbol profesional colombiano.

\begin{figure}[H]
\centering
\subfigure[Claro]{\includegraphics[width=70mm]{figure/claro 2018.jpg}}
\subfigure[Movistar]{\includegraphics[width=70mm]{figure/movistar 2018.jpg}}
\subfigure[Tigo]{\includegraphics[width=70mm]{figure/tigo 2018.jpg}}
\caption{Porcentaje de Tweets Claro, Movistar y Tigo en 2018.} \label{fig:Tortas18}
\end{figure}


El análisis anterior, se valida mediante las gráficas circulares construidas para cada año. Para el año 2018, la gráfica \ref{fig:Tortas18} evidencia que el mes de diciembre para Claro y Movistar fue el mes con mayor participación en Twitter, 47\% y 39\% respectivamente, seguido del mes de noviembre. Aunque para Tigo este no fué el caso, la mayor representación porcentual se dió para los últimos meses del año. Para este caso se sugiere activar una mayor participación de Tigo en los meses de diciembre, dado que Movistar en este periodo tiene una mayor actividad en Twitter. Durante el mes de octubre la empresa Claro comenzó a publicitar todos sus productos relacionados con la navidad. De la misma forma, promocionaron el Club Media Fest, evento en el que las celebridades digitales del mundo se reunieron para presentar un show en Corferias. La empresa Movistar también promocionó eventos llevados a cabo en el Movistar Arena junto con su campaña de cuidado del planeta, invitando al reciclaje de celulares en los centros de experiencia destinados para realizar esta actividad. Por otro lado, la empresa Tigo promovió el uso de datos, voz y SMS ilimitados a través de su app para tener el control de la línea Tigo, pagar facturas, consultar saldo e histórico de consumos.  Para el mes de noviembre, Claro continúo realizando publicaciones relacionadas con la navidad y el Club Media Fest, sumado al MTV EMA Bilbao 2018. Para el mismo mes, Movistar invitó a sus clientes a adquirir las promociones navideñas como el decodificador Movistar Tv para recibir los servicios de Netflix y MB gratis en los servicios tu Prepago Movistar. La empresa Tigo bajo el numeral \textit{Conectadosiempre} impulsó a sus clientes para obtener sus planes de datos, voz y SMS desde 75,000 COP.

Es evidente que las empresas de telecomunicaciones en Colombia buscan mayor participación en el mercado en redes, en este caso Twitter, desde los meses de octubre a diciembre de 2018, no solo debido a la constante búsqueda de nuevos clientes en épocas de fiestas, sino también como una oportunidad para abarcar mayor mercado y apalancar sus operaciones en los primeros meses del siguiente año. 

\begin{figure}[H]
\centering
\subfigure[Claro]{\includegraphics[width=78mm]{figure/claro 2019.jpg}}
\subfigure[Movistar]{\includegraphics[width=78mm]{figure/movistar 2019.jpg}}
\subfigure[Tigo]{\includegraphics[width=78mm]{figure/tigo 2019.jpg}}
\caption{Porcentaje de Tweets CClaro, Movistar y Tigo en 2019.} \label{fig:Tortas19}
\end{figure}

Mediante la figura \ref{fig:Tortas19} se muestra que las campañas publicitarias y la atención al cliente no cesaron para las empresas en los meses de enero y febrero del año 2019. Para los primeros meses del año 2019, la empresa Claro realizó sus publicaciones enfocadas en el Carnaval de Negros y Blancos y en la feria de Manizales prometiendo la red de mayor cobertura. Continuando con la lista de eventos Claro promocionó el Metro concierto de Carnaval de Barranquilla 2019, previo al Carnaval de Barranquilla 2019 y los distintos eventos llevados a cabo durante esta temporada. Por su parte, la empresa Movistar compartió publicaciones relacionadas con la selección Colombia y sus enfrentamientos en los partidos con Chile, Japón y Corea del Sur y el Tour Colombia 2019, resaltando la participación del equipo Movistar. Por el contrario, la empresa Tigo se enfocó en publicitar la promoción de 2x1 en Smartphones, en dispositivos móviles como el Huawei Y9 2019, Motorola G6 Plus o el Motorola C.  

A continuación, se estudió la variación de la cantidad promedio de tweets de acuerdo con el día de publicación para cada uno de las empresas, mediante la elaboración de una gráfica de suavización, la cual permite identificar patrones cuando los datos o las etiquetas en una visualización de datos se superponen y dificultan ver puntos de datos individuales en una visualización de datos. Por medio de la \ref{fig:suavizacion}, se determina que la distribución del número promedio de los tweets se mantiene aproximadamente constante para las empresas Claro y Movistar. De manera específica, la empresa Movistar al igual que Tigo aumentan la cantidad de publicaciones durante el final de cada mes. Cabe destacar que la empresa Tigo presenta oscilaciones a lo largo del mes. Por otra parte, la empresa Claro mantiene una regularidad en la cantidad de tweets publicados durante el mes, pues no se observan cambios drásticos en el número de publicaciones. Para cada gráfica, se utilizó un nivel de intervalo de confianza de 0.95, también se empleó el método \textit{loess}, el cual es un método no paramétrico donde se realiza la regresión de mínimos cuadrados en subconjuntos localizados, lo que lo convierte en un candidato adecuado para suavizar cualquier vector numérico, además, de ser un método de suavización aconsejado para menos de 1000 observaciones. 

\begin{figure}[H] 
\centering 
<<fig=TRUE,warning=FALSE,message=FALSE,echo=FALSE,results='hide', fig.height=4,fig.width=6>>=
# Configuración del directorio de trabajo
setwd("C:/Users/josen/OneDrive/Documentos/RTesis/VERSION FINAL EMPRESAS")
#Librerias utilizadas en el proceso
library(tidyr)
library(dplyr)
library(readxl)
library(ggplot2)
library(plotly)
library(wesanderson)
library(RColorBrewer)
library(tidytext)
library(stopwords)
library(stringr)
library(tibble)
library(tm)
library(wordcloud)
library(scales)
library(plotrix)
library(ggiraph)

#Datos utilizados de cada empresa
Claro   <-  read.csv("Claro.csv", stringsAsFactors = FALSE)
Tigo     <- read.csv("Tigo.csv", stringsAsFactors = FALSE)
Movistar <- read.csv("Movistar.csv", stringsAsFactors = FALSE)
Virgin   <- read.csv("Virgin.csv", stringsAsFactors = FALSE)
Avantel  <- read.csv("Avantel.csv", stringsAsFactors = FALSE)

#Separación de la variable Created
Info_Claro <- data.frame(do.call('rbind',strsplit(as.character(Claro$created)," ",fixed=TRUE)))

# separacion de la hora en el campo de la fecha
horas_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X2),":",fixed=TRUE)))

#Separación Fecha
Fecha_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X1),"-",fixed=TRUE)))

#Separación de la variable Status Source
Info_Claro_1  <- data.frame(do.call('rbind',strsplit(as.character(Claro$statusSource),">",fixed=TRUE)))
Info_Claro_2  <- data.frame(do.call('rbind',strsplit(as.character(Claro$statusSource),"<",fixed=TRUE)))
Info_Claro_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro_1$X2),"<",fixed=TRUE)))

Sep_horas_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X2),":",fixed=TRUE)))

#Data Frame Final con las variables a utilizar en el conjunto Empresa Claro

Empresa_Claro <- data.frame(Claro$text, Fecha_Claro, Sep_horas_Claro$X1, Info_Claro_3$X1, Claro$retweetCount)
Empresa_Claro$X2 <- as.character(Empresa_Claro$X2)

Empresa_Claro$X2 <- case_when(
                   Empresa_Claro$X2 == '01' ~ "Enero",
                   Empresa_Claro$X2 == '02' ~ "Febrero",
                   Empresa_Claro$X2 == '03' ~ "Marzo",
                   Empresa_Claro$X2 == '04' ~ "Abril",
                   Empresa_Claro$X2 == '05' ~ "Mayo",
                   Empresa_Claro$X2 == '06' ~ "Junio",
                   Empresa_Claro$X2 == '07' ~ "Julio",
                   Empresa_Claro$X2 == '08' ~ "Agosto",
                   Empresa_Claro$X2 == '09' ~ "Septiembre",
                   Empresa_Claro$X2 == '10' ~ "Octubre",
                   Empresa_Claro$X2 == '11' ~ "Noviembre",
                   Empresa_Claro$X2 == '12' ~ "Diciembre",
                  TRUE ~ as.character(Empresa_Claro$X2))

# Nueva lectura
Claro   <-  read.csv("Claro.csv", stringsAsFactors = FALSE)

Fusion_Empresas_Claro <- data.frame(Claro$screenName,Fecha_Claro, Sep_horas_Claro$X1,Claro$created, Claro$text)
names(Fusion_Empresas_Claro)[1] <-"screen_name"
names(Fusion_Empresas_Claro)[2] <-"year"
names(Fusion_Empresas_Claro)[3] <-"month"
names(Fusion_Empresas_Claro)[4] <-"day"
names(Fusion_Empresas_Claro)[5] <-"hour"
names(Fusion_Empresas_Claro)[6] <-"fecha"
names(Fusion_Empresas_Claro)[7] <-"Text"

#Separación de la variable Created
Info_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Tigo$created)," ",fixed=TRUE)))

#Separacion de la hora en el campo de la fecha
horas_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X2),":",fixed=TRUE)))

#Separación Fecha
Fecha_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X1),"-",fixed=TRUE)))

#Separación de la variable Status Source
Info_Tigo_1  <- data.frame(do.call('rbind',strsplit(as.character(Tigo$statusSource),">",fixed=TRUE)))
Info_Tigo_2  <- data.frame(do.call('rbind',strsplit(as.character(Tigo$statusSource),"<",fixed=TRUE)))
Info_Tigo_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo_1$X2),"<",fixed=TRUE)))

Sep_horas_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X2),":",fixed=TRUE)))

# Data Frame Final con las variables a utilizar en el conjunto Empresa Tigo
Empresa_Tigo <- data.frame(Tigo$text, Fecha_Tigo, Sep_horas_Tigo$X1, Info_Tigo_3$X1, Tigo$retweetCount)
Empresa_Tigo$X2 <- case_when(
                   Empresa_Tigo$X2 == '01' ~ "Enero",
                   Empresa_Tigo$X2 == '02' ~ "Febrero",
                   Empresa_Tigo$X2 == '03' ~ "Marzo",
                   Empresa_Tigo$X2 == '04' ~ "Abril",
                   Empresa_Tigo$X2 == '05' ~ "Mayo",
                   Empresa_Tigo$X2 == '06' ~ "Junio",
                   Empresa_Tigo$X2 == '07' ~ "Julio",
                   Empresa_Tigo$X2 == '08' ~ "Agosto",
                   Empresa_Tigo$X2 == '09' ~ "Septiembre",
                   Empresa_Tigo$X2 == '10' ~ "Octubre",
                   Empresa_Tigo$X2 == '11' ~ "Noviembre",
                   Empresa_Tigo$X2 == '12' ~ "Diciembre",
                  TRUE ~ as.character(Empresa_Tigo$X2))

# Nueva lectura
Tigo   <-  read.csv("Tigo.csv", stringsAsFactors = FALSE)

Fusion_Empresas_Tigo <- data.frame(Tigo$screenName,Fecha_Tigo, Sep_horas_Tigo$X1,Tigo$created, Tigo$text)
names(Fusion_Empresas_Tigo)[1] <-"screen_name"
names(Fusion_Empresas_Tigo)[2] <-"year"
names(Fusion_Empresas_Tigo)[3] <-"month"
names(Fusion_Empresas_Tigo)[4] <-"day"
names(Fusion_Empresas_Tigo)[5] <-"hour"
names(Fusion_Empresas_Tigo)[6] <-"fecha"
names(Fusion_Empresas_Tigo)[7] <-"Text"

#Separación de la variable Created
Info_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Movistar$created)," ",fixed=TRUE)))

#Separacion de la hora en el campo de la fecha
horas_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X2),":",fixed=TRUE)))

#Separación Fecha
Fecha_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X1),"-",fixed=TRUE)))

#Separación de la variable Status Source
Info_Movistar_1  <- data.frame(do.call('rbind',strsplit(as.character(Movistar$statusSource),">",fixed=TRUE)))
Info_Movistar_2  <- data.frame(do.call('rbind',strsplit(as.character(Movistar$statusSource),"<",fixed=TRUE)))
Info_Movistar_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar_1$X2),"<",fixed=TRUE)))

Sep_horas_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X2),":",fixed=TRUE)))

#Data Frame Empresa Movistar
Empresa_Movistar <- data.frame(Movistar$text, Fecha_Movistar, Sep_horas_Movistar$X1, Info_Movistar_3$X1, Movistar$retweetCount)

Empresa_Movistar$X2 <- case_when(
                   Empresa_Movistar$X2 == '01' ~ "Enero",
                   Empresa_Movistar$X2 == '02' ~ "Febrero",
                   Empresa_Movistar$X2 == '03' ~ "Marzo",
                   Empresa_Movistar$X2 == '04' ~ "Abril",
                   Empresa_Movistar$X2 == '05' ~ "Mayo",
                   Empresa_Movistar$X2 == '06' ~ "Junio",
                   Empresa_Movistar$X2 == '07' ~ "Julio",
                   Empresa_Movistar$X2 == '08' ~ "Agosto",
                   Empresa_Movistar$X2 == '09' ~ "Septiembre",
                   Empresa_Movistar$X2 == '10' ~ "Octubre",
                   Empresa_Movistar$X2 == '11' ~ "Noviembre",
                   Empresa_Movistar$X2 == '12' ~ "Diciembre",
                  TRUE ~ as.character(Empresa_Movistar$X2))

# Nueva lectura
Movistar <- read.csv("Movistar.csv", stringsAsFactors = FALSE)

Fusion_Empresas_Movistar <- data.frame(Movistar$screenName,Fecha_Movistar, Sep_horas_Movistar$X1,Movistar$created, Movistar$text)
names(Fusion_Empresas_Movistar)[1] <-"screen_name"
names(Fusion_Empresas_Movistar)[2] <-"year"
names(Fusion_Empresas_Movistar)[3] <-"month"
names(Fusion_Empresas_Movistar)[4] <-"day"
names(Fusion_Empresas_Movistar)[5] <-"hour"
names(Fusion_Empresas_Movistar)[6] <-"fecha"
names(Fusion_Empresas_Movistar)[7] <-"Text"

# Uniendo los data frames con merge ---------------------------------------------
Fusion_ClaroMovistar  <- rbind(Fusion_Empresas_Claro,Fusion_Empresas_Movistar)
Fusion_Total          <- rbind(Fusion_ClaroMovistar,Fusion_Empresas_Tigo)
# -------------------------------------------------------------------------------

tweets_mes_anyo$day <- as.integer(tweets_mes_anyo$day) 
tweets_mes_anyo %>% group_by(screen_name,day) %>% 
                    summarise(n = n())%>%  
                    ungroup() %>% 
                    ggplot(aes(x = day, y=n, color=screen_name)) + 
                    geom_smooth(method = 'loess', se=TRUE)+ 
                    facet_wrap(~ screen_name, ncol = 1) + 
                    theme_bw() + 
                    theme(legend.position = "none")+ 
                    scale_colour_brewer(palette = "Set1")+ 
                    labs(x = "Dia de publicación",y = "Número de tweets")+ 
                    geom_point(aes(colour = factor(screen_name)), size = 2) + 
                    geom_point(colour = "grey90", size = 0.8) 

@
\caption {Gráfica de suavización del numero de tweets por día} 
\label{fig:suavizacion} 
\end{figure}

Para la comprensión de la actividad de las empresas en Twitter se analizaron las horas en las que cada empresa presentaban mayor actividad. Como se observa en la figura \ref{fig:horas} las empresas presentan mayor actividad en horas de la tarde y la noche.  Es interesante observar que las tres empresas tienen el mismo periodo de tiempo de mayor actividad en Twitter, entre las 20:00-21:00, seguido de las 14:00 y 15:00 horas. Esto permite observar que las empresas de telecomunicaciones más importantes en Colombia tienen un horario establecido para publicar en esta red social, posiblemente debido a que en estos lapsos de tiempo sus clientes o los usuarios presentan mayor interacción en redes. Según estudios del periódico La República los horarios de los trinos con mayor alcance se dan entre las 13:00 y las 15:00 horas \parencite{horariosE}. Por esta razón, evaluar si el mercado en redes está creciendo o declinando, permite identificar tendencia por parte de los competidores y ejecutar, acciones estratégicas o tácticas que les permitan tomar decisiones basadas en hechos concretos. 

\begin{figure}[H] 
\centering 
<<fig=TRUE,warning=FALSE,message=FALSE,echo=FALSE,results='hide', fig.height= 4.7,fig.width=6>>=
# Configuración del directorio de trabajo
setwd("C:/Users/josen/OneDrive/Documentos/RTesis/VERSION FINAL EMPRESAS")
#Librerias utilizadas en el proceso
library(tidyr)
library(dplyr)
library(readxl)
library(ggplot2)
library(plotly)
library(wesanderson)
library(RColorBrewer)
library(tidytext)
library(stopwords)
library(stringr)
library(tibble)
library(tm)
library(wordcloud)
library(scales)
library(plotrix)
library(ggiraph)

#Datos utilizados de cada empresa
Claro   <-  read.csv("Claro.csv", stringsAsFactors = FALSE)
Tigo     <- read.csv("Tigo.csv", stringsAsFactors = FALSE)
Movistar <- read.csv("Movistar.csv", stringsAsFactors = FALSE)
Virgin   <- read.csv("Virgin.csv", stringsAsFactors = FALSE)
Avantel  <- read.csv("Avantel.csv", stringsAsFactors = FALSE)

#Separación de la variable Created
Info_Claro <- data.frame(do.call('rbind',strsplit(as.character(Claro$created)," ",fixed=TRUE)))

# separacion de la hora en el campo de la fecha
horas_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X2),":",fixed=TRUE)))

#Separación Fecha
Fecha_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X1),"-",fixed=TRUE)))

#Separación de la variable Status Source
Info_Claro_1  <- data.frame(do.call('rbind',strsplit(as.character(Claro$statusSource),">",fixed=TRUE)))
Info_Claro_2  <- data.frame(do.call('rbind',strsplit(as.character(Claro$statusSource),"<",fixed=TRUE)))
Info_Claro_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro_1$X2),"<",fixed=TRUE)))

Sep_horas_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X2),":",fixed=TRUE)))

#Data Frame Final con las variables a utilizar en el conjunto Empresa Claro

Empresa_Claro <- data.frame(Claro$text, Fecha_Claro, Sep_horas_Claro$X1, Info_Claro_3$X1, Claro$retweetCount)
Empresa_Claro$X2 <- as.character(Empresa_Claro$X2)

Empresa_Claro$X2 <- case_when(
                   Empresa_Claro$X2 == '01' ~ "Enero",
                   Empresa_Claro$X2 == '02' ~ "Febrero",
                   Empresa_Claro$X2 == '03' ~ "Marzo",
                   Empresa_Claro$X2 == '04' ~ "Abril",
                   Empresa_Claro$X2 == '05' ~ "Mayo",
                   Empresa_Claro$X2 == '06' ~ "Junio",
                   Empresa_Claro$X2 == '07' ~ "Julio",
                   Empresa_Claro$X2 == '08' ~ "Agosto",
                   Empresa_Claro$X2 == '09' ~ "Septiembre",
                   Empresa_Claro$X2 == '10' ~ "Octubre",
                   Empresa_Claro$X2 == '11' ~ "Noviembre",
                   Empresa_Claro$X2 == '12' ~ "Diciembre",
                  TRUE ~ as.character(Empresa_Claro$X2))

# Nueva lectura
Claro   <-  read.csv("Claro.csv", stringsAsFactors = FALSE)

Fusion_Empresas_Claro <- data.frame(Claro$screenName,Fecha_Claro, Sep_horas_Claro$X1,Claro$created, Claro$text)
names(Fusion_Empresas_Claro)[1] <-"screen_name"
names(Fusion_Empresas_Claro)[2] <-"year"
names(Fusion_Empresas_Claro)[3] <-"month"
names(Fusion_Empresas_Claro)[4] <-"day"
names(Fusion_Empresas_Claro)[5] <-"hour"
names(Fusion_Empresas_Claro)[6] <-"fecha"
names(Fusion_Empresas_Claro)[7] <-"Text"

#Separación de la variable Created
Info_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Tigo$created)," ",fixed=TRUE)))

#Separacion de la hora en el campo de la fecha
horas_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X2),":",fixed=TRUE)))

#Separación Fecha
Fecha_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X1),"-",fixed=TRUE)))

#Separación de la variable Status Source
Info_Tigo_1  <- data.frame(do.call('rbind',strsplit(as.character(Tigo$statusSource),">",fixed=TRUE)))
Info_Tigo_2  <- data.frame(do.call('rbind',strsplit(as.character(Tigo$statusSource),"<",fixed=TRUE)))
Info_Tigo_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo_1$X2),"<",fixed=TRUE)))

Sep_horas_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X2),":",fixed=TRUE)))

# Data Frame Final con las variables a utilizar en el conjunto Empresa Tigo
Empresa_Tigo <- data.frame(Tigo$text, Fecha_Tigo, Sep_horas_Tigo$X1, Info_Tigo_3$X1, Tigo$retweetCount)
Empresa_Tigo$X2 <- case_when(
                   Empresa_Tigo$X2 == '01' ~ "Enero",
                   Empresa_Tigo$X2 == '02' ~ "Febrero",
                   Empresa_Tigo$X2 == '03' ~ "Marzo",
                   Empresa_Tigo$X2 == '04' ~ "Abril",
                   Empresa_Tigo$X2 == '05' ~ "Mayo",
                   Empresa_Tigo$X2 == '06' ~ "Junio",
                   Empresa_Tigo$X2 == '07' ~ "Julio",
                   Empresa_Tigo$X2 == '08' ~ "Agosto",
                   Empresa_Tigo$X2 == '09' ~ "Septiembre",
                   Empresa_Tigo$X2 == '10' ~ "Octubre",
                   Empresa_Tigo$X2 == '11' ~ "Noviembre",
                   Empresa_Tigo$X2 == '12' ~ "Diciembre",
                  TRUE ~ as.character(Empresa_Tigo$X2))

# Nueva lectura
Tigo   <-  read.csv("Tigo.csv", stringsAsFactors = FALSE)

Fusion_Empresas_Tigo <- data.frame(Tigo$screenName,Fecha_Tigo, Sep_horas_Tigo$X1,Tigo$created, Tigo$text)
names(Fusion_Empresas_Tigo)[1] <-"screen_name"
names(Fusion_Empresas_Tigo)[2] <-"year"
names(Fusion_Empresas_Tigo)[3] <-"month"
names(Fusion_Empresas_Tigo)[4] <-"day"
names(Fusion_Empresas_Tigo)[5] <-"hour"
names(Fusion_Empresas_Tigo)[6] <-"fecha"
names(Fusion_Empresas_Tigo)[7] <-"Text"

#Separación de la variable Created
Info_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Movistar$created)," ",fixed=TRUE)))

#Separacion de la hora en el campo de la fecha
horas_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X2),":",fixed=TRUE)))

#Separación Fecha
Fecha_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X1),"-",fixed=TRUE)))

#Separación de la variable Status Source
Info_Movistar_1  <- data.frame(do.call('rbind',strsplit(as.character(Movistar$statusSource),">",fixed=TRUE)))
Info_Movistar_2  <- data.frame(do.call('rbind',strsplit(as.character(Movistar$statusSource),"<",fixed=TRUE)))
Info_Movistar_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar_1$X2),"<",fixed=TRUE)))

Sep_horas_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X2),":",fixed=TRUE)))

#Data Frame Empresa Movistar
Empresa_Movistar <- data.frame(Movistar$text, Fecha_Movistar, Sep_horas_Movistar$X1, Info_Movistar_3$X1, Movistar$retweetCount)

Empresa_Movistar$X2 <- case_when(
                   Empresa_Movistar$X2 == '01' ~ "Enero",
                   Empresa_Movistar$X2 == '02' ~ "Febrero",
                   Empresa_Movistar$X2 == '03' ~ "Marzo",
                   Empresa_Movistar$X2 == '04' ~ "Abril",
                   Empresa_Movistar$X2 == '05' ~ "Mayo",
                   Empresa_Movistar$X2 == '06' ~ "Junio",
                   Empresa_Movistar$X2 == '07' ~ "Julio",
                   Empresa_Movistar$X2 == '08' ~ "Agosto",
                   Empresa_Movistar$X2 == '09' ~ "Septiembre",
                   Empresa_Movistar$X2 == '10' ~ "Octubre",
                   Empresa_Movistar$X2 == '11' ~ "Noviembre",
                   Empresa_Movistar$X2 == '12' ~ "Diciembre",
                  TRUE ~ as.character(Empresa_Movistar$X2))

# Nueva lectura
Movistar <- read.csv("Movistar.csv", stringsAsFactors = FALSE)

Fusion_Empresas_Movistar <- data.frame(Movistar$screenName,Fecha_Movistar, Sep_horas_Movistar$X1,Movistar$created, Movistar$text)
names(Fusion_Empresas_Movistar)[1] <-"screen_name"
names(Fusion_Empresas_Movistar)[2] <-"year"
names(Fusion_Empresas_Movistar)[3] <-"month"
names(Fusion_Empresas_Movistar)[4] <-"day"
names(Fusion_Empresas_Movistar)[5] <-"hour"
names(Fusion_Empresas_Movistar)[6] <-"fecha"
names(Fusion_Empresas_Movistar)[7] <-"Text"

# Uniendo los data frames con merge ---------------------------------------------
Fusion_ClaroMovistar  <- rbind(Fusion_Empresas_Claro,Fusion_Empresas_Movistar)
Fusion_Total          <- rbind(Fusion_ClaroMovistar,Fusion_Empresas_Tigo)
# -------------------------------------------------------------------------------

Fusion_Total$hour <- as.numeric(Fusion_Total$hour) 

Fusion_Total$hour <- case_when( 
                     Fusion_Total$hour == 1  ~ 0, 
                     Fusion_Total$hour == 2  ~ 1, 
                     Fusion_Total$hour == 3  ~ 2, 
                     Fusion_Total$hour == 4  ~ 3, 
                     Fusion_Total$hour == 5  ~ 4, 
                     Fusion_Total$hour == 6  ~ 5, 
                     Fusion_Total$hour == 21 ~ 6, 
                     Fusion_Total$hour == 22 ~ 7, 
                     Fusion_Total$hour == 23 ~ 8, 
                     Fusion_Total$hour == 24 ~ 9, 
                     Fusion_Total$hour == 7  ~ 10, 
                     Fusion_Total$hour == 8  ~ 11, 
                     Fusion_Total$hour == 9  ~ 12, 
                     Fusion_Total$hour == 10 ~ 13, 
                     Fusion_Total$hour == 11 ~ 14, 
                     Fusion_Total$hour == 12 ~ 15, 
                     Fusion_Total$hour == 13 ~ 16, 
                     Fusion_Total$hour == 14 ~ 17, 
                     Fusion_Total$hour == 15 ~ 18,
                     Fusion_Total$hour == 16 ~ 19, 
                     Fusion_Total$hour == 17 ~ 20, 
                     Fusion_Total$hour == 18 ~ 21, 
                     Fusion_Total$hour == 19 ~ 22, 
                     Fusion_Total$hour == 20 ~ 23, 
                     TRUE ~ as.numeric(Fusion_Total$hour)) 


ggplot(Fusion_Total, aes(x = as.numeric(Fusion_Total$hour), fill = Fusion_Total$screen_name)) + 
  geom_histogram(position = "identity", bins = 20, show.legend = FALSE) + 
  labs(x = "Hora de publicación", y = "Número de tweets") + 
  facet_wrap(~ Fusion_Total$screen_name, ncol = 1) + 
  theme_bw() + 
  theme(axis.text.x = element_text(angle = 90)) + 
  scale_fill_brewer(palette = "Set1")+ 
  coord_flip() 
@
\caption {Comparación de horas de publicación de tweets empresas} 
\label{fig:horas} 
\end{figure}

\begin{figure}[H] 
\centering 
<<fig=TRUE,warning=FALSE,message=FALSE,echo=FALSE,results='hide', fig.height=2.6,fig.width=6>>=

setwd("C:/Users/josen/OneDrive/Documentos/RTesis/VERSION FINAL EMPRESAS")
#Librerias utilizadas en el proceso
library(tidyr)
library(dplyr)
library(readxl)
library(ggplot2)
library(plotly)
library(wesanderson)
library(RColorBrewer)
library(tidytext)
library(stopwords)
library(stringr)
library(tibble)
library(tm)
library(wordcloud)
library(scales)
library(plotrix)
library(ggiraph)

#Datos utilizados de cada empresa
Claro   <-  read.csv("Claro.csv", stringsAsFactors = FALSE)
Tigo     <- read.csv("Tigo.csv", stringsAsFactors = FALSE)
Movistar <- read.csv("Movistar.csv", stringsAsFactors = FALSE)
Virgin   <- read.csv("Virgin.csv", stringsAsFactors = FALSE)
Avantel  <- read.csv("Avantel.csv", stringsAsFactors = FALSE)

#Separación de la variable Created
Info_Claro <- data.frame(do.call('rbind',strsplit(as.character(Claro$created)," ",fixed=TRUE)))

# separacion de la hora en el campo de la fecha
horas_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X2),":",fixed=TRUE)))

#Separación Fecha
Fecha_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X1),"-",fixed=TRUE)))

#Separación de la variable Status Source
Info_Claro_1  <- data.frame(do.call('rbind',strsplit(as.character(Claro$statusSource),">",fixed=TRUE)))
Info_Claro_2  <- data.frame(do.call('rbind',strsplit(as.character(Claro$statusSource),"<",fixed=TRUE)))
Info_Claro_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro_1$X2),"<",fixed=TRUE)))

Sep_horas_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X2),":",fixed=TRUE)))

#Data Frame Final con las variables a utilizar en el conjunto Empresa Claro

Empresa_Claro <- data.frame(Claro$text, Fecha_Claro, Sep_horas_Claro$X1, Info_Claro_3$X1, Claro$retweetCount)
Empresa_Claro$X2 <- as.character(Empresa_Claro$X2)

Empresa_Claro$X2 <- case_when(
                   Empresa_Claro$X2 == '01' ~ "Enero",
                   Empresa_Claro$X2 == '02' ~ "Febrero",
                   Empresa_Claro$X2 == '03' ~ "Marzo",
                   Empresa_Claro$X2 == '04' ~ "Abril",
                   Empresa_Claro$X2 == '05' ~ "Mayo",
                   Empresa_Claro$X2 == '06' ~ "Junio",
                   Empresa_Claro$X2 == '07' ~ "Julio",
                   Empresa_Claro$X2 == '08' ~ "Agosto",
                   Empresa_Claro$X2 == '09' ~ "Septiembre",
                   Empresa_Claro$X2 == '10' ~ "Octubre",
                   Empresa_Claro$X2 == '11' ~ "Noviembre",
                   Empresa_Claro$X2 == '12' ~ "Diciembre",
                  TRUE ~ as.character(Empresa_Claro$X2))

# Nueva lectura
Claro   <-  read.csv("Claro.csv", stringsAsFactors = FALSE)

Fusion_Empresas_Claro <- data.frame(Claro$screenName,Fecha_Claro, Sep_horas_Claro$X1,Claro$created, Claro$text)
names(Fusion_Empresas_Claro)[1] <-"screen_name"
names(Fusion_Empresas_Claro)[2] <-"year"
names(Fusion_Empresas_Claro)[3] <-"month"
names(Fusion_Empresas_Claro)[4] <-"day"
names(Fusion_Empresas_Claro)[5] <-"hour"
names(Fusion_Empresas_Claro)[6] <-"fecha"
names(Fusion_Empresas_Claro)[7] <-"Text"

#Separación de la variable Created
Info_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Tigo$created)," ",fixed=TRUE)))

#Separacion de la hora en el campo de la fecha
horas_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X2),":",fixed=TRUE)))

#Separación Fecha
Fecha_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X1),"-",fixed=TRUE)))

#Separación de la variable Status Source
Info_Tigo_1  <- data.frame(do.call('rbind',strsplit(as.character(Tigo$statusSource),">",fixed=TRUE)))
Info_Tigo_2  <- data.frame(do.call('rbind',strsplit(as.character(Tigo$statusSource),"<",fixed=TRUE)))
Info_Tigo_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo_1$X2),"<",fixed=TRUE)))

Sep_horas_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X2),":",fixed=TRUE)))

# Data Frame Final con las variables a utilizar en el conjunto Empresa Tigo
Empresa_Tigo <- data.frame(Tigo$text, Fecha_Tigo, Sep_horas_Tigo$X1, Info_Tigo_3$X1, Tigo$retweetCount)
Empresa_Tigo$X2 <- case_when(
                   Empresa_Tigo$X2 == '01' ~ "Enero",
                   Empresa_Tigo$X2 == '02' ~ "Febrero",
                   Empresa_Tigo$X2 == '03' ~ "Marzo",
                   Empresa_Tigo$X2 == '04' ~ "Abril",
                   Empresa_Tigo$X2 == '05' ~ "Mayo",
                   Empresa_Tigo$X2 == '06' ~ "Junio",
                   Empresa_Tigo$X2 == '07' ~ "Julio",
                   Empresa_Tigo$X2 == '08' ~ "Agosto",
                   Empresa_Tigo$X2 == '09' ~ "Septiembre",
                   Empresa_Tigo$X2 == '10' ~ "Octubre",
                   Empresa_Tigo$X2 == '11' ~ "Noviembre",
                   Empresa_Tigo$X2 == '12' ~ "Diciembre",
                  TRUE ~ as.character(Empresa_Tigo$X2))

# Nueva lectura
Tigo   <-  read.csv("Tigo.csv", stringsAsFactors = FALSE)

Fusion_Empresas_Tigo <- data.frame(Tigo$screenName,Fecha_Tigo, Sep_horas_Tigo$X1,Tigo$created, Tigo$text)
names(Fusion_Empresas_Tigo)[1] <-"screen_name"
names(Fusion_Empresas_Tigo)[2] <-"year"
names(Fusion_Empresas_Tigo)[3] <-"month"
names(Fusion_Empresas_Tigo)[4] <-"day"
names(Fusion_Empresas_Tigo)[5] <-"hour"
names(Fusion_Empresas_Tigo)[6] <-"fecha"
names(Fusion_Empresas_Tigo)[7] <-"Text"

#Separación de la variable Created
Info_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Movistar$created)," ",fixed=TRUE)))

#Separacion de la hora en el campo de la fecha
horas_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X2),":",fixed=TRUE)))

#Separación Fecha
Fecha_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X1),"-",fixed=TRUE)))

#Separación de la variable Status Source
Info_Movistar_1  <- data.frame(do.call('rbind',strsplit(as.character(Movistar$statusSource),">",fixed=TRUE)))
Info_Movistar_2  <- data.frame(do.call('rbind',strsplit(as.character(Movistar$statusSource),"<",fixed=TRUE)))
Info_Movistar_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar_1$X2),"<",fixed=TRUE)))

Sep_horas_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X2),":",fixed=TRUE)))

#Data Frame Empresa Movistar
Empresa_Movistar <- data.frame(Movistar$text, Fecha_Movistar, Sep_horas_Movistar$X1, Info_Movistar_3$X1, Movistar$retweetCount)

Empresa_Movistar$X2 <- case_when(
                   Empresa_Movistar$X2 == '01' ~ "Enero",
                   Empresa_Movistar$X2 == '02' ~ "Febrero",
                   Empresa_Movistar$X2 == '03' ~ "Marzo",
                   Empresa_Movistar$X2 == '04' ~ "Abril",
                   Empresa_Movistar$X2 == '05' ~ "Mayo",
                   Empresa_Movistar$X2 == '06' ~ "Junio",
                   Empresa_Movistar$X2 == '07' ~ "Julio",
                   Empresa_Movistar$X2 == '08' ~ "Agosto",
                   Empresa_Movistar$X2 == '09' ~ "Septiembre",
                   Empresa_Movistar$X2 == '10' ~ "Octubre",
                   Empresa_Movistar$X2 == '11' ~ "Noviembre",
                   Empresa_Movistar$X2 == '12' ~ "Diciembre",
                  TRUE ~ as.character(Empresa_Movistar$X2))

# Nueva lectura
Movistar <- read.csv("Movistar.csv", stringsAsFactors = FALSE)

Fusion_Empresas_Movistar <- data.frame(Movistar$screenName,Fecha_Movistar, Sep_horas_Movistar$X1,Movistar$created, Movistar$text)
names(Fusion_Empresas_Movistar)[1] <-"screen_name"
names(Fusion_Empresas_Movistar)[2] <-"year"
names(Fusion_Empresas_Movistar)[3] <-"month"
names(Fusion_Empresas_Movistar)[4] <-"day"
names(Fusion_Empresas_Movistar)[5] <-"hour"
names(Fusion_Empresas_Movistar)[6] <-"fecha"
names(Fusion_Empresas_Movistar)[7] <-"Text"

# Uniendo los data frames con merge ---------------------------------------------
Fusion_ClaroMovistar  <- rbind(Fusion_Empresas_Claro,Fusion_Empresas_Movistar)
Fusion_Total          <- rbind(Fusion_ClaroMovistar,Fusion_Empresas_Tigo)
# -------------------------------------------------------------------------------

Empresa_Claro %>% 
  count(Info_Claro_3.X1, sort = TRUE) 
Info_Gestoras_C2 <- Empresa_Claro %>% 
  count(Info_Claro_3.X1, sort = TRUE) %>% 
  filter(n > 1000) %>% 
  mutate(Info_Claro_3.X1 = reorder(Info_Claro_3.X1, n)) %>% 
  ggplot(aes(Info_Claro_3.X1, n, fill = Info_Claro_3.X1)) + 
  geom_col() + 
  geom_bar(stat = "identity", width = 0.9) + 
  theme(panel.background = element_rect(fill = "white"), plot.title = element_text(hjust = 0.5)) + 
  labs(title = "Cantidad de Tweets respondidos por gestoras 
       de contenido Claro, Movistar y Tigo", 
       x = NULL, y = "Cantidad de Tweets Claro") + 
  theme (plot.title = element_text(size=rel(1), #Tamaño de la letra del título 
                                  vjust=1, #Justificación vertical, para separarlo del gráfico 
                                  face="plain", #Letra negrilla. Otras posibilidades "plain",                                                     "italic", "bold" y "bold.italic" 
                                  color="black", #Color del texto 
                                  lineheight=1.5)) + 
  scale_fill_brewer(palette = "Reds") 
Info_Gestoras_C2 


Empresa_Movistar %>% 
  count(Info_Movistar_3.X1, sort = TRUE) 
Info_Gestoras_M2 <- Empresa_Movistar %>% 
  count(Info_Movistar_3.X1, sort = TRUE) %>% 
  filter(n > 500) %>% 
  mutate(Info_Movistar_3.X1 = reorder(Info_Movistar_3.X1, n)) %>% 
  ggplot(aes(Info_Movistar_3.X1, n, fill = Info_Movistar_3.X1)) + 
  geom_col() + 
  geom_bar(stat = "identity", width = 0.72)+ 
  theme(panel.background = element_rect(fill = "white"), plot.title = element_text(hjust = 0.5)) + 
  labs(x = NULL, y = "Cantidad de Tweets Movistar") + 
  theme(panel.background = element_rect(fill = "white"), plot.title = element_text(hjust = 0.5)) + 
  theme (plot.title = element_text(size=rel(1), #Tamaño de la letra del título 
                                  vjust=1, #Justificación vertical, para separarlo del gráfico 
                                  face="plain", #Letra negrilla. Otras posibilidades "plain",                                                  "italic", "bold" y "bold.italic" 
                                  color="black", #Color del texto 
                                  lineheight=1.5)) + 
  scale_fill_brewer(palette = "Greens") 

Info_Gestoras_M2 

Empresa_Tigo %>% 

  count(Info_Tigo_3.X1, sort = TRUE) 

  
Info_Gestoras_T2 <- Empresa_Tigo %>% 
  count(Info_Tigo_3.X1, sort = TRUE) %>% 
  filter(n > 1000) %>% 
  mutate(Info_Tigo_3.X1 = reorder(Info_Tigo_3.X1, n)) %>% 
  ggplot(aes(Info_Tigo_3.X1, n, fill = Info_Tigo_3.X1)) + 
  geom_col() + 
  geom_bar(stat = "identity", width = 0.72)+ 
  theme(panel.background = element_rect(fill = "white"), plot.title = element_text(hjust = 0.5)) + 
  labs(x = NULL, y = "Cantidad de Tweets Tigo") + 
  theme (plot.title = element_text(size=rel(1), #Tamaño de la letra del título 
                                  vjust=1, #Justificación vertical, para separarlo del gráfico 
                                  face="plain", #Letra negrilla. Otras posibilidades "plain",                                                  "italic", "bold" y "bold.italic" 
                                  color="black", #Color del texto 
                                  lineheight=1.5)) +
                                  scale_fill_manual(values = c("#6698FF", "#153E7E"))
  #scale_fill_brewer(palette = "RdYlBu") 

Info_Gestoras_T2 
@
\caption {Gestoras de contenido para Claro, Movistar y Tigo} 
\label{fig:GestorasEmpresas2019} 
\end{figure}

Analizando el atributo \textit{Statusource} se descubrió que las empresas de telecomunicaciones en Colombia contratan compañias para que les administre el contenido de sus redes sociales, tal como se puede apreciar en la figura \ref{fig:GestorasEmpresas2019}. Por ejemplo, para la empresa Claro, los medios por los cuales mayormente responden a sus clientes o emiten su publicidad es por medio de \textit{Media Studio}, una plataforma para medir y administrar videos publicitarios en Twitter. Paralelamente, esta empresa también utiliza aplicaciones moviles por medio de dispositivos \textit{Iphone}, y  a través de computadores con la aplicación de escritorio de Twitter, \textit{Twitter Web Client}. 

Para el caso de Movistar la gestora de contenido que presentó mayor participación fue la compañía \textit{S1GateWay}, la cual administró más de 50,000 tweets durante el periodo recopilado. \textit{S1GateWay} es una compañía que ofrece una plataforma de atención al cliente para la mejora y optimización de la relación entre los usuarios en una red social y las empresas. De la misma forma, \textit{TambipSocial Bakers}, una compañía de analitica que utiliza la inteligencia artificial en las redes sociales a través del marketing, es otra empresa que Movistar contrata para la gestión de sus cuentas. Por último, \textit{Twitter Web Client, Tweetdeck,} son otras plataformas que permitieron optimizar la gestión de múltiples cuentas de Twitter y son mayormente utilizadas por la empresa Movistar. 

Finalmente, para el caso de Tigo se observa que sus gestoras de contenido son \textit{Twitter Ads Composer}, una herramienta de twitter para administrar y optimizar campañas publicitarias en masa; y \textit{Zendesk}, el cual es un sistema que permite a los agentes de soporte administrar las interacciones de los clientes. Para el periodo de tiempo analizado este sistema administró más de 40,000 tweets de esta empresa. 

Es importante rescatar que empresas como Movistar y Claro tienen una compañía para el análisis de PQRs e interacción con el cliente. Al realizar la búsqueda en la página de empresas como \textit{S1GateWay}, Claro y Movistar figuran como sus clientes. Mientras que Tigo, adquiere herramientas o sistemas de información de negocios que les permite realizar este análisis por su propia cuenta.  Cabe aclarar que la información analizada se realiza por medio de la variable \textit{Statusource} del conjunto de datos.

Por último, se observa en la figura \ref{fig:Gestorasempresas2018} que herramientas como \textit{TwitterDeck, Twitter Ads Composer o Media Studio} fueron usadas por las tres compañías tanto en 2018 como en 2019. Para el caso de Claro en 2018, la herramienta que más utilizó para gestionar fue mediante dispositivos \textit{Iphone} , mientras que en 2019 \textit{Twitter Media Studio } fue la herramienta que mayormente dispuso esta empresa. Para Movistar se observa que la compañía \textit{S1GateWay} fue quien administró más del 50\% de la atención de contenido para esta empresa en 2018 y 2019. Finalmente, para el caso de Tigo, la plataforma \textit{Zendesk} fue el medio por el cual esta empresa administró el contenido de sus cuentas en Twitter para los periodos de los dos años analizados.

\begin{figure}[H] 
\centering 
<<fig=TRUE,warning=FALSE,message=FALSE,echo=FALSE,results='hide', fig.height=2.6,fig.width=6>>=

setwd("C:/Users/josen/OneDrive/Documentos/RTesis/VERSION FINAL EMPRESAS")
#Librerias utilizadas en el proceso
library(tidyr)
library(dplyr)
library(readxl)
library(ggplot2)
library(plotly)
library(wesanderson)
library(RColorBrewer)
library(tidytext)
library(stopwords)
library(stringr)
library(tibble)
library(tm)
library(wordcloud)
library(scales)
library(plotrix)
library(ggiraph)

#Datos utilizados de cada empresa
Claro   <-  read.csv("Claro.csv", stringsAsFactors = FALSE)
Tigo     <- read.csv("Tigo.csv", stringsAsFactors = FALSE)
Movistar <- read.csv("Movistar.csv", stringsAsFactors = FALSE)
Virgin   <- read.csv("Virgin.csv", stringsAsFactors = FALSE)
Avantel  <- read.csv("Avantel.csv", stringsAsFactors = FALSE)

#Separación de la variable Created
Info_Claro <- data.frame(do.call('rbind',strsplit(as.character(Claro$created)," ",fixed=TRUE)))

# separacion de la hora en el campo de la fecha
horas_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X2),":",fixed=TRUE)))

#Separación Fecha
Fecha_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X1),"-",fixed=TRUE)))

#Separación de la variable Status Source
Info_Claro_1  <- data.frame(do.call('rbind',strsplit(as.character(Claro$statusSource),">",fixed=TRUE)))
Info_Claro_2  <- data.frame(do.call('rbind',strsplit(as.character(Claro$statusSource),"<",fixed=TRUE)))
Info_Claro_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro_1$X2),"<",fixed=TRUE)))

Sep_horas_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X2),":",fixed=TRUE)))

#Data Frame Final con las variables a utilizar en el conjunto Empresa Claro

Empresa_Claro <- data.frame(Claro$text, Fecha_Claro, Sep_horas_Claro$X1, Info_Claro_3$X1, Claro$retweetCount)
Empresa_Claro$X2 <- as.character(Empresa_Claro$X2)

Empresa_Claro$X2 <- case_when(
                   Empresa_Claro$X2 == '01' ~ "Enero",
                   Empresa_Claro$X2 == '02' ~ "Febrero",
                   Empresa_Claro$X2 == '03' ~ "Marzo",
                   Empresa_Claro$X2 == '04' ~ "Abril",
                   Empresa_Claro$X2 == '05' ~ "Mayo",
                   Empresa_Claro$X2 == '06' ~ "Junio",
                   Empresa_Claro$X2 == '07' ~ "Julio",
                   Empresa_Claro$X2 == '08' ~ "Agosto",
                   Empresa_Claro$X2 == '09' ~ "Septiembre",
                   Empresa_Claro$X2 == '10' ~ "Octubre",
                   Empresa_Claro$X2 == '11' ~ "Noviembre",
                   Empresa_Claro$X2 == '12' ~ "Diciembre",
                  TRUE ~ as.character(Empresa_Claro$X2))

# Nueva lectura
Claro   <-  read.csv("Claro.csv", stringsAsFactors = FALSE)

Fusion_Empresas_Claro <- data.frame(Claro$screenName,Fecha_Claro, Sep_horas_Claro$X1,Claro$created, Claro$text)
names(Fusion_Empresas_Claro)[1] <-"screen_name"
names(Fusion_Empresas_Claro)[2] <-"year"
names(Fusion_Empresas_Claro)[3] <-"month"
names(Fusion_Empresas_Claro)[4] <-"day"
names(Fusion_Empresas_Claro)[5] <-"hour"
names(Fusion_Empresas_Claro)[6] <-"fecha"
names(Fusion_Empresas_Claro)[7] <-"Text"

#Separación de la variable Created
Info_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Tigo$created)," ",fixed=TRUE)))

#Separacion de la hora en el campo de la fecha
horas_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X2),":",fixed=TRUE)))

#Separación Fecha
Fecha_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X1),"-",fixed=TRUE)))

#Separación de la variable Status Source
Info_Tigo_1  <- data.frame(do.call('rbind',strsplit(as.character(Tigo$statusSource),">",fixed=TRUE)))
Info_Tigo_2  <- data.frame(do.call('rbind',strsplit(as.character(Tigo$statusSource),"<",fixed=TRUE)))
Info_Tigo_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo_1$X2),"<",fixed=TRUE)))

Sep_horas_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X2),":",fixed=TRUE)))

# Data Frame Final con las variables a utilizar en el conjunto Empresa Tigo
Empresa_Tigo <- data.frame(Tigo$text, Fecha_Tigo, Sep_horas_Tigo$X1, Info_Tigo_3$X1, Tigo$retweetCount)
Empresa_Tigo$X2 <- case_when(
                   Empresa_Tigo$X2 == '01' ~ "Enero",
                   Empresa_Tigo$X2 == '02' ~ "Febrero",
                   Empresa_Tigo$X2 == '03' ~ "Marzo",
                   Empresa_Tigo$X2 == '04' ~ "Abril",
                   Empresa_Tigo$X2 == '05' ~ "Mayo",
                   Empresa_Tigo$X2 == '06' ~ "Junio",
                   Empresa_Tigo$X2 == '07' ~ "Julio",
                   Empresa_Tigo$X2 == '08' ~ "Agosto",
                   Empresa_Tigo$X2 == '09' ~ "Septiembre",
                   Empresa_Tigo$X2 == '10' ~ "Octubre",
                   Empresa_Tigo$X2 == '11' ~ "Noviembre",
                   Empresa_Tigo$X2 == '12' ~ "Diciembre",
                  TRUE ~ as.character(Empresa_Tigo$X2))

# Nueva lectura
Tigo   <-  read.csv("Tigo.csv", stringsAsFactors = FALSE)

Fusion_Empresas_Tigo <- data.frame(Tigo$screenName,Fecha_Tigo, Sep_horas_Tigo$X1,Tigo$created, Tigo$text)
names(Fusion_Empresas_Tigo)[1] <-"screen_name"
names(Fusion_Empresas_Tigo)[2] <-"year"
names(Fusion_Empresas_Tigo)[3] <-"month"
names(Fusion_Empresas_Tigo)[4] <-"day"
names(Fusion_Empresas_Tigo)[5] <-"hour"
names(Fusion_Empresas_Tigo)[6] <-"fecha"
names(Fusion_Empresas_Tigo)[7] <-"Text"

#Separación de la variable Created
Info_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Movistar$created)," ",fixed=TRUE)))

#Separacion de la hora en el campo de la fecha
horas_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X2),":",fixed=TRUE)))

#Separación Fecha
Fecha_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X1),"-",fixed=TRUE)))

#Separación de la variable Status Source
Info_Movistar_1  <- data.frame(do.call('rbind',strsplit(as.character(Movistar$statusSource),">",fixed=TRUE)))
Info_Movistar_2  <- data.frame(do.call('rbind',strsplit(as.character(Movistar$statusSource),"<",fixed=TRUE)))
Info_Movistar_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar_1$X2),"<",fixed=TRUE)))

Sep_horas_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X2),":",fixed=TRUE)))

#Data Frame Empresa Movistar
Empresa_Movistar <- data.frame(Movistar$text, Fecha_Movistar, Sep_horas_Movistar$X1, Info_Movistar_3$X1, Movistar$retweetCount)

Empresa_Movistar$X2 <- case_when(
                   Empresa_Movistar$X2 == '01' ~ "Enero",
                   Empresa_Movistar$X2 == '02' ~ "Febrero",
                   Empresa_Movistar$X2 == '03' ~ "Marzo",
                   Empresa_Movistar$X2 == '04' ~ "Abril",
                   Empresa_Movistar$X2 == '05' ~ "Mayo",
                   Empresa_Movistar$X2 == '06' ~ "Junio",
                   Empresa_Movistar$X2 == '07' ~ "Julio",
                   Empresa_Movistar$X2 == '08' ~ "Agosto",
                   Empresa_Movistar$X2 == '09' ~ "Septiembre",
                   Empresa_Movistar$X2 == '10' ~ "Octubre",
                   Empresa_Movistar$X2 == '11' ~ "Noviembre",
                   Empresa_Movistar$X2 == '12' ~ "Diciembre",
                  TRUE ~ as.character(Empresa_Movistar$X2))

# Nueva lectura
Movistar <- read.csv("Movistar.csv", stringsAsFactors = FALSE)

Fusion_Empresas_Movistar <- data.frame(Movistar$screenName,Fecha_Movistar, Sep_horas_Movistar$X1,Movistar$created, Movistar$text)
names(Fusion_Empresas_Movistar)[1] <-"screen_name"
names(Fusion_Empresas_Movistar)[2] <-"year"
names(Fusion_Empresas_Movistar)[3] <-"month"
names(Fusion_Empresas_Movistar)[4] <-"day"
names(Fusion_Empresas_Movistar)[5] <-"hour"
names(Fusion_Empresas_Movistar)[6] <-"fecha"
names(Fusion_Empresas_Movistar)[7] <-"Text"

# Uniendo los data frames con merge ---------------------------------------------
Fusion_ClaroMovistar  <- rbind(Fusion_Empresas_Claro,Fusion_Empresas_Movistar)
Fusion_Total          <- rbind(Fusion_ClaroMovistar,Fusion_Empresas_Tigo)
# -------------------------------------------------------------------------------

Gestora_Claro <- Empresa_Claro%>% 
  ggplot(aes(x = X1, fill = Info_Claro_3.X1)) +  
  geom_bar() + 
  theme(panel.background = element_rect(fill = "white"), plot.title = element_text(hjust = 0.5)) + 
  labs(title = "Cantidad de Tweets respondidos por \n gestoras de contenido en 2018 y 2019", 
       x = "Año", y = "Cantidad") + 
  theme(panel.background = element_rect(fill = "white"), plot.title = element_text(hjust = 0.5)) + 
  theme (plot.title = element_text(size=rel(1), #Tamaño de la letra del título 
                                  vjust=1, #Justificación vertical, para separarlo del gráfico 
                                  face="plain", #Letra negrilla. Otras posibilidades "plain",                                                  "italic", "bold" y "bold.italic" 
                                  color="black", #Color del texto 
                                  lineheight=1.5)) + 
    scale_fill_brewer(palette = "Reds") 

   

Gestora_Claro 

Gestora_Movistar <- Empresa_Movistar%>% 
  ggplot(aes(x = X1, fill = Info_Movistar_3.X1)) +  
  geom_bar() + 
  theme(panel.background = element_rect(fill = "white"), plot.title = element_text(hjust = 0.5)) + 
  labs(title = "", x = "Año", y = "Cantidad") + 
  theme(panel.background = element_rect(fill = "white"), plot.title = element_text(hjust = 0.5)) + 
  theme (plot.title = element_text(size=rel(1), #Tamaño de la letra del título 
                                  vjust=1, #Justificación vertical, para separarlo del gráfico 
                                  face="plain", #Letra negrilla. Otras posibilidades "plain",                                                  "italic", "bold" y "bold.italic" 
                                  color="black", #Color del texto 
                                  lineheight=1.5)) + 
    scale_fill_brewer(palette = "Greens") 

Gestora_Movistar 

Gestora_Tigo <- Empresa_Tigo%>% 
  ggplot(aes(x = X1, fill = Info_Tigo_3.X1)) +  
  geom_bar() + 
  theme(panel.background = element_rect(fill = "white"), plot.title = element_text(hjust = 0.5)) + 
  labs(title = "", x = "Año", y = "Cantidad") + 
  theme(panel.background = element_rect(fill = "white"), plot.title = element_text(hjust = 0.5)) + 
  theme (plot.title = element_text(size=rel(1), #Tamaño de la letra del título 
                                  vjust=1, #Justificación vertical, para separarlo del gráfico 
                                  face="plain", #Letra negrilla. Otras posibilidades "plain",                                                  "italic", "bold" y "bold.italic" 
                                  color="black", #Color del texto 
                                  lineheight=1.5)) + 
    scale_fill_brewer(palette = "PuBu") 

Gestora_Tigo 

@
\caption {Cantidad de tweets Claro, Movistar y Tigo atendidos por gestoras de contenido 2018 y 2019} 
\label{fig:Gestorasempresas2018} 
\end{figure}


\subsubsection{Clientes}

\begin{figure}[H] 
\centering 
<<fig=TRUE,warning=FALSE,message=FALSE,echo=FALSE,results='hide', fig.height=4,fig.width=6>>=
# Configuracion del directorio de trabajo 

setwd("C:/Users/josen/OneDrive/Documentos/RTesis/VERSION FINAL CLIENTES") 
# Librerias utilizadas en el proceso 
library(tidyr) 
library(dplyr) 
library(readxl) 
library(ggplot2) 
library(plotly) 
library(wesanderson) 
library(RColorBrewer) 
library(tidytext) 
library(stopwords) 
library(stringr) 
library(tibble) 
library(tm) 
library(wordcloud) 
library(scales) 
library(plotrix) 
library(ggiraph) 

 

# Datos utilizados de cada Cliente 
Claro   <-  read.csv("Clientes_Claro.csv", stringsAsFactors = FALSE) 
Tigo     <- read.csv("Clientes_Tigo.csv", stringsAsFactors = FALSE) 
Movistar <- read.csv("Clientes_Movistar.csv", stringsAsFactors = FALSE) 
Virgin   <- read.csv("Clientes_Virgin.csv", stringsAsFactors = FALSE) 
Avantel  <- read.csv("Clientes_Avantel.csv", stringsAsFactors = FALSE) 

 

 

# Separación de la variable Created 
Info_Claro <- data.frame(do.call('rbind',strsplit(as.character(Claro$created)," ",fixed=TRUE))) 

  

# separación de la hora en el campo de la fecha 
horas_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X2),":",fixed=TRUE))) 

  

# Separación Fecha 
Fecha_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X1),"-",fixed=TRUE))) 

 

# Separaciñn de la variable Status Source 
Info_Claro_1  <- data.frame(do.call('rbind',strsplit(as.character(Claro$statusSource),">",fixed=TRUE))) 
Info_Claro_2  <- data.frame(do.call('rbind',strsplit(as.character(Claro$statusSource),"<",fixed=TRUE))) 
Info_Claro_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro_1$X2),"<",fixed=TRUE))) 

  

Sep_horas_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X2),":",fixed=TRUE))) 

 
# Data Frame Final con las variables a utilizar en el conjunto Cliente Claro 
Cliente_Claro <- data.frame(Claro$text, Fecha_Claro, Sep_horas_Claro$X1, Info_Claro_3$X1, Claro$retweetCount) 

  

Cliente_Claro$X2 <- case_when( 
                   Cliente_Claro$X2 == '01' ~ "Enero", 
                   Cliente_Claro$X2 == '02' ~ "Febrero", 
                   Cliente_Claro$X2 == '03' ~ "Marzo", 
                   Cliente_Claro$X2 == '04' ~ "Abril", 
                   Cliente_Claro$X2 == '05' ~ "Mayo", 
                   Cliente_Claro$X2 == '06' ~ "Junio", 
                   Cliente_Claro$X2 == '07' ~ "Julio", 
                   Cliente_Claro$X2 == '08' ~ "Agosto", 
                   Cliente_Claro$X2 == '09' ~ "Septiembre", 
                   Cliente_Claro$X2 == '10' ~ "Octubre", 
                   Cliente_Claro$X2 == '11' ~ "Noviembre", 
                   Cliente_Claro$X2 == '12' ~ "Diciembre", 
                  TRUE ~ as.character(Cliente_Claro$X2)) 

  

  

# Nueva lectura 

Claro   <-  read.csv("Clientes_Claro.csv", stringsAsFactors = FALSE) 
Claro   <-  data.frame(Claro, Milabel= "Clientes_ClaroColombia") 

Fusion_Clientes_Claro <- data.frame(Claro$Milabel,Fecha_Claro, Sep_horas_Claro$X1,Claro$created) 
names(Fusion_Clientes_Claro)[1] <-"screen_name" 
names(Fusion_Clientes_Claro)[2] <-"year" 
names(Fusion_Clientes_Claro)[3] <-"month" 
names(Fusion_Clientes_Claro)[4] <-"day" 
names(Fusion_Clientes_Claro)[5] <-"hour" 
names(Fusion_Clientes_Claro)[6] <-"fecha" 

 

# Separaciñn de la variable Created 

Info_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Tigo$created)," ",fixed=TRUE))) 

# Separacion de la hora en el campo de la fecha 
horas_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X2),":",fixed=TRUE))) 

# Separaciñn Fecha 
Fecha_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X1),"-",fixed=TRUE))) 


# Separaciñn de la variable Status Source 
Info_Tigo_1  <- data.frame(do.call('rbind',strsplit(as.character(Tigo$statusSource),">",fixed=TRUE))) 
Info_Tigo_2  <- data.frame(do.call('rbind',strsplit(as.character(Tigo$statusSource),"<",fixed=TRUE))) 
Info_Tigo_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo_1$X2),"<",fixed=TRUE))) 

Sep_horas_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X2),":",fixed=TRUE))) 

 

# Data Frame Final con las variables a utilizar en el conjunto Cliente Tigo 
Cliente_Tigo <- data.frame(Tigo$text, Fecha_Tigo, Sep_horas_Tigo$X1, Info_Tigo_3$X1, Tigo$retweetCount) 

Cliente_Tigo$X2 <- case_when( 
                   Cliente_Tigo$X2 == '01' ~ "Enero", 
                   Cliente_Tigo$X2 == '02' ~ "Febrero", 
                   Cliente_Tigo$X2 == '03' ~ "Marzo", 
                   Cliente_Tigo$X2 == '04' ~ "Abril", 
                   Cliente_Tigo$X2 == '05' ~ "Mayo", 
                   Cliente_Tigo$X2 == '06' ~ "Junio", 
                   Cliente_Tigo$X2 == '07' ~ "Julio", 
                   Cliente_Tigo$X2 == '08' ~ "Agosto", 
                   Cliente_Tigo$X2 == '09' ~ "Septiembre", 
                   Cliente_Tigo$X2 == '10' ~ "Octubre", 
                   Cliente_Tigo$X2 == '11' ~ "Noviembre", 
                   Cliente_Tigo$X2 == '12' ~ "Diciembre", 
                  TRUE ~ as.character(Cliente_Tigo$X2)) 

  

# Nueva lectura 

Tigo   <-  read.csv("Clientes_Tigo.csv", stringsAsFactors = FALSE) 
Tigo   <-  data.frame(Tigo, Milabel= "Clientes_Tigo_Colombia") 

Fusion_Clientes_Tigo <- data.frame(Tigo$Milabel,Fecha_Tigo, Sep_horas_Tigo$X1,Tigo$created) 
names(Fusion_Clientes_Tigo)[1] <-"screen_name" 
names(Fusion_Clientes_Tigo)[2] <-"year" 
names(Fusion_Clientes_Tigo)[3] <-"month" 
names(Fusion_Clientes_Tigo)[4] <-"day" 
names(Fusion_Clientes_Tigo)[5] <-"hour" 
names(Fusion_Clientes_Tigo)[6] <-"fecha" 

# Separaciñn de la variable Created 
Info_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Movistar$created)," ",fixed=TRUE))) 

# Separacion de la hora en el campo de la fecha 

horas_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X2),":",fixed=TRUE))) 

# Separaciñn Fecha 
Fecha_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X1),"-",fixed=TRUE))) 

# Separaciñn de la variable Status Source 
Info_Movistar_1  <- data.frame(do.call('rbind',strsplit(as.character(Movistar$statusSource),">",fixed=TRUE))) 
Info_Movistar_2  <- data.frame(do.call('rbind',strsplit(as.character(Movistar$statusSource),"<",fixed=TRUE))) 
Info_Movistar_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar_1$X2),"<",fixed=TRUE))) 

Sep_horas_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X2),":",fixed=TRUE))) 

# Data Frame Cliente Movistar 
Cliente_Movistar <- data.frame(Movistar$text, Fecha_Movistar, Sep_horas_Movistar$X1, Info_Movistar_3$X1, Movistar$retweetCount) 

# Se eliminan filas de la semana del 7 al 17 de Noviembre de 2018 
Cliente_Movistar <- Cliente_Movistar[-grep("07/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("08/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("09/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("10/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("11/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("12/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("13/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("14/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("15/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("16/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("17/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("18/11/2018",Cliente_Movistar$X1),] 

Cliente_Movistar$X2 <- case_when( 
                   Cliente_Movistar$X2 == '01' ~ "Enero", 
                   Cliente_Movistar$X2 == '02' ~ "Febrero", 
                   Cliente_Movistar$X2 == '03' ~ "Marzo", 
                   Cliente_Movistar$X2 == '04' ~ "Abril", 
                   Cliente_Movistar$X2 == '05' ~ "Mayo", 
                   Cliente_Movistar$X2 == '06' ~ "Junio", 
                   Cliente_Movistar$X2 == '07' ~ "Julio", 
                   Cliente_Movistar$X2 == '08' ~ "Agosto", 
                   Cliente_Movistar$X2 == '09' ~ "Septiembre", 
                   Cliente_Movistar$X2 == '10' ~ "Octubre", 
                   Cliente_Movistar$X2 == '11' ~ "Noviembre", 
                   Cliente_Movistar$X2 == '12' ~ "Diciembre", 
                  TRUE ~ as.character(Cliente_Movistar$X2)) 

  

# Nueva lectura 
Movistar   <-  read.csv("Clientes_Movistar.csv", stringsAsFactors = FALSE) 
Movistar   <-  data.frame(Movistar, Milabel= "Clientes_MovistarCo") 
Fusion_Clientes_Movistar <- data.frame(Movistar$Milabel,Fecha_Movistar, Sep_horas_Movistar$X1,Movistar$created) 

names(Fusion_Clientes_Movistar)[1] <-"screen_name" 
names(Fusion_Clientes_Movistar)[2] <-"year" 
names(Fusion_Clientes_Movistar)[3] <-"month" 
names(Fusion_Clientes_Movistar)[4] <-"day" 
names(Fusion_Clientes_Movistar)[5] <-"hour" 
names(Fusion_Clientes_Movistar)[6] <-"fecha" 

#Uniendo los data frames con merge-----------------------------------------------------------
Fusion_Clientes_ClaroMovistar  <- rbind(Fusion_Clientes_Claro,Fusion_Clientes_Movistar) 
Fusion_Total_Clientes          <- rbind(Fusion_Clientes_ClaroMovistar,Fusion_Clientes_Tigo) 
#--------------------------------------------------------------------------------------------

library(lubridate) 

ggplot(Fusion_Total_Clientes, aes(x = as.Date(fecha), fill = Fusion_Total_Clientes$screen_name)) + 
  geom_histogram(position = "identity", bins = 20, show.legend = FALSE) + 
  scale_x_date(date_labels = "%m-%Y", date_breaks = "1 month") + 
  labs(x = "Fecha de publicación", y = "Número de tweets") + 
  facet_wrap(~ Fusion_Total_Clientes$screen_name, ncol = 1) + 
  theme_bw() + 
  theme(axis.text.x = element_text(angle = 90)) + 
  scale_fill_brewer(palette = "Set1") 

@
\caption {Histórico de Tweets recolectados 2018-2019} 
\label{fig:historicoC} 
\end{figure}

De la misma forma, se procedió a obtener una representación visual de la cantidad de tweets generados mensualmente por los clientes de las empresas en cuestión. Mediante la figura \ref{fig:historicoC} se registra una diferencia en la cantidad de datos recolectados de los clientes Tigo, en comparación con los clientes Claro y Movistar. Pues la representación porcentual de tweets, en cada conjunto de clientes asociados a las empresas, es de 49.72\%, 29.39\% y 20.88\% para Claro, Movistar y Tigo respectivamente. A través de esta figura se aprecia como para los clientes de la empresa Claro se recopilaron en los meses de noviembre de 2018 y febrero de 2019 mayor cantidad de datos. Para el caso de los clientes Movistar, se observa que el comportamiento de los datos a lo largo del tiempo es regular, a excepción de los meses de abril y mayo del 2019, en los que se recuperó una baja cantidad de datos; mientras que, para los clientes Tigo la mayor cantidad de tweets recuperados se encuentran en el segundo mes del año de extracción. 

Con el fin de identificar los meses de mayor y menor actividad de publicación de los clientes se construyó la figura \ref{fig:tendenciasC} En este gráfico puede observarse un comportamiento determinado para cada cliente asociado, pues se reconoce que el mes donde los clientes Claro aumentaron su participación en la red social Twitter fue noviembre, para los clientes Movistar, diciembre fue el mes con mayor representación y para los clientes Tigo, febrero fue el mes con mayor actividad. Los clientes Tigo muestran una actividad inicial por debajo de la actividad de los clientes Movistar, no obstante, a partir de febrero de 2019 incrementaron sustancialmente el número de tweets publicados, presentando juntos clientes desde este punto, cantidades similares de tweets compartidos. 

Dentro del conjunto de tweets recolectados para los clientes asociados a las empresas en cuestión, Claro, Movistar y Tigo, se presentó un común denominador asociado a la inconformidad de los clientes por los productos y servicios adquiridos. De manera específica, los clientes de la empresa Claro manifiestan inconformidad con el servicio de telefonía móvil y televisión, a lo largo del conjunto de tweets para cada mes se distinguen quejas y reclamos por parte de los usuarios, exigiendo inmediata atención. Similarmente, los clientes de la empresa Movistar reportan en esta red social pésima experiencia como usuarios, además denuncian el incumplimiento en los contratos y cobros irregulares. Asimismo, los clientes de la empresa Tigo expresan disgusto frente a la constante publicación de tweets relacionados con futbol, pues los clientes esperan pronta respuesta a sus reclamaciones.  


\begin{figure}[H] 
\centering 
<<fig=TRUE,warning=FALSE,message=FALSE,echo=FALSE,results='hide', fig.height=3.7,fig.width=6>>=
# Configuracion del directorio de trabajo 

setwd("C:/Users/josen/OneDrive/Documentos/RTesis/VERSION FINAL CLIENTES") 
# Librerias utilizadas en el proceso 
library(tidyr) 
library(dplyr) 
library(readxl) 
library(ggplot2) 
library(plotly) 
library(wesanderson) 
library(RColorBrewer) 
library(tidytext) 
library(stopwords) 
library(stringr) 
library(tibble) 
library(tm) 
library(wordcloud) 
library(scales) 
library(plotrix) 
library(ggiraph) 

 

# Datos utilizados de cada Cliente 
Claro   <-  read.csv("Clientes_Claro.csv", stringsAsFactors = FALSE) 
Tigo     <- read.csv("Clientes_Tigo.csv", stringsAsFactors = FALSE) 
Movistar <- read.csv("Clientes_Movistar.csv", stringsAsFactors = FALSE) 
Virgin   <- read.csv("Clientes_Virgin.csv", stringsAsFactors = FALSE) 
Avantel  <- read.csv("Clientes_Avantel.csv", stringsAsFactors = FALSE) 

 

 

# Separación de la variable Created 
Info_Claro <- data.frame(do.call('rbind',strsplit(as.character(Claro$created)," ",fixed=TRUE))) 

  

# separación de la hora en el campo de la fecha 
horas_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X2),":",fixed=TRUE))) 

  

# Separación Fecha 
Fecha_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X1),"-",fixed=TRUE))) 

 

# Separaciñn de la variable Status Source 
Info_Claro_1  <- data.frame(do.call('rbind',strsplit(as.character(Claro$statusSource),">",fixed=TRUE))) 
Info_Claro_2  <- data.frame(do.call('rbind',strsplit(as.character(Claro$statusSource),"<",fixed=TRUE))) 
Info_Claro_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro_1$X2),"<",fixed=TRUE))) 

  

Sep_horas_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X2),":",fixed=TRUE))) 

 
# Data Frame Final con las variables a utilizar en el conjunto Cliente Claro 
Cliente_Claro <- data.frame(Claro$text, Fecha_Claro, Sep_horas_Claro$X1, Info_Claro_3$X1, Claro$retweetCount) 

  

Cliente_Claro$X2 <- case_when( 
                   Cliente_Claro$X2 == '01' ~ "Enero", 
                   Cliente_Claro$X2 == '02' ~ "Febrero", 
                   Cliente_Claro$X2 == '03' ~ "Marzo", 
                   Cliente_Claro$X2 == '04' ~ "Abril", 
                   Cliente_Claro$X2 == '05' ~ "Mayo", 
                   Cliente_Claro$X2 == '06' ~ "Junio", 
                   Cliente_Claro$X2 == '07' ~ "Julio", 
                   Cliente_Claro$X2 == '08' ~ "Agosto", 
                   Cliente_Claro$X2 == '09' ~ "Septiembre", 
                   Cliente_Claro$X2 == '10' ~ "Octubre", 
                   Cliente_Claro$X2 == '11' ~ "Noviembre", 
                   Cliente_Claro$X2 == '12' ~ "Diciembre", 
                  TRUE ~ as.character(Cliente_Claro$X2)) 

  

  

# Nueva lectura 

Claro   <-  read.csv("Clientes_Claro.csv", stringsAsFactors = FALSE) 
Claro   <-  data.frame(Claro, Milabel= "Clientes_ClaroColombia") 

Fusion_Clientes_Claro <- data.frame(Claro$Milabel,Fecha_Claro, Sep_horas_Claro$X1,Claro$created) 
names(Fusion_Clientes_Claro)[1] <-"screen_name" 
names(Fusion_Clientes_Claro)[2] <-"year" 
names(Fusion_Clientes_Claro)[3] <-"month" 
names(Fusion_Clientes_Claro)[4] <-"day" 
names(Fusion_Clientes_Claro)[5] <-"hour" 
names(Fusion_Clientes_Claro)[6] <-"fecha" 

 

# Separaciñn de la variable Created 

Info_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Tigo$created)," ",fixed=TRUE))) 

# Separacion de la hora en el campo de la fecha 
horas_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X2),":",fixed=TRUE))) 

# Separaciñn Fecha 
Fecha_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X1),"-",fixed=TRUE))) 


# Separaciñn de la variable Status Source 
Info_Tigo_1  <- data.frame(do.call('rbind',strsplit(as.character(Tigo$statusSource),">",fixed=TRUE))) 
Info_Tigo_2  <- data.frame(do.call('rbind',strsplit(as.character(Tigo$statusSource),"<",fixed=TRUE))) 
Info_Tigo_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo_1$X2),"<",fixed=TRUE))) 

Sep_horas_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X2),":",fixed=TRUE))) 

 

# Data Frame Final con las variables a utilizar en el conjunto Cliente Tigo 
Cliente_Tigo <- data.frame(Tigo$text, Fecha_Tigo, Sep_horas_Tigo$X1, Info_Tigo_3$X1, Tigo$retweetCount) 

Cliente_Tigo$X2 <- case_when( 
                   Cliente_Tigo$X2 == '01' ~ "Enero", 
                   Cliente_Tigo$X2 == '02' ~ "Febrero", 
                   Cliente_Tigo$X2 == '03' ~ "Marzo", 
                   Cliente_Tigo$X2 == '04' ~ "Abril", 
                   Cliente_Tigo$X2 == '05' ~ "Mayo", 
                   Cliente_Tigo$X2 == '06' ~ "Junio", 
                   Cliente_Tigo$X2 == '07' ~ "Julio", 
                   Cliente_Tigo$X2 == '08' ~ "Agosto", 
                   Cliente_Tigo$X2 == '09' ~ "Septiembre", 
                   Cliente_Tigo$X2 == '10' ~ "Octubre", 
                   Cliente_Tigo$X2 == '11' ~ "Noviembre", 
                   Cliente_Tigo$X2 == '12' ~ "Diciembre", 
                  TRUE ~ as.character(Cliente_Tigo$X2)) 

  

# Nueva lectura 

Tigo   <-  read.csv("Clientes_Tigo.csv", stringsAsFactors = FALSE) 
Tigo   <-  data.frame(Tigo, Milabel= "Clientes_Tigo_Colombia") 

Fusion_Clientes_Tigo <- data.frame(Tigo$Milabel,Fecha_Tigo, Sep_horas_Tigo$X1,Tigo$created) 
names(Fusion_Clientes_Tigo)[1] <-"screen_name" 
names(Fusion_Clientes_Tigo)[2] <-"year" 
names(Fusion_Clientes_Tigo)[3] <-"month" 
names(Fusion_Clientes_Tigo)[4] <-"day" 
names(Fusion_Clientes_Tigo)[5] <-"hour" 
names(Fusion_Clientes_Tigo)[6] <-"fecha" 

# Separaciñn de la variable Created 
Info_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Movistar$created)," ",fixed=TRUE))) 

# Separacion de la hora en el campo de la fecha 

horas_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X2),":",fixed=TRUE))) 

# Separaciñn Fecha 
Fecha_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X1),"-",fixed=TRUE))) 

# Separaciñn de la variable Status Source 
Info_Movistar_1  <- data.frame(do.call('rbind',strsplit(as.character(Movistar$statusSource),">",fixed=TRUE))) 
Info_Movistar_2  <- data.frame(do.call('rbind',strsplit(as.character(Movistar$statusSource),"<",fixed=TRUE))) 
Info_Movistar_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar_1$X2),"<",fixed=TRUE))) 

Sep_horas_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X2),":",fixed=TRUE))) 

# Data Frame Cliente Movistar 
Cliente_Movistar <- data.frame(Movistar$text, Fecha_Movistar, Sep_horas_Movistar$X1, Info_Movistar_3$X1, Movistar$retweetCount) 

# Se eliminan filas de la semana del 7 al 17 de Noviembre de 2018 
Cliente_Movistar <- Cliente_Movistar[-grep("07/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("08/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("09/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("10/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("11/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("12/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("13/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("14/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("15/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("16/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("17/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("18/11/2018",Cliente_Movistar$X1),] 

Cliente_Movistar$X2 <- case_when( 
                   Cliente_Movistar$X2 == '01' ~ "Enero", 
                   Cliente_Movistar$X2 == '02' ~ "Febrero", 
                   Cliente_Movistar$X2 == '03' ~ "Marzo", 
                   Cliente_Movistar$X2 == '04' ~ "Abril", 
                   Cliente_Movistar$X2 == '05' ~ "Mayo", 
                   Cliente_Movistar$X2 == '06' ~ "Junio", 
                   Cliente_Movistar$X2 == '07' ~ "Julio", 
                   Cliente_Movistar$X2 == '08' ~ "Agosto", 
                   Cliente_Movistar$X2 == '09' ~ "Septiembre", 
                   Cliente_Movistar$X2 == '10' ~ "Octubre", 
                   Cliente_Movistar$X2 == '11' ~ "Noviembre", 
                   Cliente_Movistar$X2 == '12' ~ "Diciembre", 
                  TRUE ~ as.character(Cliente_Movistar$X2)) 

  

# Nueva lectura 
Movistar   <-  read.csv("Clientes_Movistar.csv", stringsAsFactors = FALSE) 
Movistar   <-  data.frame(Movistar, Milabel= "Clientes_MovistarCo") 
Fusion_Clientes_Movistar <- data.frame(Movistar$Milabel,Fecha_Movistar, Sep_horas_Movistar$X1,Movistar$created) 

names(Fusion_Clientes_Movistar)[1] <-"screen_name" 
names(Fusion_Clientes_Movistar)[2] <-"year" 
names(Fusion_Clientes_Movistar)[3] <-"month" 
names(Fusion_Clientes_Movistar)[4] <-"day" 
names(Fusion_Clientes_Movistar)[5] <-"hour" 
names(Fusion_Clientes_Movistar)[6] <-"fecha" 

#Uniendo los data frames con merge-----------------------------------------------------------
Fusion_Clientes_ClaroMovistar  <- rbind(Fusion_Clientes_Claro,Fusion_Clientes_Movistar) 
Fusion_Total_Clientes          <- rbind(Fusion_Clientes_ClaroMovistar,Fusion_Clientes_Tigo) 
#--------------------------------------------------------------------------------------------

tweets_mes_anyo <- Fusion_Total_Clientes %>% mutate(mes_anyo = format(as.Date(fecha), "%Y-%m")) 
tweets_mes_anyo %>% group_by(screen_name, mes_anyo) %>%  
                    summarise(n = n()) %>% 
                    ggplot(aes(x = mes_anyo, y = n, color= screen_name)) + 
                    geom_line(aes(group = screen_name), size=0.7) + 
                    labs(title = "Número de tweets publicados", x = "Fecha de publicación", 
                    y = "Número de tweets") + 
                    theme_bw() + 
                    theme(axis.text.x = element_text(angle = 90, size = 6), 
                    legend.position = "bottom")+ 
                    geom_point()+ 
                    scale_colour_brewer(palette = "Set1") 
@
\caption {Gráfico de tendencias Tweets Clientes 2018-2019} 
\label{fig:tendenciasC} 
\end{figure}




\begin{figure}[H] 
\centering 
<<fig=TRUE,warning=FALSE,message=FALSE,echo=FALSE,results='hide', fig.height=4,fig.width=6>>=
# Configuracion del directorio de trabajo 

setwd("C:/Users/josen/OneDrive/Documentos/RTesis/VERSION FINAL CLIENTES") 
# Librerias utilizadas en el proceso 
library(tidyr) 
library(dplyr) 
library(readxl) 
library(ggplot2) 
library(plotly) 
library(wesanderson) 
library(RColorBrewer) 
library(tidytext) 
library(stopwords) 
library(stringr) 
library(tibble) 
library(tm) 
library(wordcloud) 
library(scales) 
library(plotrix) 
library(ggiraph) 

 

# Datos utilizados de cada Cliente 
Claro   <-  read.csv("Clientes_Claro.csv", stringsAsFactors = FALSE) 
Tigo     <- read.csv("Clientes_Tigo.csv", stringsAsFactors = FALSE) 
Movistar <- read.csv("Clientes_Movistar.csv", stringsAsFactors = FALSE) 
Virgin   <- read.csv("Clientes_Virgin.csv", stringsAsFactors = FALSE) 
Avantel  <- read.csv("Clientes_Avantel.csv", stringsAsFactors = FALSE) 

 

 

# Separación de la variable Created 
Info_Claro <- data.frame(do.call('rbind',strsplit(as.character(Claro$created)," ",fixed=TRUE))) 

  

# separación de la hora en el campo de la fecha 
horas_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X2),":",fixed=TRUE))) 

  

# Separación Fecha 
Fecha_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X1),"-",fixed=TRUE))) 

 

# Separaciñn de la variable Status Source 
Info_Claro_1  <- data.frame(do.call('rbind',strsplit(as.character(Claro$statusSource),">",fixed=TRUE))) 
Info_Claro_2  <- data.frame(do.call('rbind',strsplit(as.character(Claro$statusSource),"<",fixed=TRUE))) 
Info_Claro_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro_1$X2),"<",fixed=TRUE))) 

  

Sep_horas_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X2),":",fixed=TRUE))) 

 
# Data Frame Final con las variables a utilizar en el conjunto Cliente Claro 
Cliente_Claro <- data.frame(Claro$text, Fecha_Claro, Sep_horas_Claro$X1, Info_Claro_3$X1, Claro$retweetCount) 

  

Cliente_Claro$X2 <- case_when( 
                   Cliente_Claro$X2 == '01' ~ "Enero", 
                   Cliente_Claro$X2 == '02' ~ "Febrero", 
                   Cliente_Claro$X2 == '03' ~ "Marzo", 
                   Cliente_Claro$X2 == '04' ~ "Abril", 
                   Cliente_Claro$X2 == '05' ~ "Mayo", 
                   Cliente_Claro$X2 == '06' ~ "Junio", 
                   Cliente_Claro$X2 == '07' ~ "Julio", 
                   Cliente_Claro$X2 == '08' ~ "Agosto", 
                   Cliente_Claro$X2 == '09' ~ "Septiembre", 
                   Cliente_Claro$X2 == '10' ~ "Octubre", 
                   Cliente_Claro$X2 == '11' ~ "Noviembre", 
                   Cliente_Claro$X2 == '12' ~ "Diciembre", 
                  TRUE ~ as.character(Cliente_Claro$X2)) 
# Nueva lectura 

Claro   <-  read.csv("Clientes_Claro.csv", stringsAsFactors = FALSE) 
Claro   <-  data.frame(Claro, Milabel= "Clientes_ClaroColombia") 

Fusion_Clientes_Claro <- data.frame(Claro$Milabel,Fecha_Claro, Sep_horas_Claro$X1,Claro$created) 
names(Fusion_Clientes_Claro)[1] <-"screen_name" 
names(Fusion_Clientes_Claro)[2] <-"year" 
names(Fusion_Clientes_Claro)[3] <-"month" 
names(Fusion_Clientes_Claro)[4] <-"day" 
names(Fusion_Clientes_Claro)[5] <-"hour" 
names(Fusion_Clientes_Claro)[6] <-"fecha" 

 

# Separaciñn de la variable Created 

Info_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Tigo$created)," ",fixed=TRUE))) 

# Separacion de la hora en el campo de la fecha 
horas_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X2),":",fixed=TRUE))) 

# Separaciñn Fecha 
Fecha_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X1),"-",fixed=TRUE))) 


# Separaciñn de la variable Status Source 
Info_Tigo_1  <- data.frame(do.call('rbind',strsplit(as.character(Tigo$statusSource),">",fixed=TRUE))) 
Info_Tigo_2  <- data.frame(do.call('rbind',strsplit(as.character(Tigo$statusSource),"<",fixed=TRUE))) 
Info_Tigo_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo_1$X2),"<",fixed=TRUE))) 

Sep_horas_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X2),":",fixed=TRUE))) 

 

# Data Frame Final con las variables a utilizar en el conjunto Cliente Tigo 
Cliente_Tigo <- data.frame(Tigo$text, Fecha_Tigo, Sep_horas_Tigo$X1, Info_Tigo_3$X1, Tigo$retweetCount) 

Cliente_Tigo$X2 <- case_when( 
                   Cliente_Tigo$X2 == '01' ~ "Enero", 
                   Cliente_Tigo$X2 == '02' ~ "Febrero", 
                   Cliente_Tigo$X2 == '03' ~ "Marzo", 
                   Cliente_Tigo$X2 == '04' ~ "Abril", 
                   Cliente_Tigo$X2 == '05' ~ "Mayo", 
                   Cliente_Tigo$X2 == '06' ~ "Junio", 
                   Cliente_Tigo$X2 == '07' ~ "Julio", 
                   Cliente_Tigo$X2 == '08' ~ "Agosto", 
                   Cliente_Tigo$X2 == '09' ~ "Septiembre", 
                   Cliente_Tigo$X2 == '10' ~ "Octubre", 
                   Cliente_Tigo$X2 == '11' ~ "Noviembre", 
                   Cliente_Tigo$X2 == '12' ~ "Diciembre", 
                  TRUE ~ as.character(Cliente_Tigo$X2)) 

  

# Nueva lectura 

Tigo   <-  read.csv("Clientes_Tigo.csv", stringsAsFactors = FALSE) 
Tigo   <-  data.frame(Tigo, Milabel= "Clientes_Tigo_Colombia") 

Fusion_Clientes_Tigo <- data.frame(Tigo$Milabel,Fecha_Tigo, Sep_horas_Tigo$X1,Tigo$created) 
names(Fusion_Clientes_Tigo)[1] <-"screen_name" 
names(Fusion_Clientes_Tigo)[2] <-"year" 
names(Fusion_Clientes_Tigo)[3] <-"month" 
names(Fusion_Clientes_Tigo)[4] <-"day" 
names(Fusion_Clientes_Tigo)[5] <-"hour" 
names(Fusion_Clientes_Tigo)[6] <-"fecha" 

# Separaciñn de la variable Created 
Info_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Movistar$created)," ",fixed=TRUE))) 

# Separacion de la hora en el campo de la fecha 

horas_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X2),":",fixed=TRUE))) 

# Separaciñn Fecha 
Fecha_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X1),"-",fixed=TRUE))) 

# Separaciñn de la variable Status Source 
Info_Movistar_1  <- data.frame(do.call('rbind',strsplit(as.character(Movistar$statusSource),">",fixed=TRUE))) 
Info_Movistar_2  <- data.frame(do.call('rbind',strsplit(as.character(Movistar$statusSource),"<",fixed=TRUE))) 
Info_Movistar_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar_1$X2),"<",fixed=TRUE))) 

Sep_horas_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X2),":",fixed=TRUE))) 

# Data Frame Cliente Movistar 
Cliente_Movistar <- data.frame(Movistar$text, Fecha_Movistar, Sep_horas_Movistar$X1, Info_Movistar_3$X1, Movistar$retweetCount) 

# Se eliminan filas de la semana del 7 al 17 de Noviembre de 2018 
Cliente_Movistar <- Cliente_Movistar[-grep("07/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("08/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("09/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("10/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("11/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("12/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("13/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("14/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("15/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("16/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("17/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("18/11/2018",Cliente_Movistar$X1),] 

Cliente_Movistar$X2 <- case_when( 
                   Cliente_Movistar$X2 == '01' ~ "Enero", 
                   Cliente_Movistar$X2 == '02' ~ "Febrero", 
                   Cliente_Movistar$X2 == '03' ~ "Marzo", 
                   Cliente_Movistar$X2 == '04' ~ "Abril", 
                   Cliente_Movistar$X2 == '05' ~ "Mayo", 
                   Cliente_Movistar$X2 == '06' ~ "Junio", 
                   Cliente_Movistar$X2 == '07' ~ "Julio", 
                   Cliente_Movistar$X2 == '08' ~ "Agosto", 
                   Cliente_Movistar$X2 == '09' ~ "Septiembre", 
                   Cliente_Movistar$X2 == '10' ~ "Octubre", 
                   Cliente_Movistar$X2 == '11' ~ "Noviembre", 
                   Cliente_Movistar$X2 == '12' ~ "Diciembre", 
                  TRUE ~ as.character(Cliente_Movistar$X2)) 

  

# Nueva lectura 
Movistar   <-  read.csv("Clientes_Movistar.csv", stringsAsFactors = FALSE) 
Movistar   <-  data.frame(Movistar, Milabel= "Clientes_MovistarCo") 
Fusion_Clientes_Movistar <- data.frame(Movistar$Milabel,Fecha_Movistar, Sep_horas_Movistar$X1,Movistar$created) 

names(Fusion_Clientes_Movistar)[1] <-"screen_name" 
names(Fusion_Clientes_Movistar)[2] <-"year" 
names(Fusion_Clientes_Movistar)[3] <-"month" 
names(Fusion_Clientes_Movistar)[4] <-"day" 
names(Fusion_Clientes_Movistar)[5] <-"hour" 
names(Fusion_Clientes_Movistar)[6] <-"fecha" 

#Uniendo los data frames con merge-----------------------------------------------------------
Fusion_Clientes_ClaroMovistar  <- rbind(Fusion_Clientes_Claro,Fusion_Clientes_Movistar) 
Fusion_Total_Clientes          <- rbind(Fusion_Clientes_ClaroMovistar,Fusion_Clientes_Tigo) 
#--------------------------------------------------------------------------------------------

tweets_mes_anyo$day <- as.integer(tweets_mes_anyo$day) 
str(object = tweets_mes_anyo) 
tweets_mes_anyo %>% group_by(screen_name,day) %>% 
                    summarise(n = n())%>%  
                    ungroup() %>% 
                    ggplot(aes(x = day, y=n, color=screen_name)) + 
                    geom_smooth(method = 'loess', se=TRUE)+ 
                    facet_wrap(~ screen_name, ncol = 1) + 
                    theme_bw() + 
                    theme(legend.position = "none")+ 
                    scale_colour_brewer(palette = "Set1")+ 
                    labs(x = "Dia de publicación",y = "Número de tweets")+ 
                    geom_point(aes(colour = factor(screen_name)), size = 2) + 
                    geom_point(colour = "grey90", size = 0.8) +
                    xlim(0,31)


@
\caption {Gráfica de suavización del numero de tweets por día} 
\label{fig:SuavizacionC} 
\end{figure}

A continuación, se estudió la variación de la cantidad promedio de tweets de acuerdo con el día de publicación para cada uno de los usuarios de las empresas. Por medio de la figura \ref{fig:SuavizacionC}, se determina que, la distribución del número promedio de los tweets se mantiene aproximadamente constante para los tres usuarios asociados a las empresas. Existen ciertas oscilaciones, pero todas ellas dentro del rango promedio para cada usuario. De manera específica, los clientes Claro al igual que los clientes Tigo aumentan la cantidad de publicaciones durante la mitad del mes, por otro lado, los clientes Movistar mantienen una regularidad en la cantidad de tweets publicados durante el mes, pues no se observan cambios drásticos en el número de publicaciones. Al igual que el análisis realizado para las empresas, se utilizó un nivel de intervalo de confianza de 0.95, también se empleó el método 'loess', el cual es un método no paramétrico donde se realiza la regresión de mínimos cuadrados en subconjuntos localizados, lo que lo convierte en un candidato adecuado para suavizar cualquier vector numérico, además, de ser un método de suavización aconsejado para menos de 1000 observaciones. 

Posterior a los análisis anteriores para cada cliente por año, mes y día, se procedió a definir un análisis relacionado con las horas de publicación, con el fin de identificar los momentos durante el día en el que los clientes sujetos a cada empresa publicaban en menor y mayor medida. La figura \ref{fig:horasC} muestra que son múltiples las horas en que los clientes Claro, Movistar y Tigo realizan sus publicaciones, pues estos deciden compartir sus tweets en mayor medida durante la mañana a las 3 a.m, horas de publicación durante la tarde y la noche, presentan un comportamiento similar, dado que a las 3 p.m., 6 p.m. y 10 p.m., registran el volumen más grande en cuanto al número de tweets para los tres clientes asociados a las empresas en cuestión, ya que es cuando las personas se encuentran en sus tiempos de desplazamiento y horarios no laborales. Por el contrario, el horario que presenta menor atención por parte de los clientes de las tres empresas es el de 8 a.m. a 9 a.m. Siendo evidente la necesidad de adaptar los horarios de publicación de contenido de las empresas de acuerdo con los horarios de los clientes, para así potenciar el alcance del mensaje y la respuesta obtenida. 

\begin{figure}[H] 
\centering 
<<fig=TRUE,warning=FALSE,message=FALSE,echo=FALSE,results='hide', fig.height=5.3,fig.width=6>>=
# Configuracion del directorio de trabajo 

setwd("C:/Users/josen/OneDrive/Documentos/RTesis/VERSION FINAL CLIENTES") 
# Librerias utilizadas en el proceso 
library(tidyr) 
library(dplyr) 
library(readxl) 
library(ggplot2) 
library(plotly) 
library(wesanderson) 
library(RColorBrewer) 
library(tidytext) 
library(stopwords) 
library(stringr) 
library(tibble) 
library(tm) 
library(wordcloud) 
library(scales) 
library(plotrix) 
library(ggiraph) 

 

# Datos utilizados de cada Cliente 
Claro   <-  read.csv("Clientes_Claro.csv", stringsAsFactors = FALSE) 
Tigo     <- read.csv("Clientes_Tigo.csv", stringsAsFactors = FALSE) 
Movistar <- read.csv("Clientes_Movistar.csv", stringsAsFactors = FALSE) 
Virgin   <- read.csv("Clientes_Virgin.csv", stringsAsFactors = FALSE) 
Avantel  <- read.csv("Clientes_Avantel.csv", stringsAsFactors = FALSE) 

 

 

# Separación de la variable Created 
Info_Claro <- data.frame(do.call('rbind',strsplit(as.character(Claro$created)," ",fixed=TRUE))) 

  

# separación de la hora en el campo de la fecha 
horas_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X2),":",fixed=TRUE))) 

  

# Separación Fecha 
Fecha_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X1),"-",fixed=TRUE))) 

 

# Separaciñn de la variable Status Source 
Info_Claro_1  <- data.frame(do.call('rbind',strsplit(as.character(Claro$statusSource),">",fixed=TRUE))) 
Info_Claro_2  <- data.frame(do.call('rbind',strsplit(as.character(Claro$statusSource),"<",fixed=TRUE))) 
Info_Claro_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro_1$X2),"<",fixed=TRUE))) 

  

Sep_horas_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X2),":",fixed=TRUE))) 

 
# Data Frame Final con las variables a utilizar en el conjunto Cliente Claro 
Cliente_Claro <- data.frame(Claro$text, Fecha_Claro, Sep_horas_Claro$X1, Info_Claro_3$X1, Claro$retweetCount) 

  

Cliente_Claro$X2 <- case_when( 
                   Cliente_Claro$X2 == '01' ~ "Enero", 
                   Cliente_Claro$X2 == '02' ~ "Febrero", 
                   Cliente_Claro$X2 == '03' ~ "Marzo", 
                   Cliente_Claro$X2 == '04' ~ "Abril", 
                   Cliente_Claro$X2 == '05' ~ "Mayo", 
                   Cliente_Claro$X2 == '06' ~ "Junio", 
                   Cliente_Claro$X2 == '07' ~ "Julio", 
                   Cliente_Claro$X2 == '08' ~ "Agosto", 
                   Cliente_Claro$X2 == '09' ~ "Septiembre", 
                   Cliente_Claro$X2 == '10' ~ "Octubre", 
                   Cliente_Claro$X2 == '11' ~ "Noviembre", 
                   Cliente_Claro$X2 == '12' ~ "Diciembre", 
                  TRUE ~ as.character(Cliente_Claro$X2)) 

  

  

# Nueva lectura 

Claro   <-  read.csv("Clientes_Claro.csv", stringsAsFactors = FALSE) 
Claro   <-  data.frame(Claro, Milabel= "Clientes_ClaroColombia") 

Fusion_Clientes_Claro <- data.frame(Claro$Milabel,Fecha_Claro, Sep_horas_Claro$X1,Claro$created) 
names(Fusion_Clientes_Claro)[1] <-"screen_name" 
names(Fusion_Clientes_Claro)[2] <-"year" 
names(Fusion_Clientes_Claro)[3] <-"month" 
names(Fusion_Clientes_Claro)[4] <-"day" 
names(Fusion_Clientes_Claro)[5] <-"hour" 
names(Fusion_Clientes_Claro)[6] <-"fecha" 

 

# Separaciñn de la variable Created 

Info_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Tigo$created)," ",fixed=TRUE))) 

# Separacion de la hora en el campo de la fecha 
horas_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X2),":",fixed=TRUE))) 

# Separaciñn Fecha 
Fecha_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X1),"-",fixed=TRUE))) 


# Separaciñn de la variable Status Source 
Info_Tigo_1  <- data.frame(do.call('rbind',strsplit(as.character(Tigo$statusSource),">",fixed=TRUE))) 
Info_Tigo_2  <- data.frame(do.call('rbind',strsplit(as.character(Tigo$statusSource),"<",fixed=TRUE))) 
Info_Tigo_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo_1$X2),"<",fixed=TRUE))) 

Sep_horas_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X2),":",fixed=TRUE))) 

 

# Data Frame Final con las variables a utilizar en el conjunto Cliente Tigo 
Cliente_Tigo <- data.frame(Tigo$text, Fecha_Tigo, Sep_horas_Tigo$X1, Info_Tigo_3$X1, Tigo$retweetCount) 

Cliente_Tigo$X2 <- case_when( 
                   Cliente_Tigo$X2 == '01' ~ "Enero", 
                   Cliente_Tigo$X2 == '02' ~ "Febrero", 
                   Cliente_Tigo$X2 == '03' ~ "Marzo", 
                   Cliente_Tigo$X2 == '04' ~ "Abril", 
                   Cliente_Tigo$X2 == '05' ~ "Mayo", 
                   Cliente_Tigo$X2 == '06' ~ "Junio", 
                   Cliente_Tigo$X2 == '07' ~ "Julio", 
                   Cliente_Tigo$X2 == '08' ~ "Agosto", 
                   Cliente_Tigo$X2 == '09' ~ "Septiembre", 
                   Cliente_Tigo$X2 == '10' ~ "Octubre", 
                   Cliente_Tigo$X2 == '11' ~ "Noviembre", 
                   Cliente_Tigo$X2 == '12' ~ "Diciembre", 
                  TRUE ~ as.character(Cliente_Tigo$X2)) 

  

# Nueva lectura 

Tigo   <-  read.csv("Clientes_Tigo.csv", stringsAsFactors = FALSE) 
Tigo   <-  data.frame(Tigo, Milabel= "Clientes_Tigo_Colombia") 

Fusion_Clientes_Tigo <- data.frame(Tigo$Milabel,Fecha_Tigo, Sep_horas_Tigo$X1,Tigo$created) 
names(Fusion_Clientes_Tigo)[1] <-"screen_name" 
names(Fusion_Clientes_Tigo)[2] <-"year" 
names(Fusion_Clientes_Tigo)[3] <-"month" 
names(Fusion_Clientes_Tigo)[4] <-"day" 
names(Fusion_Clientes_Tigo)[5] <-"hour" 
names(Fusion_Clientes_Tigo)[6] <-"fecha" 

# Separaciñn de la variable Created 
Info_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Movistar$created)," ",fixed=TRUE))) 

# Separacion de la hora en el campo de la fecha 

horas_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X2),":",fixed=TRUE))) 

# Separaciñn Fecha 
Fecha_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X1),"-",fixed=TRUE))) 

# Separaciñn de la variable Status Source 
Info_Movistar_1  <- data.frame(do.call('rbind',strsplit(as.character(Movistar$statusSource),">",fixed=TRUE))) 
Info_Movistar_2  <- data.frame(do.call('rbind',strsplit(as.character(Movistar$statusSource),"<",fixed=TRUE))) 
Info_Movistar_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar_1$X2),"<",fixed=TRUE))) 

Sep_horas_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X2),":",fixed=TRUE))) 

# Data Frame Cliente Movistar 
Cliente_Movistar <- data.frame(Movistar$text, Fecha_Movistar, Sep_horas_Movistar$X1, Info_Movistar_3$X1, Movistar$retweetCount) 

# Se eliminan filas de la semana del 7 al 17 de Noviembre de 2018 
Cliente_Movistar <- Cliente_Movistar[-grep("07/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("08/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("09/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("10/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("11/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("12/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("13/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("14/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("15/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("16/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("17/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("18/11/2018",Cliente_Movistar$X1),] 

Cliente_Movistar$X2 <- case_when( 
                   Cliente_Movistar$X2 == '01' ~ "Enero", 
                   Cliente_Movistar$X2 == '02' ~ "Febrero", 
                   Cliente_Movistar$X2 == '03' ~ "Marzo", 
                   Cliente_Movistar$X2 == '04' ~ "Abril", 
                   Cliente_Movistar$X2 == '05' ~ "Mayo", 
                   Cliente_Movistar$X2 == '06' ~ "Junio", 
                   Cliente_Movistar$X2 == '07' ~ "Julio", 
                   Cliente_Movistar$X2 == '08' ~ "Agosto", 
                   Cliente_Movistar$X2 == '09' ~ "Septiembre", 
                   Cliente_Movistar$X2 == '10' ~ "Octubre", 
                   Cliente_Movistar$X2 == '11' ~ "Noviembre", 
                   Cliente_Movistar$X2 == '12' ~ "Diciembre", 
                  TRUE ~ as.character(Cliente_Movistar$X2)) 

  

# Nueva lectura 
Movistar   <-  read.csv("Clientes_Movistar.csv", stringsAsFactors = FALSE) 
Movistar   <-  data.frame(Movistar, Milabel= "Clientes_MovistarCo") 
Fusion_Clientes_Movistar <- data.frame(Movistar$Milabel,Fecha_Movistar, Sep_horas_Movistar$X1,Movistar$created) 

names(Fusion_Clientes_Movistar)[1] <-"screen_name" 
names(Fusion_Clientes_Movistar)[2] <-"year" 
names(Fusion_Clientes_Movistar)[3] <-"month" 
names(Fusion_Clientes_Movistar)[4] <-"day" 
names(Fusion_Clientes_Movistar)[5] <-"hour" 
names(Fusion_Clientes_Movistar)[6] <-"fecha" 

#Uniendo los data frames con merge-----------------------------------------------------------
Fusion_Clientes_ClaroMovistar  <- rbind(Fusion_Clientes_Claro,Fusion_Clientes_Movistar) 
Fusion_Total_Clientes          <- rbind(Fusion_Clientes_ClaroMovistar,Fusion_Clientes_Tigo) 
#-------------------------------------------------------------------------------------------

Fusion_Total_Clientes$hour <- as.numeric(Fusion_Total_Clientes$hour) 

Fusion_Total_Clientes$hour <- case_when( 
                              Fusion_Total_Clientes$hour == 1  ~ 0, 
                              Fusion_Total_Clientes$hour == 2  ~ 1, 
                              Fusion_Total_Clientes$hour == 3  ~ 2, 
                              Fusion_Total_Clientes$hour == 4  ~ 3, 
                              Fusion_Total_Clientes$hour == 5  ~ 4, 
                              Fusion_Total_Clientes$hour == 6  ~ 5, 
                              Fusion_Total_Clientes$hour == 7  ~ 6, 
                              Fusion_Total_Clientes$hour == 8  ~ 7, 
                              Fusion_Total_Clientes$hour == 9  ~ 8, 
                              Fusion_Total_Clientes$hour == 10 ~ 9, 
                              Fusion_Total_Clientes$hour == 11 ~ 10, 
                              Fusion_Total_Clientes$hour == 12 ~ 11, 
                              Fusion_Total_Clientes$hour == 13 ~ 12, 
                              Fusion_Total_Clientes$hour == 14 ~ 13, 
                              Fusion_Total_Clientes$hour == 15 ~ 14, 
                              Fusion_Total_Clientes$hour == 16 ~ 15, 
                              Fusion_Total_Clientes$hour == 17 ~ 16, 
                              Fusion_Total_Clientes$hour == 18 ~ 17, 
                              Fusion_Total_Clientes$hour == 19 ~ 18, 
                              Fusion_Total_Clientes$hour == 20 ~ 19, 
                              Fusion_Total_Clientes$hour == 21 ~ 20, 
                              Fusion_Total_Clientes$hour == 22 ~ 21, 
                              Fusion_Total_Clientes$hour == 23 ~ 22, 
                              Fusion_Total_Clientes$hour == 24 ~ 23, 
                              TRUE ~ as.numeric(Fusion_Total_Clientes$hour)) 

ggplot(Fusion_Total_Clientes, aes(x = as.numeric(Fusion_Total_Clientes$hour), fill = Fusion_Total_Clientes$screen_name)) + 
  geom_histogram(position = "identity", bins = 20, show.legend = FALSE) + 
  labs(x = "Hora de publicación", y = "Número de tweets") + 
  facet_wrap(~ Fusion_Total_Clientes$screen_name, ncol = 1) + 
  theme_bw() + 
  theme(axis.text.x = element_text(angle = 90)) + 
  scale_fill_brewer(palette = "Set1")+ 
  coord_flip()+ 
  xlim(0,25) 
@
\caption {Horas de publicación de tweets clientes Claro, Movistar y Tigo} 
\label{fig:horasC} 
\end{figure}


\begin{figure}[H] 
\centering 
<<fig=TRUE,warning=FALSE,message=FALSE,echo=FALSE,results='hide', fig.height=2.5,fig.width=5>>=
# Configuracion del directorio de trabajo 

setwd("C:/Users/josen/OneDrive/Documentos/RTesis/VERSION FINAL CLIENTES") 
# Librerias utilizadas en el proceso 
library(tidyr) 
library(dplyr) 
library(readxl) 
library(ggplot2) 
library(plotly) 
library(wesanderson) 
library(RColorBrewer) 
library(tidytext) 
library(stopwords) 
library(stringr) 
library(tibble) 
library(tm) 
library(wordcloud) 
library(scales) 
library(plotrix) 
library(ggiraph) 

 

# Datos utilizados de cada Cliente 
Claro   <-  read.csv("Clientes_Claro.csv", stringsAsFactors = FALSE) 
Tigo     <- read.csv("Clientes_Tigo.csv", stringsAsFactors = FALSE) 
Movistar <- read.csv("Clientes_Movistar.csv", stringsAsFactors = FALSE) 
Virgin   <- read.csv("Clientes_Virgin.csv", stringsAsFactors = FALSE) 
Avantel  <- read.csv("Clientes_Avantel.csv", stringsAsFactors = FALSE) 

 

 

# Separación de la variable Created 
Info_Claro <- data.frame(do.call('rbind',strsplit(as.character(Claro$created)," ",fixed=TRUE))) 

  

# separación de la hora en el campo de la fecha 
horas_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X2),":",fixed=TRUE))) 

  

# Separación Fecha 
Fecha_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X1),"-",fixed=TRUE))) 

 

# Separaciñn de la variable Status Source 
Info_Claro_1  <- data.frame(do.call('rbind',strsplit(as.character(Claro$statusSource),">",fixed=TRUE))) 
Info_Claro_2  <- data.frame(do.call('rbind',strsplit(as.character(Claro$statusSource),"<",fixed=TRUE))) 
Info_Claro_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro_1$X2),"<",fixed=TRUE))) 

  

Sep_horas_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X2),":",fixed=TRUE))) 

 
# Data Frame Final con las variables a utilizar en el conjunto Cliente Claro 
Cliente_Claro <- data.frame(Claro$text, Fecha_Claro, Sep_horas_Claro$X1, Info_Claro_3$X1, Claro$retweetCount) 

  

Cliente_Claro$X2 <- case_when( 
                   Cliente_Claro$X2 == '01' ~ "Enero", 
                   Cliente_Claro$X2 == '02' ~ "Febrero", 
                   Cliente_Claro$X2 == '03' ~ "Marzo", 
                   Cliente_Claro$X2 == '04' ~ "Abril", 
                   Cliente_Claro$X2 == '05' ~ "Mayo", 
                   Cliente_Claro$X2 == '06' ~ "Junio", 
                   Cliente_Claro$X2 == '07' ~ "Julio", 
                   Cliente_Claro$X2 == '08' ~ "Agosto", 
                   Cliente_Claro$X2 == '09' ~ "Septiembre", 
                   Cliente_Claro$X2 == '10' ~ "Octubre", 
                   Cliente_Claro$X2 == '11' ~ "Noviembre", 
                   Cliente_Claro$X2 == '12' ~ "Diciembre", 
                  TRUE ~ as.character(Cliente_Claro$X2)) 

  

  

# Nueva lectura 

Claro   <-  read.csv("Clientes_Claro.csv", stringsAsFactors = FALSE) 
Claro   <-  data.frame(Claro, Milabel= "Clientes_ClaroColombia") 

Fusion_Clientes_Claro <- data.frame(Claro$Milabel,Fecha_Claro, Sep_horas_Claro$X1,Claro$created) 
names(Fusion_Clientes_Claro)[1] <-"screen_name" 
names(Fusion_Clientes_Claro)[2] <-"year" 
names(Fusion_Clientes_Claro)[3] <-"month" 
names(Fusion_Clientes_Claro)[4] <-"day" 
names(Fusion_Clientes_Claro)[5] <-"hour" 
names(Fusion_Clientes_Claro)[6] <-"fecha" 

 

# Separaciñn de la variable Created 

Info_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Tigo$created)," ",fixed=TRUE))) 

# Separacion de la hora en el campo de la fecha 
horas_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X2),":",fixed=TRUE))) 

# Separaciñn Fecha 
Fecha_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X1),"-",fixed=TRUE))) 


# Separaciñn de la variable Status Source 
Info_Tigo_1  <- data.frame(do.call('rbind',strsplit(as.character(Tigo$statusSource),">",fixed=TRUE))) 
Info_Tigo_2  <- data.frame(do.call('rbind',strsplit(as.character(Tigo$statusSource),"<",fixed=TRUE))) 
Info_Tigo_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo_1$X2),"<",fixed=TRUE))) 

Sep_horas_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X2),":",fixed=TRUE))) 

 

# Data Frame Final con las variables a utilizar en el conjunto Cliente Tigo 
Cliente_Tigo <- data.frame(Tigo$text, Fecha_Tigo, Sep_horas_Tigo$X1, Info_Tigo_3$X1, Tigo$retweetCount) 

Cliente_Tigo$X2 <- case_when( 
                   Cliente_Tigo$X2 == '01' ~ "Enero", 
                   Cliente_Tigo$X2 == '02' ~ "Febrero", 
                   Cliente_Tigo$X2 == '03' ~ "Marzo", 
                   Cliente_Tigo$X2 == '04' ~ "Abril", 
                   Cliente_Tigo$X2 == '05' ~ "Mayo", 
                   Cliente_Tigo$X2 == '06' ~ "Junio", 
                   Cliente_Tigo$X2 == '07' ~ "Julio", 
                   Cliente_Tigo$X2 == '08' ~ "Agosto", 
                   Cliente_Tigo$X2 == '09' ~ "Septiembre", 
                   Cliente_Tigo$X2 == '10' ~ "Octubre", 
                   Cliente_Tigo$X2 == '11' ~ "Noviembre", 
                   Cliente_Tigo$X2 == '12' ~ "Diciembre", 
                  TRUE ~ as.character(Cliente_Tigo$X2)) 

  

# Nueva lectura 

Tigo   <-  read.csv("Clientes_Tigo.csv", stringsAsFactors = FALSE) 
Tigo   <-  data.frame(Tigo, Milabel= "Clientes_Tigo_Colombia") 

Fusion_Clientes_Tigo <- data.frame(Tigo$Milabel,Fecha_Tigo, Sep_horas_Tigo$X1,Tigo$created) 
names(Fusion_Clientes_Tigo)[1] <-"screen_name" 
names(Fusion_Clientes_Tigo)[2] <-"year" 
names(Fusion_Clientes_Tigo)[3] <-"month" 
names(Fusion_Clientes_Tigo)[4] <-"day" 
names(Fusion_Clientes_Tigo)[5] <-"hour" 
names(Fusion_Clientes_Tigo)[6] <-"fecha" 

# Separaciñn de la variable Created 
Info_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Movistar$created)," ",fixed=TRUE))) 

# Separacion de la hora en el campo de la fecha 

horas_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X2),":",fixed=TRUE))) 

# Separaciñn Fecha 
Fecha_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X1),"-",fixed=TRUE))) 

# Separaciñn de la variable Status Source 
Info_Movistar_1  <- data.frame(do.call('rbind',strsplit(as.character(Movistar$statusSource),">",fixed=TRUE))) 
Info_Movistar_2  <- data.frame(do.call('rbind',strsplit(as.character(Movistar$statusSource),"<",fixed=TRUE))) 
Info_Movistar_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar_1$X2),"<",fixed=TRUE))) 

Sep_horas_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X2),":",fixed=TRUE))) 

# Data Frame Cliente Movistar 
Cliente_Movistar <- data.frame(Movistar$text, Fecha_Movistar, Sep_horas_Movistar$X1, Info_Movistar_3$X1, Movistar$retweetCount) 

# Se eliminan filas de la semana del 7 al 17 de Noviembre de 2018 
Cliente_Movistar <- Cliente_Movistar[-grep("07/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("08/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("09/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("10/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("11/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("12/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("13/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("14/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("15/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("16/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("17/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("18/11/2018",Cliente_Movistar$X1),] 

Cliente_Movistar$X2 <- case_when( 
                   Cliente_Movistar$X2 == '01' ~ "Enero", 
                   Cliente_Movistar$X2 == '02' ~ "Febrero", 
                   Cliente_Movistar$X2 == '03' ~ "Marzo", 
                   Cliente_Movistar$X2 == '04' ~ "Abril", 
                   Cliente_Movistar$X2 == '05' ~ "Mayo", 
                   Cliente_Movistar$X2 == '06' ~ "Junio", 
                   Cliente_Movistar$X2 == '07' ~ "Julio", 
                   Cliente_Movistar$X2 == '08' ~ "Agosto", 
                   Cliente_Movistar$X2 == '09' ~ "Septiembre", 
                   Cliente_Movistar$X2 == '10' ~ "Octubre", 
                   Cliente_Movistar$X2 == '11' ~ "Noviembre", 
                   Cliente_Movistar$X2 == '12' ~ "Diciembre", 
                  TRUE ~ as.character(Cliente_Movistar$X2)) 

  

# Nueva lectura 
Movistar   <-  read.csv("Clientes_Movistar.csv", stringsAsFactors = FALSE) 
Movistar   <-  data.frame(Movistar, Milabel= "Clientes_MovistarCo") 
Fusion_Clientes_Movistar <- data.frame(Movistar$Milabel,Fecha_Movistar, Sep_horas_Movistar$X1,Movistar$created) 

names(Fusion_Clientes_Movistar)[1] <-"screen_name" 
names(Fusion_Clientes_Movistar)[2] <-"year" 
names(Fusion_Clientes_Movistar)[3] <-"month" 
names(Fusion_Clientes_Movistar)[4] <-"day" 
names(Fusion_Clientes_Movistar)[5] <-"hour" 
names(Fusion_Clientes_Movistar)[6] <-"fecha" 

#Uniendo los data frames con merge-----------------------------------------------------------
Fusion_Clientes_ClaroMovistar  <- rbind(Fusion_Clientes_Claro,Fusion_Clientes_Movistar) 
Fusion_Total_Clientes          <- rbind(Fusion_Clientes_ClaroMovistar,Fusion_Clientes_Tigo) 
#--------------------------------------------------------------------------------------------

Cliente_Claro <- data.frame(Cliente_Claro, Claro$screenName) 

# Clientes con respuestas mayores a 125 
Top_Clientes_C <- Cliente_Claro %>% 
  count(Claro.screenName, sort = TRUE) %>% 
  filter(n > 160) %>% 
  mutate(Claro.screenName = reorder(Claro.screenName, n)) %>% 
  ggplot(aes(Claro.screenName, n, fill = Claro.screenName)) + 
  geom_col() +
  geom_bar(stat = "identity", width = 0.9)+ 
  theme(panel.background = element_rect(fill = "white"), plot.title = element_text(hjust = 0.5)) + 
  labs(title = "Top de clientes destacados \n Claro, Movistar y Tigo", 
       x = NULL, y = "Cantidad tweets Claro")+ 
  theme (plot.title = element_text(size=rel(1.3), #Tamaño de la letra del título 
                                  vjust=2, #Justificación vertical, para separarlo del gráfico 
                                  face="plain", #Letra negrilla. Otras posibilidades "plain", "italic", "bold" y "bold.italic" 
                                  color="black", #Color del texto 
                                  lineheight=1.5))+ 
  coord_flip()+ 
  scale_fill_brewer(palette = "Reds") 
Top_Clientes_C 

# Clientes con respuestas mayores a 80 
Top_Clientes_M <- Movistar%>% 
  count(screenName, sort = TRUE) %>% 
  filter(n > 205) %>% 
  mutate(screenName = reorder(screenName, n)) %>% 
  ggplot(aes(screenName, n, fill = screenName)) + 
  geom_col() + 
  geom_bar(stat = "identity", width = 0.9)+ 
  theme(panel.background = element_rect(fill = "white"), plot.title = element_text(hjust = 0.5)) + 
  labs(x = NULL, y = "Cantidad tweets Movistar")+ 
  theme (plot.title = element_text(size=rel(1.3), #Tamaño de la letra del título 
                                  vjust=2, #Justificación vertical, para separarlo del gráfico 
                                  face="plain", #Letra negrilla. Otras posibilidades "plain", "italic", "bold" y "bold.italic" 
                                  color="black", #Color del texto 
                                  lineheight=1.5))+ 
  coord_flip()+ 
  scale_fill_brewer(palette = "Greens") 
Top_Clientes_M 

Cliente_Tigo <- data.frame(Cliente_Tigo, Tigo$screenName) 

# Clientes con respuestas mayores a 76 

Top_Clientes_T <- Cliente_Tigo%>% 
  count(Tigo.screenName, sort = TRUE) %>% 
  filter(n > 100) %>% 
  mutate(Tigo.screenName = reorder(Tigo.screenName, n)) %>% 
  ggplot(aes(Tigo.screenName, n, fill = Tigo.screenName)) + 
  geom_col() + 
  geom_bar(stat = "identity", width = 0.9)+ 
  theme(panel.background = element_rect(fill = "white"), plot.title = element_text(hjust = 0.5)) + 
  labs(x = NULL, y = "Cantidad tweets Tigo")+ 
  theme (plot.title = element_text(size=rel(1.3), #Tamaño de la letra del título 
                                  vjust=2, #Justificación vertical, para separarlo del gráfico 
                                  face="plain", #Letra negrilla. Otras posibilidades "plain", "italic", "bold" y "bold.italic" 
                                  color="black", #Color del texto 
                                  lineheight=1.5))+ 
  coord_flip()+ 
  scale_fill_brewer(palette = "PuBu") 

Top_Clientes_T 
 
@
\caption {Top de clientes destacados Claro, Movistar y Tigo} 
\label{fig:Top} 
\end{figure}

Una exploración más detallada de los clientes asociados a cada empresa condujo a la elaboración de la figura \ref{fig:Top}, la cual permite visualizar las cuentas de las entidades o personas que están en constante interacción con las empresas en cuestión, es decir, cuentas de Twitter que responden ya sea de manera negativa, neutra o positiva al contenido publicado por estas empresas. Para la empresa Claro las cuentas con mayor pronunciación sobre sus publicaciones son: @ClaroTeAyuda, @CRCteresponde (cuenta de la Comisión de Regulación de Comunicaciones), @PSilvar, @WRadioColombia, @Avantelsas y @Mameadas, lo cual significa que para Claro son más las entidades que se encuentran al tanto de sus publicaciones que personas mencionando sus contenidos. Por otro lado, Movistar presenta a @LarryGM30, @jesuspelufo20, @TelefonicaCol (Perfil institucional de Telefónica Movistar Colombia), @AlvaroLinares y @CRCteresponde, como las cuentas más destacadas, indicando un caso contrario al presentando por Claro. Para Tigo @Cerochanchullos, @IngricaorI, @ArgaDigitalM, @CRCteresponde, @ClaroTeAyuda y @Avantelsas, son las cuentas con mayor interacción con esta empresa. Para las tres empresas en cuestión, se observa la presencia destacada en Twitter de La Comisión de Regulación de Comunicaciones (CRC), factor que es favorable para la protección de los derechos de los usuarios. Cabe acalarar que de acuerdo a lo recopilado en los tweets, los clientes hacen el llamado de la CRC para que les ayuden a agilizar el proceso de atención y solución de inconformidades, además, de hacer pública la atención prestada por parte de los operadores telefónicos.\\

Un aspecto importante relacionado con el análisis de los clientes es el medio tecnológico utilizado para publicar los tweets. La figura \ref{fig:MediosC} permite observar que el medio más usado por los clientes de Claro, Movistar y Tigo para compartir los tweets es a través de dispositivos Android, dado que este sistema es mayormente usado por las marcas de teléfonos en Colombia, lo que explica la posición dominante. Seguido de los dispositivos con sistema operativo móvil iOS, el cual es usado por los dispositivos iPhone. Por último, se encuentra Twitter Web Client, la cual es una lista de aplicaciones y servicios de Twitter. Estos servicios y aplicaciones están diseñados para trabajar o mejorar el servicio de microblogging Twitter. Están perfilados con varios objetivos: muchos apuntan a mejorar la funcionalidad de Twitter, mientras que otros se proponen hacer el servicio más accesible, particularmente desde otros dispositivos. Por último, Twitter Web App la cual es un complemento de Chrome, que permite usar Twitter desde el escritorio con un aspecto similar a la aplicación móvil. Esta aplicación permite revisar los mensajes, videos o fotos de Twitter directamente desde la computadora personal, dicho de otro modo, permite a los usuarios disfrutar de todas las características de la aplicación móvil de Twitter en el escritorio. 


\begin{figure}[H] 
\centering 
<<fig=TRUE,warning=FALSE,message=FALSE,echo=FALSE,results='hide', fig.height=2.5,fig.width=7>>=
# Configuracion del directorio de trabajo 

setwd("C:/Users/josen/OneDrive/Documentos/RTesis/VERSION FINAL CLIENTES") 
# Librerias utilizadas en el proceso 
library(tidyr) 
library(dplyr) 
library(readxl) 
library(ggplot2) 
library(plotly) 
library(wesanderson) 
library(RColorBrewer) 
library(tidytext) 
library(stopwords) 
library(stringr) 
library(tibble) 
library(tm) 
library(wordcloud) 
library(scales) 
library(plotrix) 
library(ggiraph) 

 

# Datos utilizados de cada Cliente 
Claro   <-  read.csv("Clientes_Claro.csv", stringsAsFactors = FALSE) 
Tigo     <- read.csv("Clientes_Tigo.csv", stringsAsFactors = FALSE) 
Movistar <- read.csv("Clientes_Movistar.csv", stringsAsFactors = FALSE) 
Virgin   <- read.csv("Clientes_Virgin.csv", stringsAsFactors = FALSE) 
Avantel  <- read.csv("Clientes_Avantel.csv", stringsAsFactors = FALSE) 

 

 

# Separación de la variable Created 
Info_Claro <- data.frame(do.call('rbind',strsplit(as.character(Claro$created)," ",fixed=TRUE))) 

  

# separación de la hora en el campo de la fecha 
horas_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X2),":",fixed=TRUE))) 

  

# Separación Fecha 
Fecha_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X1),"-",fixed=TRUE))) 

 

# Separaciñn de la variable Status Source 
Info_Claro_1  <- data.frame(do.call('rbind',strsplit(as.character(Claro$statusSource),">",fixed=TRUE))) 
Info_Claro_2  <- data.frame(do.call('rbind',strsplit(as.character(Claro$statusSource),"<",fixed=TRUE))) 
Info_Claro_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro_1$X2),"<",fixed=TRUE))) 

  

Sep_horas_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X2),":",fixed=TRUE))) 

 
# Data Frame Final con las variables a utilizar en el conjunto Cliente Claro 
Cliente_Claro <- data.frame(Claro$text, Fecha_Claro, Sep_horas_Claro$X1, Info_Claro_3$X1, Claro$retweetCount) 

  

Cliente_Claro$X2 <- case_when( 
                   Cliente_Claro$X2 == '01' ~ "Enero", 
                   Cliente_Claro$X2 == '02' ~ "Febrero", 
                   Cliente_Claro$X2 == '03' ~ "Marzo", 
                   Cliente_Claro$X2 == '04' ~ "Abril", 
                   Cliente_Claro$X2 == '05' ~ "Mayo", 
                   Cliente_Claro$X2 == '06' ~ "Junio", 
                   Cliente_Claro$X2 == '07' ~ "Julio", 
                   Cliente_Claro$X2 == '08' ~ "Agosto", 
                   Cliente_Claro$X2 == '09' ~ "Septiembre", 
                   Cliente_Claro$X2 == '10' ~ "Octubre", 
                   Cliente_Claro$X2 == '11' ~ "Noviembre", 
                   Cliente_Claro$X2 == '12' ~ "Diciembre", 
                  TRUE ~ as.character(Cliente_Claro$X2)) 

  

  

# Nueva lectura 

Claro   <-  read.csv("Clientes_Claro.csv", stringsAsFactors = FALSE) 
Claro   <-  data.frame(Claro, Milabel= "Clientes_ClaroColombia") 

Fusion_Clientes_Claro <- data.frame(Claro$Milabel,Fecha_Claro, Sep_horas_Claro$X1,Claro$created) 
names(Fusion_Clientes_Claro)[1] <-"screen_name" 
names(Fusion_Clientes_Claro)[2] <-"year" 
names(Fusion_Clientes_Claro)[3] <-"month" 
names(Fusion_Clientes_Claro)[4] <-"day" 
names(Fusion_Clientes_Claro)[5] <-"hour" 
names(Fusion_Clientes_Claro)[6] <-"fecha" 

 

# Separaciñn de la variable Created 

Info_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Tigo$created)," ",fixed=TRUE))) 

# Separacion de la hora en el campo de la fecha 
horas_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X2),":",fixed=TRUE))) 

# Separaciñn Fecha 
Fecha_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X1),"-",fixed=TRUE))) 


# Separaciñn de la variable Status Source 
Info_Tigo_1  <- data.frame(do.call('rbind',strsplit(as.character(Tigo$statusSource),">",fixed=TRUE))) 
Info_Tigo_2  <- data.frame(do.call('rbind',strsplit(as.character(Tigo$statusSource),"<",fixed=TRUE))) 
Info_Tigo_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo_1$X2),"<",fixed=TRUE))) 

Sep_horas_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X2),":",fixed=TRUE))) 

 

# Data Frame Final con las variables a utilizar en el conjunto Cliente Tigo 
Cliente_Tigo <- data.frame(Tigo$text, Fecha_Tigo, Sep_horas_Tigo$X1, Info_Tigo_3$X1, Tigo$retweetCount) 

Cliente_Tigo$X2 <- case_when( 
                   Cliente_Tigo$X2 == '01' ~ "Enero", 
                   Cliente_Tigo$X2 == '02' ~ "Febrero", 
                   Cliente_Tigo$X2 == '03' ~ "Marzo", 
                   Cliente_Tigo$X2 == '04' ~ "Abril", 
                   Cliente_Tigo$X2 == '05' ~ "Mayo", 
                   Cliente_Tigo$X2 == '06' ~ "Junio", 
                   Cliente_Tigo$X2 == '07' ~ "Julio", 
                   Cliente_Tigo$X2 == '08' ~ "Agosto", 
                   Cliente_Tigo$X2 == '09' ~ "Septiembre", 
                   Cliente_Tigo$X2 == '10' ~ "Octubre", 
                   Cliente_Tigo$X2 == '11' ~ "Noviembre", 
                   Cliente_Tigo$X2 == '12' ~ "Diciembre", 
                  TRUE ~ as.character(Cliente_Tigo$X2)) 

  

# Nueva lectura 

Tigo   <-  read.csv("Clientes_Tigo.csv", stringsAsFactors = FALSE) 
Tigo   <-  data.frame(Tigo, Milabel= "Clientes_Tigo_Colombia") 

Fusion_Clientes_Tigo <- data.frame(Tigo$Milabel,Fecha_Tigo, Sep_horas_Tigo$X1,Tigo$created) 
names(Fusion_Clientes_Tigo)[1] <-"screen_name" 
names(Fusion_Clientes_Tigo)[2] <-"year" 
names(Fusion_Clientes_Tigo)[3] <-"month" 
names(Fusion_Clientes_Tigo)[4] <-"day" 
names(Fusion_Clientes_Tigo)[5] <-"hour" 
names(Fusion_Clientes_Tigo)[6] <-"fecha" 

# Separaciñn de la variable Created 
Info_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Movistar$created)," ",fixed=TRUE))) 

# Separacion de la hora en el campo de la fecha 

horas_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X2),":",fixed=TRUE))) 

# Separaciñn Fecha 
Fecha_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X1),"-",fixed=TRUE))) 

# Separaciñn de la variable Status Source 
Info_Movistar_1  <- data.frame(do.call('rbind',strsplit(as.character(Movistar$statusSource),">",fixed=TRUE))) 
Info_Movistar_2  <- data.frame(do.call('rbind',strsplit(as.character(Movistar$statusSource),"<",fixed=TRUE))) 
Info_Movistar_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar_1$X2),"<",fixed=TRUE))) 

Sep_horas_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X2),":",fixed=TRUE))) 

# Data Frame Cliente Movistar 
Cliente_Movistar <- data.frame(Movistar$text, Fecha_Movistar, Sep_horas_Movistar$X1, Info_Movistar_3$X1, Movistar$retweetCount) 

# Se eliminan filas de la semana del 7 al 17 de Noviembre de 2018 
Cliente_Movistar <- Cliente_Movistar[-grep("07/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("08/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("09/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("10/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("11/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("12/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("13/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("14/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("15/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("16/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("17/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("18/11/2018",Cliente_Movistar$X1),] 

Cliente_Movistar$X2 <- case_when( 
                   Cliente_Movistar$X2 == '01' ~ "Enero", 
                   Cliente_Movistar$X2 == '02' ~ "Febrero", 
                   Cliente_Movistar$X2 == '03' ~ "Marzo", 
                   Cliente_Movistar$X2 == '04' ~ "Abril", 
                   Cliente_Movistar$X2 == '05' ~ "Mayo", 
                   Cliente_Movistar$X2 == '06' ~ "Junio", 
                   Cliente_Movistar$X2 == '07' ~ "Julio", 
                   Cliente_Movistar$X2 == '08' ~ "Agosto", 
                   Cliente_Movistar$X2 == '09' ~ "Septiembre", 
                   Cliente_Movistar$X2 == '10' ~ "Octubre", 
                   Cliente_Movistar$X2 == '11' ~ "Noviembre", 
                   Cliente_Movistar$X2 == '12' ~ "Diciembre", 
                  TRUE ~ as.character(Cliente_Movistar$X2)) 

  

# Nueva lectura 
Movistar   <-  read.csv("Clientes_Movistar.csv", stringsAsFactors = FALSE) 
Movistar   <-  data.frame(Movistar, Milabel= "Clientes_MovistarCo") 
Fusion_Clientes_Movistar <- data.frame(Movistar$Milabel,Fecha_Movistar, Sep_horas_Movistar$X1,Movistar$created) 

names(Fusion_Clientes_Movistar)[1] <-"screen_name" 
names(Fusion_Clientes_Movistar)[2] <-"year" 
names(Fusion_Clientes_Movistar)[3] <-"month" 
names(Fusion_Clientes_Movistar)[4] <-"day" 
names(Fusion_Clientes_Movistar)[5] <-"hour" 
names(Fusion_Clientes_Movistar)[6] <-"fecha" 

#Uniendo los data frames con merge-----------------------------------------------------------
Fusion_Clientes_ClaroMovistar  <- rbind(Fusion_Clientes_Claro,Fusion_Clientes_Movistar) 
Fusion_Total_Clientes          <- rbind(Fusion_Clientes_ClaroMovistar,Fusion_Clientes_Tigo) 
#--------------------------------------------------------------------------------------------

Cliente_Claro %>% 

  count(Info_Claro_3.X1, sort = TRUE) 

  

Info_Gestoras_C2 <- Cliente_Claro %>% 
  count(Info_Claro_3.X1, sort = TRUE) %>% 
  filter(n > 1031) %>% 
  mutate(Info_Claro_3.X1 = reorder(Info_Claro_3.X1, n)) %>% 
  ggplot(aes(Info_Claro_3.X1, n, fill = Info_Claro_3.X1)) + 
  geom_col() + 
  geom_bar(stat = "identity", width = 0.65)+ 
  theme(panel.background = element_rect(fill = "white"), plot.title = element_text(hjust = 0.5)) + 
  labs(title = "Medios tecnológicos utilizados para la publicación de tweets clientes", 
       x = NULL, y = "Claro") + 
  scale_fill_brewer(palette = "Reds") + 
  theme (plot.title = element_text(size=rel(1.3), #Tamaño de la letra del título 
                                  vjust=2, #Justificación vertical, para separarlo del gráfico 
                                  face="plain", #Letra negrilla. Otras posibilidades "plain", "italic", "bold" y "bold.italic" 
                                  color="black", #Color del texto 
                                  lineheight=1.5)) 


Info_Gestoras_C2 

Cliente_Movistar %>% 
  count(Info_Movistar_3.X1, sort = TRUE) 
Info_Gestoras_M2 <- Cliente_Movistar %>% 
  count(Info_Movistar_3.X1, sort = TRUE) %>% 
  filter(n > 1000) %>% 
  mutate(Info_Movistar_3.X1 = reorder(Info_Movistar_3.X1, n)) %>% 
  ggplot(aes(Info_Movistar_3.X1, n, fill = Info_Movistar_3.X1)) + 
  geom_col() + 
  geom_bar(stat = "identity", width = 0.65)+ 
  theme(panel.background = element_rect(fill = "white"), plot.title = element_text(hjust = 0.5)) + 
  labs(x = NULL, y = "Movistar") + 
  scale_fill_brewer(palette = "Greens") + 
  theme (plot.title = element_text(size=rel(1), #Tamaño de la letra del título 
                                  vjust=2, #Justificación vertical, para separarlo del gráfico 
                                  face="plain", #Letra negrilla. Otras posibilidades "plain", "italic", "bold" y "bold.italic" 
                                  color="black", #Color del texto 
                                  lineheight=1.5)) 

Info_Gestoras_M2 

Cliente_Tigo %>% 
  count(Info_Tigo_3.X1, sort = TRUE) 

Info_Gestoras_T2 <- Cliente_Tigo %>% 
  count(Info_Tigo_3.X1, sort = TRUE) %>% 
  filter(n > 1000) %>% 
  mutate(Info_Tigo_3.X1 = reorder(Info_Tigo_3.X1, n)) %>% 
  ggplot(aes(Info_Tigo_3.X1, n, fill = Info_Tigo_3.X1)) + 
  geom_col() + 
  geom_bar(stat = "identity", width = 0.75)+ 
  theme(panel.background = element_rect(fill = "white"), plot.title = element_text(hjust = 0.5)) + 
  labs(x = NULL, y = "Tigo") + 
  scale_fill_brewer(palette = "PuBu") + 
  theme (plot.title = element_text(size=rel(1), #Tamaño de la letra del título 
                                  vjust=2, #Justificación vertical, para separarlo del gráfico 
                                  face="plain", #Letra negrilla. Otras posibilidades "plain", "italic", "bold" y "bold.italic" 
                                  color="black", #Color del texto 
                                  lineheight=1.5)) 
Info_Gestoras_T2
@
\caption {Medios tecnológicos utilizados para la publicación de tweets clientes} 
\label{fig:MediosC} 
\end{figure}


\subsection{Resultados de la Minería de Texto bajo la metodología tidy Text}
En el siguiente apartado se analiza bajo la metodología de minería de texto \textit{tidy Text}  los conjuntos de datos para las empresas y clientes vinculados a estas compañias de telefonía. Además, se comparan los conjuntos de datos recolectados mediante un análisis de correlación; y mediante la función de análisis de sentimientos GetNRC se analizan los sentimientos percibidos para el conjunto de las empresas y sus respectivos clientes. Finalmente, se evaluan algunas métricas de desempeño enunciadas en el capítulo 2, sección 2.1.3, del método empleado, junto con sus representaciones visuales correspondientes.

\subsubsection{Limpieza y tokenización de textos \textit{Text}}
En las redes sociales los usuarios escriben de una manera no estructurada, poco formal y en ciertas ocasiones ambigua, lo que suele resultar en el uso abreviaturas, y signos de puntuación. Por esta razón, se procede a eliminar: Patrones no informativos (urls de páginas web), signos de puntuación, etiquetas HTML, Caracteres sueltos y Números, que impidan realizar un análisis de texto sin impurezas.

Mediante la siguiente sentencia de código se procedió a realizar la limpieza y tokenización de textos, se toma el desarrollado para la empresa Claro como ejemplo. Tokenizar consiste en dividir el texto en las unidades que lo conforman, unidad entendida como el elemento más sencillo con significado propio, en este caso, palabras.

<<warning=FALSE,message=FALSE,echo=TRUE,results='hide'>>=
#Convertir dataframe en Tibble 
Claro_tibble <- as.tibble(Empresa_Claro) 
#Cambio del nombre del atributo Text 
Claro = rename(Claro, Texto_A = text) 
#Tokenización y limpieza de las stop-words 
tidy_Claro <- Claro %>% unnest_tokens(word, Texto_A) %>% 
  anti_join(get_stopwords(language = "es", "stopwords-iso"))%>% ungroup() 
@

 Comunmente, la cantidad de palabras con mayor frecuencia corresponden a preposiciones, artículos, pronombres, en general, palabras que no aportan información relevante sobre el texto. Estas palabras se les conoce como \textit{stopwords}. Para cada idioma existen distintos conjuntos de stopwords, además, dependiendo del contexto, puede ser necesario modificar este conjunto. Para la eliminación de las denominadas \textit{Stop-Words}, aquellas que carecen de significado como artículos, pronombres, preposiciones, etc, se utilizó un conjunto en R de Stop-words llamado \textit{Stopwords-ISO}. Este conjunto se empleó debido a que según la literatura esta es la colección con mayor cantidad de palabras disponibles en distintos idiomas, para este caso, español.   

\subsubsection{Mineria de texto Empresas}

\begin{figure}[H] 
\centering
<<fig=TRUE,warning=FALSE,message=FALSE,echo=FALSE,results='hide', fig.height=2.5,fig.width=4.5>>=

# Configuración del directorio de trabajo
setwd("C:/Users/josen/OneDrive/Documentos/RTesis/VERSION FINAL EMPRESAS")
#Librerias utilizadas en el proceso
library(tidyr)
library(dplyr)
library(readxl)
library(ggplot2)
library(plotly)
library(wesanderson)
library(RColorBrewer)
library(tidytext)
library(stopwords)
library(stringr)
library(tibble)
library(tm)
library(wordcloud)
library(scales)
library(plotrix)
library(ggiraph)

#Datos utilizados de cada empresa
Claro   <-  read.csv("Claro.csv", stringsAsFactors = FALSE)
Tigo     <- read.csv("Tigo.csv", stringsAsFactors = FALSE)
Movistar <- read.csv("Movistar.csv", stringsAsFactors = FALSE)
Virgin   <- read.csv("Virgin.csv", stringsAsFactors = FALSE)
Avantel  <- read.csv("Avantel.csv", stringsAsFactors = FALSE)

#Separación de la variable Created
Info_Claro <- data.frame(do.call('rbind',strsplit(as.character(Claro$created)," ",fixed=TRUE)))

# separacion de la hora en el campo de la fecha
horas_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X2),":",fixed=TRUE)))

#Separación Fecha
Fecha_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X1),"-",fixed=TRUE)))

#Separación de la variable Status Source
Info_Claro_1  <- data.frame(do.call('rbind',strsplit(as.character(Claro$statusSource),">",fixed=TRUE)))
Info_Claro_2  <- data.frame(do.call('rbind',strsplit(as.character(Claro$statusSource),"<",fixed=TRUE)))
Info_Claro_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro_1$X2),"<",fixed=TRUE)))

Sep_horas_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X2),":",fixed=TRUE)))

#Data Frame Final con las variables a utilizar en el conjunto Empresa Claro

Empresa_Claro <- data.frame(Claro$text, Fecha_Claro, Sep_horas_Claro$X1, Info_Claro_3$X1, Claro$retweetCount)
Empresa_Claro$X2 <- as.character(Empresa_Claro$X2)

Empresa_Claro$X2 <- case_when(
                   Empresa_Claro$X2 == '01' ~ "Enero",
                   Empresa_Claro$X2 == '02' ~ "Febrero",
                   Empresa_Claro$X2 == '03' ~ "Marzo",
                   Empresa_Claro$X2 == '04' ~ "Abril",
                   Empresa_Claro$X2 == '05' ~ "Mayo",
                   Empresa_Claro$X2 == '06' ~ "Junio",
                   Empresa_Claro$X2 == '07' ~ "Julio",
                   Empresa_Claro$X2 == '08' ~ "Agosto",
                   Empresa_Claro$X2 == '09' ~ "Septiembre",
                   Empresa_Claro$X2 == '10' ~ "Octubre",
                   Empresa_Claro$X2 == '11' ~ "Noviembre",
                   Empresa_Claro$X2 == '12' ~ "Diciembre",
                  TRUE ~ as.character(Empresa_Claro$X2))

# Nueva lectura
Claro   <-  read.csv("Claro.csv", stringsAsFactors = FALSE)

Fusion_Empresas_Claro <- data.frame(Claro$screenName,Fecha_Claro, Sep_horas_Claro$X1,Claro$created, Claro$text)
names(Fusion_Empresas_Claro)[1] <-"screen_name"
names(Fusion_Empresas_Claro)[2] <-"year"
names(Fusion_Empresas_Claro)[3] <-"month"
names(Fusion_Empresas_Claro)[4] <-"day"
names(Fusion_Empresas_Claro)[5] <-"hour"
names(Fusion_Empresas_Claro)[6] <-"fecha"
names(Fusion_Empresas_Claro)[7] <-"Text"

#Separación de la variable Created
Info_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Tigo$created)," ",fixed=TRUE)))

#Separacion de la hora en el campo de la fecha
horas_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X2),":",fixed=TRUE)))

#Separación Fecha
Fecha_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X1),"-",fixed=TRUE)))

#Separación de la variable Status Source
Info_Tigo_1  <- data.frame(do.call('rbind',strsplit(as.character(Tigo$statusSource),">",fixed=TRUE)))
Info_Tigo_2  <- data.frame(do.call('rbind',strsplit(as.character(Tigo$statusSource),"<",fixed=TRUE)))
Info_Tigo_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo_1$X2),"<",fixed=TRUE)))

Sep_horas_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X2),":",fixed=TRUE)))

# Data Frame Final con las variables a utilizar en el conjunto Empresa Tigo
Empresa_Tigo <- data.frame(Tigo$text, Fecha_Tigo, Sep_horas_Tigo$X1, Info_Tigo_3$X1, Tigo$retweetCount)
Empresa_Tigo$X2 <- case_when(
                   Empresa_Tigo$X2 == '01' ~ "Enero",
                   Empresa_Tigo$X2 == '02' ~ "Febrero",
                   Empresa_Tigo$X2 == '03' ~ "Marzo",
                   Empresa_Tigo$X2 == '04' ~ "Abril",
                   Empresa_Tigo$X2 == '05' ~ "Mayo",
                   Empresa_Tigo$X2 == '06' ~ "Junio",
                   Empresa_Tigo$X2 == '07' ~ "Julio",
                   Empresa_Tigo$X2 == '08' ~ "Agosto",
                   Empresa_Tigo$X2 == '09' ~ "Septiembre",
                   Empresa_Tigo$X2 == '10' ~ "Octubre",
                   Empresa_Tigo$X2 == '11' ~ "Noviembre",
                   Empresa_Tigo$X2 == '12' ~ "Diciembre",
                  TRUE ~ as.character(Empresa_Tigo$X2))

# Nueva lectura
Tigo   <-  read.csv("Tigo.csv", stringsAsFactors = FALSE)

Fusion_Empresas_Tigo <- data.frame(Tigo$screenName,Fecha_Tigo, Sep_horas_Tigo$X1,Tigo$created, Tigo$text)
names(Fusion_Empresas_Tigo)[1] <-"screen_name"
names(Fusion_Empresas_Tigo)[2] <-"year"
names(Fusion_Empresas_Tigo)[3] <-"month"
names(Fusion_Empresas_Tigo)[4] <-"day"
names(Fusion_Empresas_Tigo)[5] <-"hour"
names(Fusion_Empresas_Tigo)[6] <-"fecha"
names(Fusion_Empresas_Tigo)[7] <-"Text"

#Separación de la variable Created
Info_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Movistar$created)," ",fixed=TRUE)))

#Separacion de la hora en el campo de la fecha
horas_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X2),":",fixed=TRUE)))

#Separación Fecha
Fecha_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X1),"-",fixed=TRUE)))

#Separación de la variable Status Source
Info_Movistar_1  <- data.frame(do.call('rbind',strsplit(as.character(Movistar$statusSource),">",fixed=TRUE)))
Info_Movistar_2  <- data.frame(do.call('rbind',strsplit(as.character(Movistar$statusSource),"<",fixed=TRUE)))
Info_Movistar_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar_1$X2),"<",fixed=TRUE)))

Sep_horas_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X2),":",fixed=TRUE)))

#Data Frame Empresa Movistar
Empresa_Movistar <- data.frame(Movistar$text, Fecha_Movistar, Sep_horas_Movistar$X1, Info_Movistar_3$X1, Movistar$retweetCount)

Empresa_Movistar$X2 <- case_when(
                   Empresa_Movistar$X2 == '01' ~ "Enero",
                   Empresa_Movistar$X2 == '02' ~ "Febrero",
                   Empresa_Movistar$X2 == '03' ~ "Marzo",
                   Empresa_Movistar$X2 == '04' ~ "Abril",
                   Empresa_Movistar$X2 == '05' ~ "Mayo",
                   Empresa_Movistar$X2 == '06' ~ "Junio",
                   Empresa_Movistar$X2 == '07' ~ "Julio",
                   Empresa_Movistar$X2 == '08' ~ "Agosto",
                   Empresa_Movistar$X2 == '09' ~ "Septiembre",
                   Empresa_Movistar$X2 == '10' ~ "Octubre",
                   Empresa_Movistar$X2 == '11' ~ "Noviembre",
                   Empresa_Movistar$X2 == '12' ~ "Diciembre",
                  TRUE ~ as.character(Empresa_Movistar$X2))

# Nueva lectura
Movistar <- read.csv("Movistar.csv", stringsAsFactors = FALSE)

Fusion_Empresas_Movistar <- data.frame(Movistar$screenName,Fecha_Movistar, Sep_horas_Movistar$X1,Movistar$created, Movistar$text)
names(Fusion_Empresas_Movistar)[1] <-"screen_name"
names(Fusion_Empresas_Movistar)[2] <-"year"
names(Fusion_Empresas_Movistar)[3] <-"month"
names(Fusion_Empresas_Movistar)[4] <-"day"
names(Fusion_Empresas_Movistar)[5] <-"hour"
names(Fusion_Empresas_Movistar)[6] <-"fecha"
names(Fusion_Empresas_Movistar)[7] <-"Text"

# Uniendo los data frames con merge ---------------------------------------------
Fusion_ClaroMovistar  <- rbind(Fusion_Empresas_Claro,Fusion_Empresas_Movistar)
Fusion_Total          <- rbind(Fusion_ClaroMovistar,Fusion_Empresas_Tigo)
# -------------------------------------------------------------------------------

#Convertir dataframe Tigo en Tibble
Tigo_tibble <- as.tibble(Empresa_Tigo)

#Cambio del nombre del atributo Text
Tigo = rename(Tigo, Texto_A = text)

#Tokenización y limpieza de las stop-words
tidy_Tigo <- Tigo %>% unnest_tokens(word, Texto_A)%>% 
  anti_join(get_stopwords(language = "es", "stopwords-iso") ) %>% 
               ungroup()

#Convertir dataframe Movistar en Tibble
Movistar_tibble <- as.tibble(Empresa_Movistar)

#Cambio del nombre del atributo Text
Movistar = rename(Movistar, Texto_A = text)

#Tokenización y limpieza de las stop-words
tidy_Movistar <- Movistar %>% unnest_tokens(word, Texto_A)%>% 
  anti_join(get_stopwords(language = "es", "stopwords-iso") ) %>% 
               ungroup()

#Convertir dataframe Claro en Tibble
Claro_tibble <- as.tibble(Empresa_Claro)

#Cambio del nombre del atributo Text
Claro = rename(Claro, Texto_A = text)

#Tokenización y limpieza de las stop-words
tidy_Claro <- Claro %>% unnest_tokens(word, Texto_A)%>% 
  anti_join(get_stopwords(language = "es", "stopwords-iso") ) %>% 
               ungroup()

#Union por empresa y palabras
Fusion_tidyClaroMovistar  <- rbind(tidy_Claro,tidy_Movistar)
Fusion_Total_tidy         <- rbind(Fusion_tidyClaroMovistar, tidy_Tigo)

#Palabras recurrentes Claro
Palabras_Claro <- tidy_Claro %>%
  count(word, sort = TRUE) %>%
  filter(n > 217 & n < 305) %>%
  mutate(word = reorder(word,n)) %>%
  ggplot(aes(word,n)) +
  geom_col(fill = "firebrick2", width = 0.8) +
  coord_flip() +
  labs(title = "Palabras más recurrentes en las empresas \n Claro, Movistar y Tigo",
       x = NULL, y = "Claro") +
  theme(panel.background = element_rect(fill = "white"), plot.title = element_text(hjust = 0.5)) +
  theme (plot.title = element_text(size=rel(1.3), #Tamaño de la letra del título
                                  vjust=1, #Justificación vertical, para separarlo del gráfico
                                  face="plain", #Letra negrilla. Otras posibilidades "plain",                                                  "italic", "bold" y "bold.italic"
                                  color="black", #Color del texto
                                  lineheight=1.5))

Palabras_Claro

Palabras_Movistar <- tidy_Movistar %>%
  count(word, sort = TRUE) %>%
  filter(n > 8500) %>%
  mutate(word = reorder(word,n)) %>%
  ggplot(aes(word,n)) +
  geom_col(fill = "forestgreen", width = 0.8) +
  coord_flip() +
  labs(x = NULL, y = "Movistar") +
  theme(panel.background = element_rect(fill = "white"), plot.title = element_text(hjust = 0.5)) +
  theme (plot.title = element_text(size=rel(1.3), #Tamaño de la letra del título
                                  vjust=1, #Justificación vertical, para separarlo del gráfico
                                  face="plain", #Letra negrilla. Otras posibilidades "plain",                                                  "italic", "bold" y "bold.italic"
                                  color="black", #Color del texto
                                  lineheight=1.5)) 

Palabras_Movistar


#Palabras recurrentes Tigo
Palabras_Tigo <- tidy_Tigo %>%
  count(word, sort = TRUE) %>%
  filter(n > 4000) %>%
  mutate(word = reorder(word,n)) %>%
  ggplot(aes(word,n)) +
  geom_col(fill = "dodgerblue4", width = 0.8) +
  coord_flip() +
  labs(x = NULL, y = "Tigo") +
  theme(panel.background = element_rect(fill = "white"), plot.title = element_text(hjust = 0.5)) +
  theme (plot.title = element_text(size=rel(1.3), #Tamaño de la letra del título
                                  vjust=1, #Justificación vertical, para separarlo del gráfico
                                  face="plain", #Letra negrilla. Otras posibilidades "plain",                                                  "italic", "bold" y "bold.italic"
                                  color="black", #Color del texto
                                  lineheight=1.5)) +
  scale_fill_brewer(palette = "PuBu")

Palabras_Tigo
@
\caption {Palabras recurrentes en Claro, Movistar y Tigo} 
\label{fig:RecurrentesC} 
\end{figure} 


Para el análisis relacionado con la variable \textit{text} (Anexo II), conocer qué palabras son las más frecuentes dentro de las publicaciones de cada empresa resulta significativo, de esta forma se distinguen las unidades léxicas que usa con fecuencia cada empresa. Es importarte resaltar que algunos de los tokens identificados pertecen a \textit{emojis}, los cuales están expresados en el lenguaje Unicode, el cual será explicado en la sección 4.2.3.3 de este documento. Por ejemplo el código \textit{0001f449} pertenece al \textit{emoji} dorso de mano con
índice a la derecha. 

A través de la figura \ref{fig:RecurrentesC} se aprecia que para la empresa Claro el amplio uso de ideogramas o caracteres conocidos como \textit{emojis}, representando aproximadamente el 2\% de la información, los cuáles serán analizados, en la sección 4.2.3.3, posteriormente. De la misma forma, dentro de las palabras recurrentes de Claro se perciben el hola y conoce, ligadas con la invitación a los clientes para conocer sus productos y servicios. Algunas de las palabras recurrentes de Movistar son DM (Direct Message para la interacción por interno), información, placer, caso y saludos, las cuales se refieren al deseo por parte de la empresa por conocer el caso del cliente de manera más detallada por medio de un mensaje privado. Por último, Tigo, presenta palabras como esperamos, caso y preocupa asociadas a la preocupación por resolver las inquietudes de sus usuarios. Los resultados obtenidos anteriormente son objetivos dado que si se pone en contexto la actividad de los usuarios analizados, sus tweets están relacionados con atención al cliente, publicidad para la venta de productos y servicios o simplemente respuestas a casos asociados a sus servicios. 

\begin{figure}[H] 
\centering 
\includegraphics[width=1\textwidth]{figure/tecno.jpg}
\caption {Tecnología utilizada en diferentes horas del día}
\label{fig:PorcentualC} 
\end{figure}

Mediante la figura \ref{fig:PorcentualC} se observa la actividad conjunta de los clientes de las tres empresas en cuestión y el tipo de dispositivo tecnológico usado para compartir sus tweets. De forma específica se distingue como principal medio los dispositivos Android seguidos de los dispositivos iPhone, lo cual indica que los dispositivos móviles son los más usados por los clientes para compartir sus publicaciones. Sin embargo, hay clientes pendientes de Twitter no solo a través de sus dispositivos móviles sino por intermedio de la aplicación Twitter Web Client, diseñada para gestionar y controlar las cuentas de Twitter desde la computadora. Además, los datos de la figura permiten concluir que la frecuencia de publicación se incrementa a partir de las 8:00 p.m. hasta las 2:00 a.m. y la menor frecuencia se registra entre las 5:00 a.m. y las 8:00 a.m. 

Otra manera visual de representar las palabras más frecuentes que fueron mencionadas anteriormente es por medio de nubes de palabras (word clouds). En las figuras \ref{f:NC}, \ref{f:NM} y \ref{f:NT}, las palabras más significativas tienden a poseer mayor tamaño. En la nube de palabras de la empresa Movistar y en la nube de palabras de Tigo se observa una similitud en cuanto a las palabras que componen cada nube pues al parecer estas empresas tienen una estructura similar en la forma que se comunican con sus clientes. 


\begin{figure}[H] 
\centering
\includegraphics[width=0.9\textwidth]{figure/Nube2 Empresa Claro.jpg} 
\caption{Nubes de palabras empresas Claro} 
\label{f:NC} 
\end{figure}

\begin{figure}[H]
\centering
\includegraphics[width= 0.85\textwidth]{figure/Nube2 Empresa Movistar.jpg} 
\caption{Nubes de palabras empresas Movistar} 
\label{f:NM} 
\end{figure}

\begin{figure}[H]
\centering
\includegraphics[width= 0.85\textwidth]{figure/Nube2 Empresa Tigo.jpg}
\caption{Nubes de palabras empresas Tigo} 
\label{f:NT} 
\end{figure}

Mediante el cuadro \ref{tabla:maidfempresas} se generan las estadisticas asociadas al proceso de mineria de texto. Para el primer tweet, todos los términos que aparecen una vez tienen el mismo valor de tf dado que los términos no tienen la misma recurrencia en el conjunto de todos los tweets, en consecuencia, el indicador \textit{Idf} es distinta para cada uno. Estas metricas se presentaron en el Capítulo 2 de esta investigación. Por otra parte, esta caracterización tiene el problema de que las stop words o palabras que no representan información relevante, casi siempre son las que tienen mayor frecuencia sin ser las más importantes. Por lo tanto, esto puede ser una fuente de ruido para la construcción de los modelos. Para resolver ese problema, medidas como \textit{Tf-Idf}  normaliza ese valor \textit{Tf} con la inversa de la frecuencia de aparición de ese término en todo el corpus (IDF). En el cuadro \ref{tabla:maidfempresas} se relacionan las palabras con mayor importancia dentro del conjunto de documentos de las empresas analizadas. En este cuadro se observa que las palabras con mayor importancia son ‘hola’ (0.79), ‘caso’ (0.43), ‘saludarte’ (0.14) , ‘información’ (0.118), ‘placer’ (0.111), ‘favor’(0.10) y ‘saludos’ (0.09). Lo anterior indica claramente que las empresas de telecomunicaciones en Colombia tienen un patrón similar para contestarle a sus clientes y las palabras que más utilizan están orientadas a generar un mensaje de comodidad hacia el cliente.  

\begin{table}[H]  
\centering  
\begin{center}  
\begin{tabular}{m{2.0cm} m{2.5cm} m{3.3cm}}  
\toprule[0.6mm]  
\multicolumn{1}{c}{\textbf{Word}} &\multicolumn{1}{c}{\textbf{n\_documentos}} &\multicolumn{1}{c}{\textbf{idf}}\\  
\midrule[0.6mm]  
\multicolumn{1}{c}{hola} &\multicolumn{1}{c}{25803} &\multicolumn{1}{c}{0.7900489896} \\
\midrule[0.25mm]  
\multicolumn{1}{c}{dm} &\multicolumn{1}{c}{14081} &\multicolumn{1}{c}{0.4311390080} \\ 
\midrule[0.25mm]  
\multicolumn{1}{c}{caso} &\multicolumn{1}{c}{4609} &\multicolumn{1}{c}{0.1411206369} \\ 
\midrule[0.25mm]  
\multicolumn{1}{c}{saludarte} &\multicolumn{1}{c}{4076} &\multicolumn{1}{c}{0.1248009798} \\ 
\midrule[0.25mm]  
\multicolumn{1}{c}{información} &\multicolumn{1}{c}{3878} &\multicolumn{1}{c}{0.1187385181} \\ 
\midrule[0.25mm]  
\multicolumn{1}{c}{placer} &\multicolumn{1}{c}{3637} &\multicolumn{1}{c}{0.1113594611} \\ 
\midrule[0.25mm]  
\multicolumn{1}{c}{favor} &\multicolumn{1}{c}{3377} &\multicolumn{1}{c}{0.1033986528} \\ 
\midrule[0.25mm]  
\multicolumn{1}{c}{saludos} &\multicolumn{1}{c}{3022} &\multicolumn{1}{c}{0.0925290876} \\ 
\bottomrule[0.6mm]  
\end{tabular}  
\caption{Matriz idf para empresas. Fuente:(Los autores)}  
\label{tabla:maidfempresas}  
\end{center}  
\end{table}


\subsubsection{Comparación de tidy Texts empresas}

Para el análisis de este trabajo se encontró que las tres empresas tienen un patron para contestar los trinos realizados por los clientes. Para verificar este supuesto una forma de cuantificar la similitud entre los perfiles de las empresas en Twitter se calculó la correlación en el uso de palabras mediante una prueba de Pearson, la cual compara, entre dos varibales, el nivel de independencia lineal que presentan las variables analizadas (Claro, Movistar y Tigo). Si dos empresas escriben de forma similar, tenderán a utilizar palabras relacionadas y con frecuencias similares, por lo tanto el coeficiente de pearson $(r)$ tendrá un valor cercano a 1. Para esto, se plantearon las siguientes hipótesis a evaluar:

\begin{equation}
\begin{split}
H0: No-hay-relacion \\
H1: Hay-relacion 
\end{split}
\end{equation}


\begin{table}[H]  
\centering  
\begin{center}  
\begin{tabular}{m{1.2cm} m{1.2cm} m{1.2cm} m{2.9cm} m{1.2cm}}  
\toprule[0.6mm]  
\multicolumn{1}{c}{\textbf{t}} &\multicolumn{1}{c}{\textbf{df}} &\multicolumn{1}{c}{\textbf{p-value}} &\multicolumn{1}{c}{\textbf{95\% CI}} &\multicolumn{1}{c}{\textbf{Cor}}\\  
\midrule[0.6mm]  
\multicolumn{1}{c}{8.014} &\multicolumn{1}{c}{1323} &\multicolumn{1}{c}{2.418e-15} &\multicolumn{1}{c}{(0.1632060, 0.2659398)} &\multicolumn{1}{c}{0.2151681} \\ 
\bottomrule[0.6mm]  
\end{tabular}  
\caption{Correlación de Pearson empresas Claro-Movistar. Fuente:(Los autores)}  
\label{tabla:pearsonclamovi}  
\end{center}  
\end{table}  

\begin{table}[H]  
\centering  
\begin{center}  
\begin{tabular}{m{1.2cm} m{1.2cm} m{1.2cm} m{2.9cm} m{1.2cm}}  
\toprule[0.6mm]  
\multicolumn{1}{c}{\textbf{t}} &\multicolumn{1}{c}{\textbf{df}} &\multicolumn{1}{c}{\textbf{p-value}} &\multicolumn{1}{c}{\textbf{95\% CI}} &\multicolumn{1}{c}{\textbf{Cor}}\\  
\midrule[0.6mm]  
\multicolumn{1}{c}{6.9633} &\multicolumn{1}{c}{1440} &\multicolumn{1}{c}{5.035e-12} &\multicolumn{1}{c}{(0.1300771, 0.2299658)} &\multicolumn{1}{c}{0.1804868} \\ 
\bottomrule[0.6mm]  
\end{tabular}  
\caption{Correlación de Pearson empresas Claro-Tigo. Fuente:(Los autores)}  
\label{tabla:pearsonclatig}  
\end{center}  
\end{table} 

\begin{table}[H]  
\centering  
\begin{center}  
\begin{tabular}{m{1.2cm} m{1.2cm} m{1.2cm} m{2.9cm} m{1.2cm}}  
\toprule[0.6mm]  
\multicolumn{1}{c}{\textbf{t}} &\multicolumn{1}{c}{\textbf{df}} &\multicolumn{1}{c}{\textbf{p-value}} &\multicolumn{1}{c}{\textbf{95\% CI}} &\multicolumn{1}{c}{\textbf{Cor}}\\  
\midrule[0.6mm]  
\multicolumn{1}{c}{88.759} &\multicolumn{1}{c}{3314} &\multicolumn{1}{c}{2.2e-16} &\multicolumn{1}{c}{(0.8286112, 0.8487853)} &\multicolumn{1}{c}{0.8389863} \\ 
\bottomrule[0.6mm]  
\end{tabular}  
\caption{Correlación de Pearson empresas Tigo-Movistar. Fuente:(Los autores)}  
\label{tabla:pearsontigmovi}  
\end{center}  
\end{table} 

Los resultados de la prueba se muestran en los cuadros \ref{tabla:pearsonclamovi} \ref{tabla:pearsonclatig} y \ref{tabla:pearsontigmovi}. Para el caso de las empresas Claro-Movistar con un valor $p < 0.05$ y al $95\%$ de confianza hay suficiente prueba estadistica para rechazar la hipótesis nula. Esto puede verificarse con el valor estadistico $t= 8.014$, el cual se encuentra fuera de los limites del intervalo de confianza. Por esta razón, se infiere que existe una correlación entre la empresa Claro y Movistar. 

Para el caso de las empresas Claro-Tigo con un valor $p < 0.05$ y al $95\%$ de confianza hay suficiente prueba estadistica para rechazar la hipótesis nula. Debido a esto, se infiere que existe una correlación entre la empresa Claro y Tigo. Esto se verifica con el estadistico de prueba en el intervalo de confianza construido.

Finalmente, para Movistar-Tigo con un valor $p < 0.05$ y al $95\%$ de confianza hay suficiente prueba estadistica para rechazar la hipótesis nula. Debido a esto, se infiere que existe una correlación entre la empresa Movistar y Tigo.

Como se puede evidenciar, todas las empresas presentan correlación entre ellas. Sin embargo, para validar este resultado se revisaron los coeficientes de correlación de Pearson. En los cuadros anteriormente enunciados se muestra que: entre Claro-Movistar la correlación es baja y debil $(r=0.215*)$; entre Movistar-Tigo se observa también una correlación baja y debil $(r=0.180*)$ y entre Movistar-Tigo se observa un valor $r=0.838*$. Es decir, entre estas dos empresas existe una correlación alta y muy fuerte, indicando una similitud en la manera en que estas dos empresas trinan en esta red social. 

Para poder valorar correctamente el nivel de correlación $(r)$ es interesante conocer el número de palabras comunes entre cada par de empresas analizadas. Cabe aclarar que para el caso de esta investigación se realizó el análisis con texto y emojis, lo cual representa también una similitud entre las compañías. En el caso de Claro y Tigo, el numero de palabras y emojis comunes fueron de 1442, para Claro y Movistar 1325, mientras que para Tigo y Movistar la cantidad es casi el triple de las enteriores, 3316. Este resultado permite validar el analisis realizado anteriormente con las pruebas de correlación y el gráfico \ref{fig:Comparación}. 

Finalmente, para verificar los supuestos anteriormente enunciados se construyeron gráficos de dispersión. Para poder generar estos gráficos para validar la correlación se dispuso de cada variable en una columna. Para este caso de aplicación, las variables correlacionadas son las empresas analizadas, Claro, Movistar y Tigo, como se observa en la figura \ref{fig:Comparación}. En esta figura se evidencia que entre Movistar y Tigo hay mayor concentración de las palabras en comparación con las relaciones de las demás empresas.



\begin{figure}[H] 
\centering 
<<fig=TRUE,warning=FALSE,message=FALSE,echo=FALSE,results='hide', fig.height=2.5,fig.width=4.5>>=
# Configuración del directorio de trabajo
setwd("C:/Users/josen/OneDrive/Documentos/RTesis/VERSION FINAL EMPRESAS")
#Librerias utilizadas en el proceso
library(tidyr)
library(dplyr)
library(readxl)
library(ggplot2)
library(plotly)
library(wesanderson)
library(RColorBrewer)
library(tidytext)
library(stopwords)
library(stringr)
library(tibble)
library(tm)
library(wordcloud)
library(scales)
library(plotrix)
library(ggiraph)

#Datos utilizados de cada empresa
Claro   <-  read.csv("Claro.csv", stringsAsFactors = FALSE)
Tigo     <- read.csv("Tigo.csv", stringsAsFactors = FALSE)
Movistar <- read.csv("Movistar.csv", stringsAsFactors = FALSE)
Virgin   <- read.csv("Virgin.csv", stringsAsFactors = FALSE)
Avantel  <- read.csv("Avantel.csv", stringsAsFactors = FALSE)

#Separación de la variable Created
Info_Claro <- data.frame(do.call('rbind',strsplit(as.character(Claro$created)," ",fixed=TRUE)))

# separacion de la hora en el campo de la fecha
horas_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X2),":",fixed=TRUE)))

#Separación Fecha
Fecha_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X1),"-",fixed=TRUE)))

#Separación de la variable Status Source
Info_Claro_1  <- data.frame(do.call('rbind',strsplit(as.character(Claro$statusSource),">",fixed=TRUE)))
Info_Claro_2  <- data.frame(do.call('rbind',strsplit(as.character(Claro$statusSource),"<",fixed=TRUE)))
Info_Claro_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro_1$X2),"<",fixed=TRUE)))

Sep_horas_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X2),":",fixed=TRUE)))

#Data Frame Final con las variables a utilizar en el conjunto Empresa Claro

Empresa_Claro <- data.frame(Claro$text, Fecha_Claro, Sep_horas_Claro$X1, Info_Claro_3$X1, Claro$retweetCount)
Empresa_Claro$X2 <- as.character(Empresa_Claro$X2)

Empresa_Claro$X2 <- case_when(
                   Empresa_Claro$X2 == '01' ~ "Enero",
                   Empresa_Claro$X2 == '02' ~ "Febrero",
                   Empresa_Claro$X2 == '03' ~ "Marzo",
                   Empresa_Claro$X2 == '04' ~ "Abril",
                   Empresa_Claro$X2 == '05' ~ "Mayo",
                   Empresa_Claro$X2 == '06' ~ "Junio",
                   Empresa_Claro$X2 == '07' ~ "Julio",
                   Empresa_Claro$X2 == '08' ~ "Agosto",
                   Empresa_Claro$X2 == '09' ~ "Septiembre",
                   Empresa_Claro$X2 == '10' ~ "Octubre",
                   Empresa_Claro$X2 == '11' ~ "Noviembre",
                   Empresa_Claro$X2 == '12' ~ "Diciembre",
                  TRUE ~ as.character(Empresa_Claro$X2))

# Nueva lectura
Claro   <-  read.csv("Claro.csv", stringsAsFactors = FALSE)

Fusion_Empresas_Claro <- data.frame(Claro$screenName,Fecha_Claro, Sep_horas_Claro$X1,Claro$created, Claro$text)
names(Fusion_Empresas_Claro)[1] <-"screen_name"
names(Fusion_Empresas_Claro)[2] <-"year"
names(Fusion_Empresas_Claro)[3] <-"month"
names(Fusion_Empresas_Claro)[4] <-"day"
names(Fusion_Empresas_Claro)[5] <-"hour"
names(Fusion_Empresas_Claro)[6] <-"fecha"
names(Fusion_Empresas_Claro)[7] <-"Text"

#Separación de la variable Created
Info_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Tigo$created)," ",fixed=TRUE)))

#Separacion de la hora en el campo de la fecha
horas_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X2),":",fixed=TRUE)))

#Separación Fecha
Fecha_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X1),"-",fixed=TRUE)))

#Separación de la variable Status Source
Info_Tigo_1  <- data.frame(do.call('rbind',strsplit(as.character(Tigo$statusSource),">",fixed=TRUE)))
Info_Tigo_2  <- data.frame(do.call('rbind',strsplit(as.character(Tigo$statusSource),"<",fixed=TRUE)))
Info_Tigo_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo_1$X2),"<",fixed=TRUE)))

Sep_horas_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X2),":",fixed=TRUE)))

# Data Frame Final con las variables a utilizar en el conjunto Empresa Tigo
Empresa_Tigo <- data.frame(Tigo$text, Fecha_Tigo, Sep_horas_Tigo$X1, Info_Tigo_3$X1, Tigo$retweetCount)
Empresa_Tigo$X2 <- case_when(
                   Empresa_Tigo$X2 == '01' ~ "Enero",
                   Empresa_Tigo$X2 == '02' ~ "Febrero",
                   Empresa_Tigo$X2 == '03' ~ "Marzo",
                   Empresa_Tigo$X2 == '04' ~ "Abril",
                   Empresa_Tigo$X2 == '05' ~ "Mayo",
                   Empresa_Tigo$X2 == '06' ~ "Junio",
                   Empresa_Tigo$X2 == '07' ~ "Julio",
                   Empresa_Tigo$X2 == '08' ~ "Agosto",
                   Empresa_Tigo$X2 == '09' ~ "Septiembre",
                   Empresa_Tigo$X2 == '10' ~ "Octubre",
                   Empresa_Tigo$X2 == '11' ~ "Noviembre",
                   Empresa_Tigo$X2 == '12' ~ "Diciembre",
                  TRUE ~ as.character(Empresa_Tigo$X2))

# Nueva lectura
Tigo   <-  read.csv("Tigo.csv", stringsAsFactors = FALSE)

Fusion_Empresas_Tigo <- data.frame(Tigo$screenName,Fecha_Tigo, Sep_horas_Tigo$X1,Tigo$created, Tigo$text)
names(Fusion_Empresas_Tigo)[1] <-"screen_name"
names(Fusion_Empresas_Tigo)[2] <-"year"
names(Fusion_Empresas_Tigo)[3] <-"month"
names(Fusion_Empresas_Tigo)[4] <-"day"
names(Fusion_Empresas_Tigo)[5] <-"hour"
names(Fusion_Empresas_Tigo)[6] <-"fecha"
names(Fusion_Empresas_Tigo)[7] <-"Text"

#Separación de la variable Created
Info_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Movistar$created)," ",fixed=TRUE)))

#Separacion de la hora en el campo de la fecha
horas_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X2),":",fixed=TRUE)))

#Separación Fecha
Fecha_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X1),"-",fixed=TRUE)))

#Separación de la variable Status Source
Info_Movistar_1  <- data.frame(do.call('rbind',strsplit(as.character(Movistar$statusSource),">",fixed=TRUE)))
Info_Movistar_2  <- data.frame(do.call('rbind',strsplit(as.character(Movistar$statusSource),"<",fixed=TRUE)))
Info_Movistar_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar_1$X2),"<",fixed=TRUE)))

Sep_horas_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X2),":",fixed=TRUE)))

#Data Frame Empresa Movistar
Empresa_Movistar <- data.frame(Movistar$text, Fecha_Movistar, Sep_horas_Movistar$X1, Info_Movistar_3$X1, Movistar$retweetCount)

Empresa_Movistar$X2 <- case_when(
                   Empresa_Movistar$X2 == '01' ~ "Enero",
                   Empresa_Movistar$X2 == '02' ~ "Febrero",
                   Empresa_Movistar$X2 == '03' ~ "Marzo",
                   Empresa_Movistar$X2 == '04' ~ "Abril",
                   Empresa_Movistar$X2 == '05' ~ "Mayo",
                   Empresa_Movistar$X2 == '06' ~ "Junio",
                   Empresa_Movistar$X2 == '07' ~ "Julio",
                   Empresa_Movistar$X2 == '08' ~ "Agosto",
                   Empresa_Movistar$X2 == '09' ~ "Septiembre",
                   Empresa_Movistar$X2 == '10' ~ "Octubre",
                   Empresa_Movistar$X2 == '11' ~ "Noviembre",
                   Empresa_Movistar$X2 == '12' ~ "Diciembre",
                  TRUE ~ as.character(Empresa_Movistar$X2))

# Nueva lectura
Movistar <- read.csv("Movistar.csv", stringsAsFactors = FALSE)

Fusion_Empresas_Movistar <- data.frame(Movistar$screenName,Fecha_Movistar, Sep_horas_Movistar$X1,Movistar$created, Movistar$text)
names(Fusion_Empresas_Movistar)[1] <-"screen_name"
names(Fusion_Empresas_Movistar)[2] <-"year"
names(Fusion_Empresas_Movistar)[3] <-"month"
names(Fusion_Empresas_Movistar)[4] <-"day"
names(Fusion_Empresas_Movistar)[5] <-"hour"
names(Fusion_Empresas_Movistar)[6] <-"fecha"
names(Fusion_Empresas_Movistar)[7] <-"Text"

# Uniendo los data frames con merge ---------------------------------------------
Fusion_ClaroMovistar  <- rbind(Fusion_Empresas_Claro,Fusion_Empresas_Movistar)
Fusion_Total          <- rbind(Fusion_ClaroMovistar,Fusion_Empresas_Tigo)
# -------------------------------------------------------------------------------

#Convertir dataframe Tigo en Tibble
Tigo_tibble <- as.tibble(Empresa_Tigo)

#Cambio del nombre del atributo Text
Tigo = rename(Tigo, Texto_A = text)

#Tokenización y limpieza de las stop-words
tidy_Tigo <- Tigo %>% unnest_tokens(word, Texto_A)%>% 
  anti_join(get_stopwords(language = "es", "stopwords-iso") ) %>% 
               ungroup()

#Convertir dataframe Movistar en Tibble
Movistar_tibble <- as.tibble(Empresa_Movistar)

#Cambio del nombre del atributo Text
Movistar = rename(Movistar, Texto_A = text)

#Tokenización y limpieza de las stop-words
tidy_Movistar <- Movistar %>% unnest_tokens(word, Texto_A)%>% 
  anti_join(get_stopwords(language = "es", "stopwords-iso") ) %>% 
               ungroup()

#Convertir dataframe Claro en Tibble
Claro_tibble <- as.tibble(Empresa_Claro)

#Cambio del nombre del atributo Text
Claro = rename(Claro, Texto_A = text)

#Tokenización y limpieza de las stop-words
tidy_Claro <- Claro %>% unnest_tokens(word, Texto_A)%>% 
  anti_join(get_stopwords(language = "es", "stopwords-iso") ) %>% 
               ungroup()



#Union por empresa y palabras
Fusion_tidyClaroMovistar  <- rbind(tidy_Claro,tidy_Movistar)
Fusion_Total_tidy         <- rbind(Fusion_tidyClaroMovistar, tidy_Tigo)

#Pruebas de correlación
library(gridExtra)
library(scales)

tweets_spread <- Fusion_Total_tidy %>% group_by(screenName, word) %>% count(word) %>%
                 spread(key = screenName, value = n, fill = NA, drop = TRUE)

#Correlación Claro-Tigo
cor.test(~ ClaroColombia + Tigo_Colombia, method = "pearson", data = tweets_spread)

#Correlación Claro-Movistar
cor.test(~ ClaroColombia + MovistarCo, method = "pearson", data = tweets_spread)

#Correlación Movistar-Tigo
cor.test(~ Tigo_Colombia + MovistarCo, method = "pearson", data = tweets_spread)

#Gráfica de comparación empresas

Claro_Tigo <- ggplot(tweets_spread, aes(ClaroColombia, Tigo_Colombia)) +
      geom_jitter(alpha = 0.1, size = 2.5, width = 0.25, height = 0.25) +
      geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
      scale_x_log10(labels = percent_format()) +
      scale_y_log10(labels = percent_format()) +
      geom_abline(color = "red") +
      theme_bw() +
      theme(axis.text.x = element_blank(),
            axis.text.y = element_blank())
Claro_Tigo

Claro_Movistar <- ggplot(tweets_spread, aes(ClaroColombia, MovistarCo)) +
      geom_jitter(alpha = 0.1, size = 2.5, width = 0.25, height = 0.25) +
      geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
      scale_x_log10(labels = percent_format()) +
      scale_y_log10(labels = percent_format()) +
      geom_abline(color = "red") +
      theme_bw() +
      theme(axis.text.x = element_blank(),
            axis.text.y = element_blank())
Claro_Movistar


Movistar_Tigo <- ggplot(tweets_spread, aes(MovistarCo, Tigo_Colombia )) +
      geom_jitter(alpha = 0.1, size = 2.5, width = 0.25, height = 0.25) +
      geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
      scale_x_log10(labels = percent_format()) +
      scale_y_log10(labels = percent_format()) +
      geom_abline(color = "red") +
      theme_bw() +
      theme(axis.text.x = element_blank(),
            axis.text.y = element_blank())
Movistar_Tigo

@
\caption {Comparación de palabras y emojis entre tidyTexts empresas} 
\label{fig:Comparación} 
\end{figure}


\subsubsection{Clientes}

\begin{figure}[H] 
\centering 
<<fig=TRUE,warning=FALSE,message=FALSE,echo=FALSE,results='hide', fig.height=2.5,fig.width=4.5>>=
# Configuracion del directorio de trabajo 

setwd("C:/Users/josen/OneDrive/Documentos/RTesis/VERSION FINAL CLIENTES") 
# Librerias utilizadas en el proceso 
library(tidyr) 
library(dplyr) 
library(readxl) 
library(ggplot2) 
library(plotly) 
library(wesanderson) 
library(RColorBrewer) 
library(tidytext) 
library(stopwords) 
library(stringr) 
library(tibble) 
library(tm) 
library(wordcloud) 
library(scales) 
library(plotrix) 
library(ggiraph) 

 

# Datos utilizados de cada Cliente 
Claro   <-  read.csv("Clientes_Claro.csv", stringsAsFactors = FALSE) 
Tigo     <- read.csv("Clientes_Tigo.csv", stringsAsFactors = FALSE) 
Movistar <- read.csv("Clientes_Movistar.csv", stringsAsFactors = FALSE) 
Virgin   <- read.csv("Clientes_Virgin.csv", stringsAsFactors = FALSE) 
Avantel  <- read.csv("Clientes_Avantel.csv", stringsAsFactors = FALSE) 

 

 

# Separación de la variable Created 
Info_Claro <- data.frame(do.call('rbind',strsplit(as.character(Claro$created)," ",fixed=TRUE))) 

  

# separación de la hora en el campo de la fecha 
horas_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X2),":",fixed=TRUE))) 

  

# Separación Fecha 
Fecha_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X1),"-",fixed=TRUE))) 

 

# Separaciñn de la variable Status Source 
Info_Claro_1  <- data.frame(do.call('rbind',strsplit(as.character(Claro$statusSource),">",fixed=TRUE))) 
Info_Claro_2  <- data.frame(do.call('rbind',strsplit(as.character(Claro$statusSource),"<",fixed=TRUE))) 
Info_Claro_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro_1$X2),"<",fixed=TRUE))) 

  

Sep_horas_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X2),":",fixed=TRUE))) 

 
# Data Frame Final con las variables a utilizar en el conjunto Cliente Claro 
Cliente_Claro <- data.frame(Claro$text, Fecha_Claro, Sep_horas_Claro$X1, Info_Claro_3$X1, Claro$retweetCount) 

  

Cliente_Claro$X2 <- case_when( 
                   Cliente_Claro$X2 == '01' ~ "Enero", 
                   Cliente_Claro$X2 == '02' ~ "Febrero", 
                   Cliente_Claro$X2 == '03' ~ "Marzo", 
                   Cliente_Claro$X2 == '04' ~ "Abril", 
                   Cliente_Claro$X2 == '05' ~ "Mayo", 
                   Cliente_Claro$X2 == '06' ~ "Junio", 
                   Cliente_Claro$X2 == '07' ~ "Julio", 
                   Cliente_Claro$X2 == '08' ~ "Agosto", 
                   Cliente_Claro$X2 == '09' ~ "Septiembre", 
                   Cliente_Claro$X2 == '10' ~ "Octubre", 
                   Cliente_Claro$X2 == '11' ~ "Noviembre", 
                   Cliente_Claro$X2 == '12' ~ "Diciembre", 
                  TRUE ~ as.character(Cliente_Claro$X2)) 

  

  

# Nueva lectura 

Claro   <-  read.csv("Clientes_Claro.csv", stringsAsFactors = FALSE) 
Claro   <-  data.frame(Claro, Milabel= "Clientes_ClaroColombia") 

Fusion_Clientes_Claro <- data.frame(Claro$Milabel,Fecha_Claro, Sep_horas_Claro$X1,Claro$created) 
names(Fusion_Clientes_Claro)[1] <-"screen_name" 
names(Fusion_Clientes_Claro)[2] <-"year" 
names(Fusion_Clientes_Claro)[3] <-"month" 
names(Fusion_Clientes_Claro)[4] <-"day" 
names(Fusion_Clientes_Claro)[5] <-"hour" 
names(Fusion_Clientes_Claro)[6] <-"fecha" 

 

# Separaciñn de la variable Created 

Info_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Tigo$created)," ",fixed=TRUE))) 

# Separacion de la hora en el campo de la fecha 
horas_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X2),":",fixed=TRUE))) 

# Separaciñn Fecha 
Fecha_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X1),"-",fixed=TRUE))) 


# Separaciñn de la variable Status Source 
Info_Tigo_1  <- data.frame(do.call('rbind',strsplit(as.character(Tigo$statusSource),">",fixed=TRUE))) 
Info_Tigo_2  <- data.frame(do.call('rbind',strsplit(as.character(Tigo$statusSource),"<",fixed=TRUE))) 
Info_Tigo_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo_1$X2),"<",fixed=TRUE))) 

Sep_horas_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X2),":",fixed=TRUE))) 

 

# Data Frame Final con las variables a utilizar en el conjunto Cliente Tigo 
Cliente_Tigo <- data.frame(Tigo$text, Fecha_Tigo, Sep_horas_Tigo$X1, Info_Tigo_3$X1, Tigo$retweetCount) 

Cliente_Tigo$X2 <- case_when( 
                   Cliente_Tigo$X2 == '01' ~ "Enero", 
                   Cliente_Tigo$X2 == '02' ~ "Febrero", 
                   Cliente_Tigo$X2 == '03' ~ "Marzo", 
                   Cliente_Tigo$X2 == '04' ~ "Abril", 
                   Cliente_Tigo$X2 == '05' ~ "Mayo", 
                   Cliente_Tigo$X2 == '06' ~ "Junio", 
                   Cliente_Tigo$X2 == '07' ~ "Julio", 
                   Cliente_Tigo$X2 == '08' ~ "Agosto", 
                   Cliente_Tigo$X2 == '09' ~ "Septiembre", 
                   Cliente_Tigo$X2 == '10' ~ "Octubre", 
                   Cliente_Tigo$X2 == '11' ~ "Noviembre", 
                   Cliente_Tigo$X2 == '12' ~ "Diciembre", 
                  TRUE ~ as.character(Cliente_Tigo$X2)) 

  

# Nueva lectura 

Tigo   <-  read.csv("Clientes_Tigo.csv", stringsAsFactors = FALSE) 
Tigo   <-  data.frame(Tigo, Milabel= "Clientes_Tigo_Colombia") 

Fusion_Clientes_Tigo <- data.frame(Tigo$Milabel,Fecha_Tigo, Sep_horas_Tigo$X1,Tigo$created) 
names(Fusion_Clientes_Tigo)[1] <-"screen_name" 
names(Fusion_Clientes_Tigo)[2] <-"year" 
names(Fusion_Clientes_Tigo)[3] <-"month" 
names(Fusion_Clientes_Tigo)[4] <-"day" 
names(Fusion_Clientes_Tigo)[5] <-"hour" 
names(Fusion_Clientes_Tigo)[6] <-"fecha" 

# Separaciñn de la variable Created 
Info_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Movistar$created)," ",fixed=TRUE))) 

# Separacion de la hora en el campo de la fecha 

horas_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X2),":",fixed=TRUE))) 

# Separaciñn Fecha 
Fecha_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X1),"-",fixed=TRUE))) 

# Separaciñn de la variable Status Source 
Info_Movistar_1  <- data.frame(do.call('rbind',strsplit(as.character(Movistar$statusSource),">",fixed=TRUE))) 
Info_Movistar_2  <- data.frame(do.call('rbind',strsplit(as.character(Movistar$statusSource),"<",fixed=TRUE))) 
Info_Movistar_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar_1$X2),"<",fixed=TRUE))) 

Sep_horas_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X2),":",fixed=TRUE))) 

# Data Frame Cliente Movistar 
Cliente_Movistar <- data.frame(Movistar$text, Fecha_Movistar, Sep_horas_Movistar$X1, Info_Movistar_3$X1, Movistar$retweetCount) 

# Se eliminan filas de la semana del 7 al 17 de Noviembre de 2018 
Cliente_Movistar <- Cliente_Movistar[-grep("07/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("08/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("09/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("10/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("11/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("12/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("13/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("14/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("15/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("16/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("17/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("18/11/2018",Cliente_Movistar$X1),] 

Cliente_Movistar$X2 <- case_when( 
                   Cliente_Movistar$X2 == '01' ~ "Enero", 
                   Cliente_Movistar$X2 == '02' ~ "Febrero", 
                   Cliente_Movistar$X2 == '03' ~ "Marzo", 
                   Cliente_Movistar$X2 == '04' ~ "Abril", 
                   Cliente_Movistar$X2 == '05' ~ "Mayo", 
                   Cliente_Movistar$X2 == '06' ~ "Junio", 
                   Cliente_Movistar$X2 == '07' ~ "Julio", 
                   Cliente_Movistar$X2 == '08' ~ "Agosto", 
                   Cliente_Movistar$X2 == '09' ~ "Septiembre", 
                   Cliente_Movistar$X2 == '10' ~ "Octubre", 
                   Cliente_Movistar$X2 == '11' ~ "Noviembre", 
                   Cliente_Movistar$X2 == '12' ~ "Diciembre", 
                  TRUE ~ as.character(Cliente_Movistar$X2)) 

  

# Nueva lectura 
Movistar   <-  read.csv("Clientes_Movistar.csv", stringsAsFactors = FALSE) 
Movistar   <-  data.frame(Movistar, Milabel= "Clientes_MovistarCo") 
Fusion_Clientes_Movistar <- data.frame(Movistar$Milabel,Fecha_Movistar, Sep_horas_Movistar$X1,Movistar$created) 

names(Fusion_Clientes_Movistar)[1] <-"screen_name" 
names(Fusion_Clientes_Movistar)[2] <-"year" 
names(Fusion_Clientes_Movistar)[3] <-"month" 
names(Fusion_Clientes_Movistar)[4] <-"day" 
names(Fusion_Clientes_Movistar)[5] <-"hour" 
names(Fusion_Clientes_Movistar)[6] <-"fecha" 

#Uniendo los data frames con merge-----------------------------------------------------------
Fusion_Clientes_ClaroMovistar  <- rbind(Fusion_Clientes_Claro,Fusion_Clientes_Movistar) 
Fusion_Total_Clientes          <- rbind(Fusion_Clientes_ClaroMovistar,Fusion_Clientes_Tigo) 
#--------------------------------------------------------------------------------------------

# Convertir dataframe Movistar en Tibble 
Movistar_tibble <- as.tibble(Cliente_Movistar) 
# Cambio del nombre del atributo Text 
Movistar = rename(Movistar, Texto_A = text) 

# Tokenización y limpieza de las stop-words 
tidy_Movistar <- Movistar %>% unnest_tokens(word, Texto_A)%>%  
  anti_join(get_stopwords(language = "es", "stopwords-iso") ) %>%  
               ungroup() 

 

# Convertir dataframe Tigo en Tibble 
Tigo_tibble <- as.tibble(Cliente_Tigo) 

# Cambio del nombre del atributo Text 
Tigo = rename(Tigo, Texto_A = text) 

# Tokenizaciñn y limpieza de las stop-words 
tidy_Tigo <- Tigo %>% unnest_tokens(word, Texto_A)%>%  
  anti_join(get_stopwords(language = "es", "stopwords-iso") ) %>%  
               ungroup() 


# Convertir dataframe Claro en Tibble 
Claro_tibble <- as.tibble(Cliente_Claro) 

# Cambio del nombre del atributo Text 
Claro = rename(Claro, Texto_A = text) 

# Tokenizaciñn y limpieza de las stop-words 
tidy_Claro <- Claro %>% unnest_tokens(word, Texto_A)%>%  
  anti_join(get_stopwords(language = "es", "stopwords-iso") ) %>%  
               ungroup() 

#Union por empresa y palabras------------------------------------------
tidy_Claro$screenName_2 <- "ClaroColombia"
tidy_Movistar$screenName_2 <- "MovistarCo"
tidy_Tigo$screenName_2 <- "Tigo_Colombia"


Fusion_tidyClaroMovistar  <- rbind(tidy_Claro,tidy_Movistar)
Fusion_Total_tidy         <- rbind(Fusion_tidyClaroMovistar, tidy_Tigo)
#-----------------------------------------------------------------------

# Palabras recurrentes Claro
tidy_Claro %>%
  count(word, sort = TRUE) %>%
  filter(n > 2000) %>%
  mutate(word = reorder(word,n)) %>%
  ggplot(aes(word,n)) +
  labs(title = "Palabras más recurrentes en clientes \n Claro, Movistar y Tigo", x=NULL, y="Claro") +
  geom_col(fill = "firebrick2", width = 0.8) +
  coord_flip()
  
tidy_Movistar %>%
  count(word, sort = TRUE) %>%
  filter(n > 1300) %>%
  mutate(word = reorder(word,n)) %>%
  ggplot(aes(word,n))+
  labs(x = NULL, y = "Movistar") +
  geom_col(fill = "forestgreen", width = 0.8) +
  coord_flip()

# Palabras recurrentes Tigo
tidy_Tigo %>%
  count(word, sort = TRUE) %>%
  filter(n > 1100) %>%
  mutate(word = reorder(word,n)) %>%
  ggplot(aes(word,n)) +
  labs(x = NULL, y = "Tigo") +
  geom_col(fill = "dodgerblue4", width = 0.8) +
  coord_flip()
@
\caption {Palabras recurrentes en los clientes Claro, Movistar y Tigo} 
\label{fig:Recurrentes} 
\end{figure}


Para el análisis concerniente a los clientes, se hace preciso conocer cuáles son las palabras más frecuentes dentro de sus publicaciones, de esta forma se diferencia que unidades léxicas son las más usadas por los clientes. Los términos que se presentan en la figura \ref{fig:Recurrentes} responden a las palabras más usadas por los clientes de las empresas en cuestión. Para el caso de los clientes de la empresa Claro manifiestan su inconformidad por no recibir pronta respuesta ante las quejas y reclamos presentados por el canal de ayuda y soporte de Claro Colombia @ClaroTeAyuda, en el cual los clientes encuentran información de ayuda sobre los servicios brindados por esta empresa. Dichas quejas están asociadas a las fallas presentadas en los servicios prestados, de la misma forma los clientes asocian sus reclamaciones a la Superintendencia de Industria y Comercio, esperando recibir apoyo por parte de esta entidad. Por otra parte, se distingue el nombramiento de la piloto colombiana de automovilismo Tatiana Calderón Noguera, la cual contó con importantes participaciones durante el periodo de recolección de tweets. Por su parte, los clientes de la empresa Movistar nombraron con una alta frecuencia la app Movistar play, la cual reúne contenido de películas, series, documentales y contenidos del prime time. De forma conjunta se distingue la aparición de Claro Colombia en los tres conjuntos de datos, ya que los clientes de las tres empresas comparan y citan los servicios y productos de estas organizaciones.  


\begin{figure}[H] 
\centering
\includegraphics[width=0.80\textwidth]{figure/Nube2 Cliente Claro.jpg} 
\caption{Nubes de palabras empresas Claro} 
\label{f:NCC} 
\end{figure}

\begin{figure}[H]
\centering
\includegraphics[width=0.77\textwidth]{figure/Nube2 Cliente Movistar.jpg} 
\caption{Nubes de palabras empresas Movistar} 
\label{f:NCM} 
\end{figure}

\begin{figure}[H]
\centering
\includegraphics[width=0.77\textwidth]{figure/Nube2 Cliente Tigo.jpg} 
\caption{Nubes de palabras empresas Tigo} 
\label{f:NCT} 
\end{figure}

Otra forma visual de representar las palabras con mayor repetición es mediante nubes de palabras o conocidas como Word-clouds. En esta representación, las palabras más importantes y con mayor recurrencia obtienen un mayor tamaño. La figura \ref{f:NCC}, \ref{f:NCM} y \ref{f:NCT} muestran las nubes de palabras asociadas a cada una de las empresas analizadas, Claro, Movistar y Tigo.

\begin{table}[H]  
\centering  
\begin{center}  
\begin{tabular}{m{2.0cm} m{2.5cm} m{3.3cm}}  
\toprule[0.6mm]  
\multicolumn{1}{c}{\textbf{Word}} &\multicolumn{1}{c}{\textbf{n\_documentos}} &\multicolumn{1}{c}{\textbf{idf}}\\  
\midrule[0.6mm]  
\multicolumn{1}{c}{servicio} &\multicolumn{1}{c}{12983} &\multicolumn{1}{c}{0.150377595} \\
\midrule[0.25mm]  
\multicolumn{1}{c}{claroteayuda} &\multicolumn{1}{c}{8180} &\multicolumn{1}{c}{0.094746108} \\ 
\midrule[0.25mm]  
\multicolumn{1}{c}{internet} &\multicolumn{1}{c}{5595} &\multicolumn{1}{c}{0.064804948} \\ 
\midrule[0.25mm]  
\multicolumn{1}{c}{clarocolombia} &\multicolumn{1}{c}{4925} &\multicolumn{1}{c}{0.057044570} \\ 
\midrule[0.25mm]  
\multicolumn{1}{c}{sicsuper} &\multicolumn{1}{c}{4065} &\multicolumn{1}{c}{0.047083488} \\ 
\midrule[0.25mm]  
\multicolumn{1}{c}{gracias} &\multicolumn{1}{c}{3204} &\multicolumn{1}{c}{0.037110823} \\ 
\midrule[0.25mm]  
\multicolumn{1}{c}{señores} &\multicolumn{1}{c}{3198} &\multicolumn{1}{c}{0.037041327} \\ 
\midrule[0.25mm]  
\multicolumn{1}{c}{hola} &\multicolumn{1}{c}{3135} &\multicolumn{1}{c}{0.036311620} \\
\bottomrule[0.6mm]  
\end{tabular}  
\caption{Matriz idf para clientes. Fuente:(Los autores)}  
\label{tabla:maidfclientes}  
\end{center}  
\end{table}

En el cuadro \ref{tabla:maidfclientes} se relacionan las palabras con mayor importancia dentro del conjunto de documentos de los clientes analizados. En este cuadro se observa que las palabras con mayor importancia son ‘Servicio’ (0.15), ‘Internet’ (0.06), ‘SICSUPER’ (0.04) y ‘Señores’ (0.03). Lo anterior indica que los clientes asociados a empresas de telecomunicaciones en Colombia hablan mayormente sobre los servicios de internet prestados por estas compañias. Además se observa que gran parte de los usuarios acuden a cuentas de la Superintendencia de Industria y Comercio como medio para emitir reclamos y protección de derechos como usuarios. 


\subsubsection{Comparación tidy Texts clientes}
Al igual que el conjunto de datos de las empresas, se procedió a analizar la correlación entre los conjuntos de datos de los clientes de cada compañia.

Una manera de cuantificar la semejanza entre los perfiles de dos usuarios de Twitter es calculando la correlación en el uso de palabras por medio del cálculo de la correlación de Pearson. Los resultados de las pruebas realizadas se expresan en los cuadros \ref{tabla:pearsonclamovempresas}, \ref{tabla:pearsonclatigempresas} y \ref{tabla:pearsontigmovempresas} donde se evidencia el $p-valor$, el intervalo de confianza, grados de libertad y el coeficiente de pearson $r$ calculado. Mediante esta prueba se establece si dos clientes escriben de forma similar, tendiendo a utilizar las mismas palabras y con frecuencias similares. A partir de las pruebas de Pearson efectuadas y el número de palabras comunes entre cada par de clientes, las cuales fueron de 12,612 para Claro – Movistar, 13,732 para Claro – Tigo y 9,552 para Movistar – Tigo. Se concluyó al 95\% de confianza que la correlación es diferente de cero, es decir, se rechaza la hipótesis nula, indicando así que existe una correlación en el uso de palabras de los clientes en cuestión. 

Complementario a la valoración anterior, se generó un conjunto de gráficos de correlaciones, que se ilustra en la figura \ref{fig:ComparacionC} , en la cual se corrobora que Claro - Movistar y Claro – Tigo y Movistar - Tigo existe una correlación fuerte $(r >= 0.7*)$. Es decir, las palabras y emojis que utilizan los clientes para trinar sobre estas empresas son parecidas y por ende, se observa una agrupación más concistente. 

\begin{table}[H]  
\centering  
\begin{center}  
\begin{tabular}{m{1.2cm} m{1.2cm} m{1.2cm} m{2.9cm} m{1.2cm}}  
\toprule[0.6mm]  
\multicolumn{1}{c}{\textbf{t}} &\multicolumn{1}{c}{\textbf{df}} &\multicolumn{1}{c}{\textbf{p-value}} &\multicolumn{1}{c}{\textbf{95\% CI}} &\multicolumn{1}{c}{\textbf{Cor}}\\  
\midrule[0.6mm]  
\multicolumn{1}{c}{116.77} &\multicolumn{1}{c}{12610} &\multicolumn{1}{c}{ 2.2e-16} &\multicolumn{1}{c}{(0.7123015, 0.7290748)} &\multicolumn{1}{c}{0.7207936} \\ 
\bottomrule[0.6mm]  
\end{tabular}  
\caption{Correlación de Pearson clientes Claro-Movistar. Fuente:(Los autores)}  
\label{tabla:pearsonclamovempresas}  
\end{center}  
\end{table}  

\begin{table}[H]  
\centering  
\begin{center}  
\begin{tabular}{m{1.2cm} m{1.2cm} m{1.2cm} m{2.9cm} m{1.2cm}}  
\toprule[0.6mm]  
\multicolumn{1}{c}{\textbf{t}} &\multicolumn{1}{c}{\textbf{df}} &\multicolumn{1}{c}{\textbf{p-value}} &\multicolumn{1}{c}{\textbf{95\% CI}} &\multicolumn{1}{c}{\textbf{Cor}}\\  
\midrule[0.6mm]  
\multicolumn{1}{c}{125.14} &\multicolumn{1}{c}{13730} &\multicolumn{1}{c}{2.2e-16} &\multicolumn{1}{c}{(0.7220556, 0.7376849)} &\multicolumn{1}{c}{0.7299656} \\ 
\bottomrule[0.6mm]  
\end{tabular}  
\caption{Correlación de Pearson clientes Claro-Tigo. Fuente:(Los autores)} 
\label{tabla:pearsonclatigempresas}  
\end{center}  
\end{table}

\begin{table}[H]  
\centering  
\begin{center}  
\begin{tabular}{m{1.2cm} m{1.2cm} m{1.2cm} m{2.9cm} m{1.2cm}}  
\toprule[0.6mm]  
\multicolumn{1}{c}{\textbf{t}} &\multicolumn{1}{c}{\textbf{df}} &\multicolumn{1}{c}{\textbf{p-value}} &\multicolumn{1}{c}{\textbf{95\% CI}} &\multicolumn{1}{c}{\textbf{Cor}}\\  
\midrule[0.6mm]  
\multicolumn{1}{c}{95.441} &\multicolumn{1}{c}{9550} &\multicolumn{1}{c}{2.2e-16} &\multicolumn{1}{c}{(0.6882893, 0.7088218)} &\multicolumn{1}{c}{0.6986994} \\ 
\bottomrule[0.6mm]  
\end{tabular}  
\caption{Correlación de Pearson clientes Tigo-Movistar. Fuente:(Los autores)}  
\label{tabla:pearsontigmovempresas}  
\end{center}  
\end{table}  


\begin{figure}[H] 
\centering 
<<fig=TRUE,warning=FALSE,message=FALSE,echo=FALSE,results='hide', fig.height=2.5,fig.width=4.5>>=
# Configuracion del directorio de trabajo 

setwd("C:/Users/josen/OneDrive/Documentos/RTesis/VERSION FINAL CLIENTES") 
# Librerias utilizadas en el proceso 
library(tidyr) 
library(dplyr) 
library(readxl) 
library(ggplot2) 
library(plotly) 
library(wesanderson) 
library(RColorBrewer) 
library(tidytext) 
library(stopwords) 
library(stringr) 
library(tibble) 
library(tm) 
library(wordcloud) 
library(scales) 
library(plotrix) 
library(ggiraph) 

 

# Datos utilizados de cada Cliente 
Claro   <-  read.csv("Clientes_Claro.csv", stringsAsFactors = FALSE) 
Tigo     <- read.csv("Clientes_Tigo.csv", stringsAsFactors = FALSE) 
Movistar <- read.csv("Clientes_Movistar.csv", stringsAsFactors = FALSE) 
Virgin   <- read.csv("Clientes_Virgin.csv", stringsAsFactors = FALSE) 
Avantel  <- read.csv("Clientes_Avantel.csv", stringsAsFactors = FALSE) 

 

 

# Separación de la variable Created 
Info_Claro <- data.frame(do.call('rbind',strsplit(as.character(Claro$created)," ",fixed=TRUE))) 

  

# separación de la hora en el campo de la fecha 
horas_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X2),":",fixed=TRUE))) 

  

# Separación Fecha 
Fecha_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X1),"-",fixed=TRUE))) 

 

# Separaciñn de la variable Status Source 
Info_Claro_1  <- data.frame(do.call('rbind',strsplit(as.character(Claro$statusSource),">",fixed=TRUE))) 
Info_Claro_2  <- data.frame(do.call('rbind',strsplit(as.character(Claro$statusSource),"<",fixed=TRUE))) 
Info_Claro_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro_1$X2),"<",fixed=TRUE))) 

  

Sep_horas_Claro <- data.frame(do.call('rbind',strsplit(as.character(Info_Claro$X2),":",fixed=TRUE))) 

 
# Data Frame Final con las variables a utilizar en el conjunto Cliente Claro 
Cliente_Claro <- data.frame(Claro$text, Fecha_Claro, Sep_horas_Claro$X1, Info_Claro_3$X1, Claro$retweetCount) 

  

Cliente_Claro$X2 <- case_when( 
                   Cliente_Claro$X2 == '01' ~ "Enero", 
                   Cliente_Claro$X2 == '02' ~ "Febrero", 
                   Cliente_Claro$X2 == '03' ~ "Marzo", 
                   Cliente_Claro$X2 == '04' ~ "Abril", 
                   Cliente_Claro$X2 == '05' ~ "Mayo", 
                   Cliente_Claro$X2 == '06' ~ "Junio", 
                   Cliente_Claro$X2 == '07' ~ "Julio", 
                   Cliente_Claro$X2 == '08' ~ "Agosto", 
                   Cliente_Claro$X2 == '09' ~ "Septiembre", 
                   Cliente_Claro$X2 == '10' ~ "Octubre", 
                   Cliente_Claro$X2 == '11' ~ "Noviembre", 
                   Cliente_Claro$X2 == '12' ~ "Diciembre", 
                  TRUE ~ as.character(Cliente_Claro$X2)) 

  

  

# Nueva lectura 

Claro   <-  read.csv("Clientes_Claro.csv", stringsAsFactors = FALSE) 
Claro   <-  data.frame(Claro, Milabel= "Clientes_ClaroColombia") 

Fusion_Clientes_Claro <- data.frame(Claro$Milabel,Fecha_Claro, Sep_horas_Claro$X1,Claro$created) 
names(Fusion_Clientes_Claro)[1] <-"screen_name" 
names(Fusion_Clientes_Claro)[2] <-"year" 
names(Fusion_Clientes_Claro)[3] <-"month" 
names(Fusion_Clientes_Claro)[4] <-"day" 
names(Fusion_Clientes_Claro)[5] <-"hour" 
names(Fusion_Clientes_Claro)[6] <-"fecha" 

 

# Separaciñn de la variable Created 

Info_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Tigo$created)," ",fixed=TRUE))) 

# Separacion de la hora en el campo de la fecha 
horas_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X2),":",fixed=TRUE))) 

# Separaciñn Fecha 
Fecha_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X1),"-",fixed=TRUE))) 


# Separaciñn de la variable Status Source 
Info_Tigo_1  <- data.frame(do.call('rbind',strsplit(as.character(Tigo$statusSource),">",fixed=TRUE))) 
Info_Tigo_2  <- data.frame(do.call('rbind',strsplit(as.character(Tigo$statusSource),"<",fixed=TRUE))) 
Info_Tigo_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo_1$X2),"<",fixed=TRUE))) 

Sep_horas_Tigo <- data.frame(do.call('rbind',strsplit(as.character(Info_Tigo$X2),":",fixed=TRUE))) 

 

# Data Frame Final con las variables a utilizar en el conjunto Cliente Tigo 
Cliente_Tigo <- data.frame(Tigo$text, Fecha_Tigo, Sep_horas_Tigo$X1, Info_Tigo_3$X1, Tigo$retweetCount) 

Cliente_Tigo$X2 <- case_when( 
                   Cliente_Tigo$X2 == '01' ~ "Enero", 
                   Cliente_Tigo$X2 == '02' ~ "Febrero", 
                   Cliente_Tigo$X2 == '03' ~ "Marzo", 
                   Cliente_Tigo$X2 == '04' ~ "Abril", 
                   Cliente_Tigo$X2 == '05' ~ "Mayo", 
                   Cliente_Tigo$X2 == '06' ~ "Junio", 
                   Cliente_Tigo$X2 == '07' ~ "Julio", 
                   Cliente_Tigo$X2 == '08' ~ "Agosto", 
                   Cliente_Tigo$X2 == '09' ~ "Septiembre", 
                   Cliente_Tigo$X2 == '10' ~ "Octubre", 
                   Cliente_Tigo$X2 == '11' ~ "Noviembre", 
                   Cliente_Tigo$X2 == '12' ~ "Diciembre", 
                  TRUE ~ as.character(Cliente_Tigo$X2)) 

  

# Nueva lectura 

Tigo   <-  read.csv("Clientes_Tigo.csv", stringsAsFactors = FALSE) 
Tigo   <-  data.frame(Tigo, Milabel= "Clientes_Tigo_Colombia") 

Fusion_Clientes_Tigo <- data.frame(Tigo$Milabel,Fecha_Tigo, Sep_horas_Tigo$X1,Tigo$created) 
names(Fusion_Clientes_Tigo)[1] <-"screen_name" 
names(Fusion_Clientes_Tigo)[2] <-"year" 
names(Fusion_Clientes_Tigo)[3] <-"month" 
names(Fusion_Clientes_Tigo)[4] <-"day" 
names(Fusion_Clientes_Tigo)[5] <-"hour" 
names(Fusion_Clientes_Tigo)[6] <-"fecha" 

# Separaciñn de la variable Created 
Info_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Movistar$created)," ",fixed=TRUE))) 

# Separacion de la hora en el campo de la fecha 

horas_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X2),":",fixed=TRUE))) 

# Separaciñn Fecha 
Fecha_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X1),"-",fixed=TRUE))) 

# Separaciñn de la variable Status Source 
Info_Movistar_1  <- data.frame(do.call('rbind',strsplit(as.character(Movistar$statusSource),">",fixed=TRUE))) 
Info_Movistar_2  <- data.frame(do.call('rbind',strsplit(as.character(Movistar$statusSource),"<",fixed=TRUE))) 
Info_Movistar_3  <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar_1$X2),"<",fixed=TRUE))) 

Sep_horas_Movistar <- data.frame(do.call('rbind',strsplit(as.character(Info_Movistar$X2),":",fixed=TRUE))) 

# Data Frame Cliente Movistar 
Cliente_Movistar <- data.frame(Movistar$text, Fecha_Movistar, Sep_horas_Movistar$X1, Info_Movistar_3$X1, Movistar$retweetCount) 

# Se eliminan filas de la semana del 7 al 17 de Noviembre de 2018 
Cliente_Movistar <- Cliente_Movistar[-grep("07/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("08/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("09/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("10/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("11/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("12/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("13/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("14/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("15/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("16/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("17/11/2018",Cliente_Movistar$X1),] 
Cliente_Movistar <- Cliente_Movistar[-grep("18/11/2018",Cliente_Movistar$X1),] 

Cliente_Movistar$X2 <- case_when( 
                   Cliente_Movistar$X2 == '01' ~ "Enero", 
                   Cliente_Movistar$X2 == '02' ~ "Febrero", 
                   Cliente_Movistar$X2 == '03' ~ "Marzo", 
                   Cliente_Movistar$X2 == '04' ~ "Abril", 
                   Cliente_Movistar$X2 == '05' ~ "Mayo", 
                   Cliente_Movistar$X2 == '06' ~ "Junio", 
                   Cliente_Movistar$X2 == '07' ~ "Julio", 
                   Cliente_Movistar$X2 == '08' ~ "Agosto", 
                   Cliente_Movistar$X2 == '09' ~ "Septiembre", 
                   Cliente_Movistar$X2 == '10' ~ "Octubre", 
                   Cliente_Movistar$X2 == '11' ~ "Noviembre", 
                   Cliente_Movistar$X2 == '12' ~ "Diciembre", 
                  TRUE ~ as.character(Cliente_Movistar$X2)) 

  

# Nueva lectura 
Movistar   <-  read.csv("Clientes_Movistar.csv", stringsAsFactors = FALSE) 
Movistar   <-  data.frame(Movistar, Milabel= "Clientes_MovistarCo") 
Fusion_Clientes_Movistar <- data.frame(Movistar$Milabel,Fecha_Movistar, Sep_horas_Movistar$X1,Movistar$created) 

names(Fusion_Clientes_Movistar)[1] <-"screen_name" 
names(Fusion_Clientes_Movistar)[2] <-"year" 
names(Fusion_Clientes_Movistar)[3] <-"month" 
names(Fusion_Clientes_Movistar)[4] <-"day" 
names(Fusion_Clientes_Movistar)[5] <-"hour" 
names(Fusion_Clientes_Movistar)[6] <-"fecha" 

#Uniendo los data frames con merge-----------------------------------------------------------
Fusion_Clientes_ClaroMovistar  <- rbind(Fusion_Clientes_Claro,Fusion_Clientes_Movistar) 
Fusion_Total_Clientes          <- rbind(Fusion_Clientes_ClaroMovistar,Fusion_Clientes_Tigo) 
#--------------------------------------------------------------------------------------------

# Convertir dataframe Movistar en Tibble 
Movistar_tibble <- as.tibble(Cliente_Movistar) 
# Cambio del nombre del atributo Text 
Movistar = rename(Movistar, Texto_A = text) 

# Tokenización y limpieza de las stop-words 
tidy_Movistar <- Movistar %>% unnest_tokens(word, Texto_A)%>%  
  anti_join(get_stopwords(language = "es", "stopwords-iso") ) %>%  
               ungroup() 

 

# Convertir dataframe Tigo en Tibble 
Tigo_tibble <- as.tibble(Cliente_Tigo) 

# Cambio del nombre del atributo Text 
Tigo = rename(Tigo, Texto_A = text) 

# Tokenizaciñn y limpieza de las stop-words 
tidy_Tigo <- Tigo %>% unnest_tokens(word, Texto_A)%>%  
  anti_join(get_stopwords(language = "es", "stopwords-iso") ) %>%  
               ungroup() 


# Convertir dataframe Claro en Tibble 
Claro_tibble <- as.tibble(Cliente_Claro) 

# Cambio del nombre del atributo Text 
Claro = rename(Claro, Texto_A = text) 

# Tokenizaciñn y limpieza de las stop-words 
tidy_Claro <- Claro %>% unnest_tokens(word, Texto_A)%>%  
  anti_join(get_stopwords(language = "es", "stopwords-iso") ) %>%  
               ungroup() 

#Union por empresa y palabras------------------------------------------
tidy_Claro$screenName_2 <- "ClaroColombia"
tidy_Movistar$screenName_2 <- "MovistarCo"
tidy_Tigo$screenName_2 <- "Tigo_Colombia"


Fusion_tidyClaroMovistar  <- rbind(tidy_Claro,tidy_Movistar)
Fusion_Total_tidy         <- rbind(Fusion_tidyClaroMovistar, tidy_Tigo)
#-----------------------------------------------------------------------

#Pruebas de correlación
library(gridExtra)
library(scales)

tweets_spread <- Fusion_Total_tidy %>% group_by(screenName_2, word) %>% count(word) %>%
                 spread(key = screenName_2, value = n, fill = NA, drop = TRUE)

#Gráfica de comparación empresas

Claro_Tigo <- ggplot(tweets_spread, aes(ClaroColombia, Tigo_Colombia)) +
      geom_jitter(alpha = 0.1, size = 2.5, width = 0.25, height = 0.25) +
      geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
      scale_x_log10(labels = percent_format()) +
      scale_y_log10(labels = percent_format()) +
      geom_abline(color = "red") +
      theme_bw() +
      theme(axis.text.x = element_blank(),
            axis.text.y = element_blank())
Claro_Tigo

Claro_Movistar <- ggplot(tweets_spread, aes(ClaroColombia, MovistarCo)) +
      geom_jitter(alpha = 0.1, size = 2.5, width = 0.25, height = 0.25) +
      geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
      scale_x_log10(labels = percent_format()) +
      scale_y_log10(labels = percent_format()) +
      geom_abline(color = "red") +
      theme_bw() +
      theme(axis.text.x = element_blank(),
            axis.text.y = element_blank())
Claro_Movistar


Movistar_Tigo <- ggplot(tweets_spread, aes(MovistarCo, Tigo_Colombia )) +
      geom_jitter(alpha = 0.1, size = 2.5, width = 0.25, height = 0.25) +
      geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
      scale_x_log10(labels = percent_format()) +
      scale_y_log10(labels = percent_format()) +
      geom_abline(color = "red") +
      theme_bw() +
      theme(axis.text.x = element_blank(),
            axis.text.y = element_blank())
Movistar_Tigo
@
\caption {Comparación de palabras clientes Claro, Movistar y Tigo} 
\label{fig:ComparacionC} 
\end{figure}



\subsection{Análisis de sentimientos}
\subsubsection{Empresas}

\begin{figure}[H] 
\centering 
\includegraphics [width=0.6\textwidth]{figure/Sentimientos2 Claro.jpg} 
\caption {Sentimientos asociados a la empresa Claro} 
\end{figure}

\begin{figure}[H] 
\centering 
\includegraphics [width=0.6\textwidth]{figure/Sentimientos 2 Movistar.jpg} 
\caption {Sentimientos asociados a la empresa Movistar} 
\end{figure}

\begin{figure}[H] 
\centering 
\includegraphics [width=0.6\textwidth]{figure/Sentimientos 2 Tigo.jpg} 
\caption {Sentimientos asociados a la empresa Tigo} 
\label{fig:SE} 
\end{figure}

Como se mencionó en el capítulo anterior se implementó un diccionario o léxico de sentimientos en el que se asocia a cada palabra un sentimiento. El diccionario seleccionado fue el NRC, el cual asigna palabras en una o más de las siguientes diez categorías: positivo, negativo, enojo, anticipación, asco, miedo, alegría, tristeza, sorpresa y confianza. La consolidación de este análisis para cada categoría nombrada previamente se ve condensada en la figura \ref{fig:SE} , la cual muestra la confianza y el miedo como los sentimientos predominantes, seguidos de la anticipación y en igual medida las categorías positiva y negativa, esto para la empresa Claro. Para la empresa Movistar se identificó la categoría negativa como la predominante, seguido del miedo, enojo y asco. Finalmente, para Tigo se registró la categoría negativa como la predominante, seguida de la categoría positiva y el enojo. Sin embargo, estos análisis permiten ver ciertas falencias en el paquete \textit{Syuzhet}, ya que las empresas usan dentro de su léxico palabras negativas para responder las inquietudes de sus clientes, por lo cual el algoritmo asigna mayor ponderación a la clasificación negativa, incluso cuando estas palabras no están ligadas necesariamente a un sentimiento negativo y por el contrario se usan de forma neutral o positiva, desvinculando el contexto de la palabra. Dentro de esta situación se encontraron ejemplos como \textit{Nos preocupan las fallas} o \textit{Lamentamos los inconvenientes}, los cuales el algoritmo clasifica como palabras negativas, omitiendo el contexto general de la situación presentada. 

\subsubsection{Clientes}
\begin{figure}[H] 
\centering 
\includegraphics [width=0.6\textwidth]{figure/Sentiment Clientes Claro.jpg} 
\caption {Sentimientos percibidos por los clientes Claro} 
\end{figure}

\begin{figure}[H] 
\centering 
\includegraphics [width=0.6\textwidth]{figure/Sentiment Clientes Movistar.jpg} 
\caption {Sentimientos percibidos por los clientes Movistar} 
\end{figure}

\begin{figure}[H] 
\centering 
\includegraphics [width=0.6\textwidth]{figure/Sentiment Clientes Tigo.jpg} 
\caption {Sentimientos percibidos por los clientes Tigo} 
\label{fig:SC} 
\end{figure}

Tal como se realizó el análisis de sentimientos para las empresas Claro, Movistar y Tigo, se efectuó el mismo análisis para los clientes asociados a dichas empresas. Para los clientes Claro se halló la categoría negativa como la más grande junto con el miedo y la tristeza, seguidos de la ira y el asco. Para los clientes Movistar los sentimientos encontrados no fueron distintos, pues la categoría negativa fue la más grande junto con el miedo y la tristeza. Los clientes Tigo manifestaron múltiples sentimientos en los que se encuentra la categoría positiva, negativa, ira, miedo, anticipación y asco como los más significativos. De forma general la sorpresa y la alegría fueron los sentimientos que menos manifestaron los clientes de las tres empresas. Por tanto, Twitter es una plataforma seleccionada por los clientes para manifestar sus quejas e inconformidades sobre estas empresas de telefonía. 

La clasificación de sentimientos realizada con el paquete \textit{Syuzhet}, resulta importante para el análisis de la percepción de los clientes hacia las empresas, no obstante, se hace preciso validar, como trabajo futuro, los resultados discutidos previamente con el uso de otro motor de análisis de sentimientos, y así obtener un diagnóstico más exacto.

\subsubsection{Análisis de Emojis}
Para el análisis de los \textit{emojis} encontrados para cada empresa y cliente se revisa en la literatura el significado de Unicode, el cual es el estándar de codificación de caracteres universal utilizado para la representación de texto. Para este caso, cada representación Unicode se asocia un \textit{emoji} que expresa alguna emoción en Twitter. A continuación, se presentan los resultados obtenidos. 

\begin{table}[H] 
\centering 
\begin{center} 
\begin{tabular}{m{3.5cm} m{1.8cm} m{1.5cm}} 
\toprule[0.6mm] 
\multicolumn{1}{c}{\textbf{Sentimiento}} & \multicolumn{1}{c}{\textbf{Unicode}} & \multicolumn{1}{c}{\textbf{Símbolo}} \\ 
\midrule[0.6mm] 
\centering Puño en alto: Tono de piel claro medio &0001f3fc  &\includegraphics[width=10mm]{figure/raisedfi.jpg}\\ 
\midrule[0.25mm] 
\centering Corazón rojo &feof2764 &\includegraphics[width=10mm]{figure/redheart.jpg} \\ 
\midrule[0.25mm] 
\centering Bandera &0001f1fd &\includegraphics[width=10mm]{figure/flagg.jpg}  \\ 
\bottomrule[0.6mm] 
\end{tabular} 
\caption{Emojis más usados en Twitter por Claro. Fuente:(Los autores)} 
\label{tabla:emojisclaro} 
\end{center} 
\end{table}

\begin{table}[H] 
\centering 
\begin{center} 
\begin{tabular}{m{3.5cm} m{1.8cm} m{1.5cm}} 
\toprule[0.6mm] 
\multicolumn{1}{c}{\textbf{Sentimiento}} & \multicolumn{1}{c}{\textbf{Unicode}} & \multicolumn{1}{c}{\textbf{Símbolo}} \\ 
\midrule[0.6mm] 
\centering Cara sonriendo con ojos de corazón &0001f60d &\includegraphics[width=10mm]{figure/love.jpg}\\ 
\midrule[0.25mm] 
\centering Carro de carreras &0001f3ce &\includegraphics[width=10mm]{figure/carrr.jpg}  \\ 
\bottomrule[0.6mm] 
\end{tabular} 
\caption{Emojis más usados en Twitter por Clientes Claro. Fuente:(Los autores)} 
\label{tabla:clientesclaro} 
\end{center} 
\end{table}

Los cuadros \ref{tabla:emojisclaro} y \ref{tabla:clientesclaro} presentan los resultados de los \textit{emojis} más utilizados por la empresa y los clientes que twittearon acerca de Claro. Se puede evidenciar que la empresa utilizó el \textit{emoji} ‘Puño en alto: Tono de piel claro medio’ como un símbolo de solidaridad y apoyo a algún evento o situación sociohistórica presentada durante el periodo analizado. Otro de los \textit{emojis} utilizados con recurrencia por esta empresa es el corazón rojo y la bandera asociada a carreras. De la misma forma, los clientes Claro utilizaron con mayor frecuencia la cara con ojos enamorados para describir un grado de emocionalidad. Se distingue un conjunto de emojis asociados a las carreras de automovilismo y sentimientos de amor, manifestando por parte de la empresa Claro y sus clientes, su apoyo y cariño a la piloto colombiana de automovilismo Tatiana Calderón Noguera, la cual compitió en la temporada 2019 en el Campeonato FIA F2 para el equipo BWT Arden, convirtiéndose en la primera mujer en competir en la serie.  

\begin{table}[H] 
\centering 
\begin{center} 
\begin{tabular}{m{3.5cm} m{1.8cm} m{1.5cm}} 
\toprule[0.6mm] 
\multicolumn{1}{c}{\textbf{Sentimiento}} & \multicolumn{1}{c}{\textbf{Unicode}} & \multicolumn{1}{c}{\textbf{Símbolo}} \\ 
\midrule[0.6mm] 
\centering Corazón rojo &feof2764  &\includegraphics[width=10mm]{figure/redheart.jpg}\\ 
\midrule[0.25mm] 
\centering Hombre en bicicleta: Tono de piel claro &0001f6b4 &\includegraphics[width=10mm]{figure/manbike.jpg} \\ 
\midrule[0.25mm] 
\centering Dorso de mano con índice a la derecha &0001f449 &\includegraphics[width=10mm]{figure/pointing.jpg}  \\
\bottomrule[0.6mm] 
\end{tabular} 
\caption{Emojis más usados en Twitter por Movistar. Fuente:(Los autores)} 
\label{tabla:emojismovistar} 
\end{center} 
\end{table}

\begin{table}[H] 
\centering 
\begin{center} 
\begin{tabular}{m{3.5cm} m{1.8cm} m{1.5cm}} 
\toprule[0.6mm] 
\multicolumn{1}{c}{\textbf{Sentimiento}} & \multicolumn{1}{c}{\textbf{Unicode}} & \multicolumn{1}{c}{\textbf{Símbolo}} \\ 
\midrule[0.6mm] 
\centering  Cara de furia &0001f621  &\includegraphics[width=10mm]{figure/bravo.jpg}\\ 
\midrule[0.25mm] 
\centering Corazón rojo &feof2764 &\includegraphics[width=10mm]{figure/redheart.jpg} \\ 
\midrule[0.25mm] 
\centering Cara revolviéndose de la risa  &0001f923 &\includegraphics[width=10mm]{figure/lol.jpg}  \\ 
\bottomrule[0.6mm] 
\end{tabular} 
\caption{Emojis más usados en Twitter por Clientes Movistar. Fuente:(Los autores)} 
\label{tabla:clientesmovistar} 
\end{center} 
\end{table}

Para el caso de la empresa Movistar el \textit{emoji} más utilizado fue el corazón rojo, seguido de un sujeto montando en bicicleta, lo cual es lógico teniendo en cuenta que esta empresa es patrocinadora oficial de ciclistas a nivel mundial. Del mismo modo en los cuadros \ref{tabla:emojismovistar} y \ref{tabla:clientesmovistar} se distingue por parte de la empresa Movistar el soporte que le brinda al ciclista de ruta colombiano Nairo Quintana y en general a todo el equipo de ciclismo Movistar. Apoyo que también es compartido por los clientes Movistar, sin embargo, también se distingue el emoji de enojo dada la negligencia en la pronta respuesta de Movistar con sus clientes. Seguido del \textit{emoji} corazón rojo y el \textit{emoji} para expresar un grado desmesurado de risa.  

\begin{table}[H] 
\centering 
\begin{center} 
\begin{tabular}{m{3.5cm} m{1.8cm} m{1.5cm}} 
\toprule[0.6mm] 
\multicolumn{1}{c}{\textbf{Sentimiento}} & \multicolumn{1}{c}{\textbf{Unicode}} & \multicolumn{1}{c}{\textbf{Símbolo}} \\ 
\midrule[0.6mm] 
\centering Corazón azul &0001f499  &\includegraphics[width=10mm]{figure/bluue.jpg} \\ 
\midrule[0.25mm] 
\centering Cara sonriente con ojos sonrientes &0001f60a &\includegraphics[width=10mm]{figure/smilingg.jpg} \\ 
\midrule[0.25mm] 
\centering Cara de guiño &0001f609 &\includegraphics[width=10mm]{figure/winking.jpg}  \\ 
\bottomrule[0.6mm] 
\end{tabular} 
\caption{Emojis más usados en Twitter por Tigo. Fuente:(Los autores)} 
\label{tabla:emojistigo} 
\end{center} 
\end{table}

\begin{table}[H] 
\centering 
\begin{center} 
\begin{tabular}{m{3.5cm} m{1.8cm} m{1.5cm}} 
\toprule[0.6mm] 
\multicolumn{1}{c}{\textbf{Sentimiento}} & \multicolumn{1}{c}{\textbf{Unicode}} & \multicolumn{1}{c}{\textbf{Símbolo}} \\ 
\midrule[0.6mm] 
\centering  Tiburón &0001f988 &\includegraphics[width=10mm]{figure/tibu.jpg}\\ 
\midrule[0.25mm] 
\centering  Cañón de confeti &0001f389 &\includegraphics[width=10mm]{figure/popper.jpg} \\ 
\midrule[0.25mm] 
\centering  Balón de fútbol &26bd &\includegraphics[width=10mm]{figure/fut.jpg} \\ 
\bottomrule[0.6mm] 
\end{tabular} 
\caption{Emojis más usados en Twitter por Clientes Tigo. Fuente:(Los autores)} 
\label{tabla:clientestigo} 
\end{center} 
\end{table}

Por último, para el caso de la empresa Tigo, los \textit{emojis} más utilizados fueron corazón azul, cara sonriente y cara con guiño. Para el caso de los clientes, los \textit{emojis} fueron utilizados para expresar apoyo a eventos futbolísticos. Por ejemplo, el \textit{emoji} de tiburón, apoyando al equipo de futbol Junior de Barranquilla, el \textit{emoji} de fiesta y el balón de futbol. Es claro observar que los \textit{emojis} analizados pertenecen a un evento en particular, por ende, se revisó en los periódicos locales, los eventos más destacados durante la época analizada encontrando que para esas fechas estaban en la apertura de la Liga Colombiana de futbol, donde el primer partido fue entre el América de Cali y el Junior de Barranquilla. Se reconoce por parte de la empresa Tigo el uso de emojis relacionados con la satisfacción por parte de la empresa por estar el tanto de las reclamaciones que sus clientes manifiestan, asimismo poder dar solución a las mismas. No obstante, los emojis más usados por los clientes de Tigo están conectados con el equipo de futbol Junior de Barranquilla como respuesta a la constante publicación de tweets sobre este equipo, del cual es el patrocinador oficial.

Es de resaltar que los \textit{emojis} de las empresas están asociadas a un sentimiento de reciprocidad y amabilidad con el cliente. Las tres empresas utilizaron \textit{emojis} para expresar amor y agrado con sus clientes. Mientras que los clientes responden mayormente mediante \textit{emojis} a eventos particulares y grado de satisfacción con alguna situación. 

\section{Modelación de los datos}
En esta sección se presentan los resultados del algoritmo de clasifiación Naive Bayes. Además se describen algunos de los indicadores de desempeño, la matriz de confusión junto con su gráfico respectivo y la curva ROC (Receiver Operating Characteristic) para representar la especificidad y sensibilidad del algoritmo. El análisis se realiza con clases desbalanceadas, sin embargo, se realizaron pruebas con clases balanceadas con el propósito de comparar el desempeño del algoritmo en ambas situaciones.

\subsection{Resultados del algoritmo de clasificación Naive Bayes}

\begin{table}[H]  
\centering  
\begin{center}  
\begin{tabular}{m{2.0cm} m{2.5cm} m{1.2cm}}  
\toprule[0.6mm]  
\multicolumn{1}{c}{\textbf{}} & \multicolumn{2}{c}{\textbf{Reference}}\\  
\midrule[0.25mm]  
\multicolumn{1}{c}{\textbf{Prediction}} &\multicolumn{1}{c}{ClaroColombia} &\multicolumn{1}{c}{Otro} \\ 
\midrule[0.25mm]  
\centering ClaroColombia &\multicolumn{1}{c}{115} &\multicolumn{1}{c}{102} \\  
\midrule[0.25mm]  
\centering Otro & \multicolumn{1}{c}{30} & \multicolumn{1}{c}{826} \\ 
\bottomrule[0.6mm]  
\end{tabular}  
\caption{Confusion matrix Claro. Fuente:(Los autores)}  
\label{tabla:matrixclaro}  
\end{center}  
\end{table} 

Dada la construcción del modelo Naïve Bayes para la clasificación de texto, se hace pertinente elaborar la Matriz de Confusión, como se observa en el cuadro \ref{tabla:matrixclaro}, para evaluar el rendimiento del modelo de Machine Learning construido. Este modelo tiene como objetivo determinar si un tweet en particular fue hecho por una empresa en específico o no, a partir de su contenido.  

\begin{figure}[H] 
\centering 
\includegraphics [width=0.7\textwidth]{figure/Matriz confusion Claro.jpg} 
\centering 
\caption {Matriz de confusión clasificación Claro} 
\label{fig:MCC} 
\end{figure} 

A través de los resultados emitidos por el modelo se observa la Matriz de Confusión del cuadro \ref{tabla:matrixclaro}, en la cual se ve las celdas en las que se cruzan los valores predichos (ClaroColombia) contra los de referencia. Es decir, el número en la celda en las que cruza el renglón ClaroColombia y la columna ClaroColombia corresponde a la cantidad de casos clasificados correctamente en esa categoría. De 145 casos que eran ClaroColombia en el set de prueba, se clasificó correctamente 115, en otras palabras, se obtuvo un parámetro de ajuste de sensibilidad del algoritmo de 79.31\%. De manera complementaria, de 928 casos que eran Otro, se clasificó correctamente 826, esto es, 89.01\% de Especificidad. En otros términos, se tuvo más éxito clasificando a la categoría Otro que la etiqueta @ClaroColombia, tal como se evidencia mediante el gráfico \ref{fig:MCC}.

\begin{table}[H]  
\centering  
\begin{center}  
\begin{tabular}{m{2.0cm} m{2.5cm}}  
\toprule[0.6mm]  
\multicolumn{1}{c}{\textbf{Accuracy}} &\multicolumn{1}{c}{0.877}    \\  
\midrule[0.25mm]   
\multicolumn{1}{c}{\textbf{95\% CI}} &\multicolumn{1}{c}{(0.8558, 0.896)}   \\ 
\midrule[0.25mm]  
\multicolumn{1}{c}{\textbf{Kappa}} &\multicolumn{1}{c}{0.5649}   \\ 
\midrule[0.25mm]  
\multicolumn{1}{c}{\textbf{Sensitivity}} &\multicolumn{1}{c}{0.7931}   \\
\midrule[0.25mm]  
\multicolumn{1}{c}{\textbf{Specificity}} &\multicolumn{1}{c}{0.8901}   \\
\midrule[0.25mm]  
\multicolumn{1}{c}{\textbf{Pos Pred Value}} &\multicolumn{1}{c}{0.5300}   \\
\midrule[0.25mm]  
\multicolumn{1}{c}{\textbf{Neg Pred Value}} &\multicolumn{1}{c}{0.9650}   \\
\midrule[0.25mm]  
\multicolumn{1}{c}{\textbf{Balanced Accuracy}} &\multicolumn{1}{c}{0.8416}   \\
\bottomrule[0.6mm]  
\end{tabular}  
\caption{Hiperparámetros del algoritmo, Claro. Fuente:(Los autores)}  
\label{tabla:statisticsclaro}  
\end{center}  
\end{table}  


\begin{figure}[H] 
\centering 
\includegraphics [width=0.65\textwidth]{figure/ROC Claro.jpg} 
\centering 
\caption {Curva ROC Claro} 
\label{fig:RC} 
\end{figure} 

De la misma forma, se obtuvo un conjunto de estadísticos también asociados al desempeño del modelo. Entre estos, se determinó la medida de exactitud (Accuracy) equivalente al 87.7\%, el cual es la fracción de predicciones que el modelo realizó correctamente. Sumado a esto, se calculó el estadístico Kappa, equivalente a 0.5649. Este proporciona una medida de qué tanto mejora el modelo una predicción, contra las probabilidades observadas. Además, se analizaron otros parámetros de ajuste del algoritmo como el valor predictivo positivo (Pos Pred Value) el cual evalúa la probabilidad de que un dato que ha sido predicho como positivo, realmente pertenezca a esta, para el caso se dio un valor del 53\%. Asimismo, el valor predictivo negativo (Neg Pred Value) en este caso fue de 96.50\%. Razón por la cual, se realizó la curva ROC, presentada en la figura \ref{fig:RC}, con el propósito de visualizar los resultados conseguidos. Finalmente, la precisión balanceada, indica qué tan bien predice el modelo tanto a la categoría positiva, como a la negativa. Para el caso de Claro esta precisión se encuentra alrededor de 84.16\%, factor importante cuando se poseen datos en los que las clases no están balanceadas, tal como sucede para este set de datos. 


Para la clasificación de la etiqueta MovistarCo se obtuvo una precisión del modelo del 69.9\%, donde de 549 casos de @MovistarCo asignados en el set de prueba, el algoritmo clasificó correctamente 433, es decir, se obtuvo un parámetro de ajuste de sensibilidad del algoritmo de 78.87\%. Similarmente, de 889 casos que estaban asociados a la etiqueta Otro (Claro y Tigo), clasificó correctamente 562, esto es, 78.88\% de Especificidad. En otras palabras, el algoritmo tuvo más éxito clasificando a la categoría MovistarCo que Otro. A continuación, se muestra la matriz de confusión junto con su representación gráfica. 

\begin{table}[H]  
\centering  
\begin{center}  
\begin{tabular}{m{2.0cm} m{2.5cm} m{1.2cm}}  
\toprule[0.6mm]  
\multicolumn{1}{c}{\textbf{}} & \multicolumn{2}{c}{\textbf{Reference}}\\  
\midrule[0.25mm]  
\multicolumn{1}{c}{\textbf{Prediction}} &\multicolumn{1}{c}{MovistarCo} &\multicolumn{1}{c}{Otro} \\ 
\midrule[0.25mm]  
\centering MovistarCo &\multicolumn{1}{c}{433} &\multicolumn{1}{c}{327} \\  
\midrule[0.25mm]  
\centering Otro & \multicolumn{1}{c}{116} &\multicolumn{1}{c}{562} \\ 
\bottomrule[0.6mm]  
\end{tabular}  
\caption{Matriz de confusion Movistar. Fuente:(Los autores)}  
\label{tabla:matrixmovistar}  
\end{center}  
\end{table}


\begin{figure}[H] 
\centering 
\includegraphics [width=0.7\textwidth]{figure/Matriz confusion Movistar.jpg} 
\centering 
\caption {Matriz de confusión clasificación Movistar} 
\label{fig:MCM} 
\end{figure} 

Por otra parte, se analizan otros parámetros de ajuste del algoritmo como el valor predictivo positivo (Pos Pred Value) el cual evalúa la probabilidad de que un dato que ha sido predicho como perteneciente a la categoría positiva, efectivamente pertenezca a ella, este valor fue de 56.9\%. Por complemento, el valor predictivo negativo (Neg Pred Value) en este caso fue de 82.8\%. Para esto se implementó la curva ROC, presentada en la figura \ref{fig:RM} , con el fin de visualizar los resultados obtenidos. Finalmente, la precisión balanceada, indica qué tan bien predice el modelo tanto a la categoría positiva, como a la negativa. Para el caso de Movistar esta precisión se encuentra en 71.04\%, es decir, el algoritmo presenta una precisión balanceada de clasificación buena. 

\begin{table}[H]  
\centering  
\begin{center}  
\begin{tabular}{m{2.0cm} m{2.5cm}}  
\toprule[0.6mm]  
\multicolumn{1}{c}{\textbf{Accuracy}} &\multicolumn{1}{c}{0.6919}    \\  
\midrule[0.25mm]   
\multicolumn{1}{c}{\textbf{95\% CI}} &\multicolumn{1}{c}{(0.6673, 0.7157)}   \\ 
\midrule[0.25mm]  
\multicolumn{1}{c}{\textbf{Kappa}} &\multicolumn{1}{c}{0.3921}   \\ 
\midrule[0.25mm]  
\multicolumn{1}{c}{\textbf{Sensitivity}} &\multicolumn{1}{c}{0.7887}   \\
\midrule[0.25mm]  
\multicolumn{1}{c}{\textbf{Specificity}} &\multicolumn{1}{c}{0.6322}   \\
\midrule[0.25mm]  
\multicolumn{1}{c}{\textbf{Pos Pred Value}} &\multicolumn{1}{c}{0.5697}   \\
\midrule[0.25mm]  
\multicolumn{1}{c}{\textbf{Neg Pred Value}} &\multicolumn{1}{c}{0.8289}   \\
\midrule[0.25mm]  
\multicolumn{1}{c}{\textbf{Balanced Accuracy}} &\multicolumn{1}{c}{0.7104}   \\
\bottomrule[0.6mm]  
\end{tabular}  
\caption{Hiperparámetros del algoritmo, Movistar. Fuente:(Los autores)}  
\label{tabla:statisticsmovistar}  
\end{center}  
\end{table}  

\begin{figure}[H] 
\centering 
\includegraphics [width=0.65\textwidth]{figure/ROC Movistar.jpg} 
\centering 
\caption {Curva ROC Movistar} 
\label{fig:RM} 
\end{figure} 

Conforme a los análisis indicados previamente, se presenta los resultados obtenidos bajo la misma dinámica para la etiqueta TigoColombia. De 896 casos que eran Otro en el set de prueba, se identificó correctamente 464, consiguiendo una Sensibilidad de 51.79\%. De manera complementaria, de 531 casos que eran TigoColombia, se clasificó correctamente 479 casos, lo cual significó un 90.21\% de Especificidad. De esta forma, se obtuvo más éxito clasificando a la categoría @TigoColombia que Otro. Estos resultados se perciben a través de la figura \ref{fig:MCT}, la cual representa la información contenida en el cuadro \ref{tabla:matrixtigo}. 

\begin{table}[H]  
\centering  
\begin{center}  
\begin{tabular}{m{2.0cm} m{2.5cm} m{1.2cm}}  
\toprule[0.6mm]  
\multicolumn{1}{c}{\textbf{}} & \multicolumn{2}{c}{\textbf{Reference}}\\  
\midrule[0.25mm]  
\multicolumn{1}{c}{\textbf{Prediction}} &\multicolumn{1}{c}{Otro} &\multicolumn{1}{c}{TigoColombia} \\ 
\midrule[0.25mm]  
\centering Otro &\multicolumn{1}{c}{464} &\multicolumn{1}{c}{52} \\  
\midrule[0.25mm]  
\centering TigoColombia & \multicolumn{1}{c}{432} & \multicolumn{1}{c}{479} \\ 
\bottomrule[0.6mm]  
\end{tabular}  
\caption{Matriz de confusión Tigo. Fuente:(Los autores)}  
\label{tabla:matrixtigo}  
\end{center}  
\end{table}


\begin{figure}[H] 
\centering 
\includegraphics [width=0.65\textwidth]{figure/Matriz confusion Tigo.jpg} 
\centering 
\caption {Matriz de confusión clasificación Tigo} 
\label{fig:MCT} 
\end{figure} 

Las medidas estadísticas evaluadas anteriormente también fueron calculadas para la etiqueta TigoColombia. En primera instancia la medida de exactitud (Accuracy) igual a 66.08\%. No obstante, esta medida no es suficiente, por lo cual es conveniente revisar las demás medidas como el estadístico Kappa con un valor de 0.3665, mide que tanto un modelo puede mejorar una predicción más allá del 50\% de los casos, de esta forma considerarse así una mejora sobre la probabilidad esperada. Asimismo, se analizó el valor predictivo positivo (Pos Pred Value), de 89.92\%, el cual evalúa la probabilidad de que un dato que ha sido predicho como positivo, ciertamente pertenezca a esta. También, el valor predictivo negativo (Neg Pred Value) en este caso fue de 52.58\%. De forma que, se generó la curva ROC, ilustrada en la figura \ref{fig:RT}, con el objetivo de visualizar los resultados conseguidos. Finalmente, la precisión balanceada de Tigo se halló alrededor de 71\%, factor significativo cuando se tienen datos en los que las clases no están balanceadas, tal como sucede para este conjunto de datos. 

\begin{table}[H]  
\centering  
\begin{center}  
\begin{tabular}{m{2.0cm} m{2.5cm}}  
\toprule[0.6mm]  
\multicolumn{1}{c}{\textbf{Accuracy}} &\multicolumn{1}{c}{0.6608}    \\  
\midrule[0.25mm]   
\multicolumn{1}{c}{\textbf{95\% CI}} &\multicolumn{1}{c}{(0.6356, 0.6854)}   \\ 
\midrule[0.25mm]  
\multicolumn{1}{c}{\textbf{Kappa}} &\multicolumn{1}{c}{0.3665}   \\ 
\midrule[0.25mm]  
\multicolumn{1}{c}{\textbf{Sensitivity}} &\multicolumn{1}{c}{0.5179}   \\
\midrule[0.25mm]  
\multicolumn{1}{c}{\textbf{Specificity}} &\multicolumn{1}{c}{0.9021}   \\
\midrule[0.25mm]  
\multicolumn{1}{c}{\textbf{Pos Pred Value}} &\multicolumn{1}{c}{0.8992}   \\
\midrule[0.25mm]  
\multicolumn{1}{c}{\textbf{Neg Pred Value}} &\multicolumn{1}{c}{0.5258}   \\
\midrule[0.25mm]  
\multicolumn{1}{c}{\textbf{Balanced Accuracy}} &\multicolumn{1}{c}{0.7100}   \\
\bottomrule[0.6mm]  
\end{tabular}  
\caption{Hiperparámetros del algoritmo, Tigo. Fuente:(Los autores)}  
\label{tabla:statisticstigo}  
\end{center}  
\end{table}  

\begin{figure}[H] 
\centering 
\includegraphics [width=0.65\textwidth]{figure/ROC Tigo.jpg} 
\centering 
\caption {Curva ROC Tigo} 
\label{fig:RT} 
\end{figure}

Por último, al realizar las pruebas con clases homogeneas se encontró que Claro mejoró su la precisión del modelo (0.924), así como sus hiperparámetros, lo que era esperado dado que los conjuntos de entrenamiento eran más pequeños. Por el contrario, Movistar y Tigo tuvieron un menor desempeño en comparación con los resultados obtenidos con clases desbalanceadas. Para el caso de Movistar disminuyeron los estadísticos de precisión (0.644), especificidad (0.768), sensibilidad (0.533), Kappa (0.297) y la precisión balanceada (0.650). Similiarmente, Tigo presentó una mejora en los hiperparámetros obtenidos con clases balanceadas, y aunque, la precisión del modelo (0.680) y la sensibilidad (0.625) aumentaron, la especificidad (0.732) y el indice Kappa (0.359) disminuyeron. 

En este capítulo se presentaron los resultados obtenidos de los análisis llevados a cabo mediante técnicas de minería de texto, análisis de sentimientos y analítica de negocios. Además, se utilizaron herramientas de visualización de datos a través de los paquetes de R ggplot2, ggplot3D y la librería de graficación interactiva Plotly. De acuerdo con lo anterior, se da cumplimiento al segundo y tercer objetivo propuesto en esta investigación. 

\chapter{Conclusiones y trabajo futuro}

\section{Conclusiones generales}
A partir de los resultados obtenidos para las instancias consideradas, es posible concluir que mediante el desarrollo de un script en R se logró establecer la conexión con la API de Twitter para extraer los datos asociados a las empresas y clientes en cuestión. A través del análisis realizado se identificó que las empresas manejan un patrón específico para responder a sus clientes (presentándose una consistencia con su modelo de negocio). Los clientes de las empresas Claro, Movistar y Tigo emplean un léxico relacionado con las palabras 'Servicio’, ‘Internet’, ‘sicsuper’. Además, Movistar y Tigo presentan una correlación fuerte en la manera que utilizan las palabras. De la misma forma, se evidenció que las horas de publicación de las empresas y de los clientes es similar, donde las 15:00 y las 20:00 son las horas en que se registra mayor actividad. 

Twitter se ha convertido en una plataforma para que los clientes de las empresas de telecomunicaciones manifiesten peticiones, quejas, reclamos, sugerencias y denuncias. Analizar la competencia en redes es una ventaja competitiva para estar a la vanguardia de las exigencias del mercado, y de esta manera, tomar decisiones en torno a la captación de su publicidad en medios como las redes sociales. Entender la necesidad de un negocio para la aplicación de los proyectos de analítica es la base para la ejecución de la ciencia de los datos como una herramienta para el análisis de las operaciones de las compañías.

A lo largo del análisis se evidenció que las empresas de telecomunicaciones Claro, Movistar y Tigo contratan servicios de empresas como S1GateWay o sistemas como Zandesk para la administración del contenido y atención de sus clientes. Además, a partir del estudio de los medios tecnológicos usados por los clientes para compartir sus tweets se determinó que los sistemas Android son los más usados. 

Al desarrollar el modelo de Naive Bayes con clases balanceadas y desbalanceadas, el algoritmo tuvo mejor desempeño con clases desbalanceadas para el caso de Movistar y Tigo, mientras que, para Claro tuvo mejoras sustanciales.

Al aplicar la función \textit{Get NRC Sentiment} presenta algunas dificultades con la clasificación de palabras en español, por tanto, se sugiere explorar otras herramientas para la exploración de análisis de sentimientos construidas con bases en diccionarios propios de este idioma. Similarmente, las empresas responden con un lenguaje simbólico de \textit{emojis} que expresan un grado de cercanía con los clientes, mientras que estos responden mayormente por medio de \textit{emojis}  a eventos y situaciones relacionas con el producto y servicio.

Por otra parte, utilizar herramientas de visualización de datos permitió obtener respuestas rápidas entorno a los resultados encontrados, facilitando su análisis para la toma de decisiones.

Por último, la realización de este proyecto permitió adquirir conocimientos y herramientas que pueden ser aplicadas en cualquier industria y contexto de interés.  Obtener estás habilidades no solo permitirá al Ingeniero Industrial mejorar procesos de las compañías mediante herramientas tradicionales, sino que también haciendo uso de las técnicas de la ciencia de los datos permitirá innovar positivamente el trabajo de las organizaciones y así mejorar su competitividad en el mercado. 

\section{Trabajo futuro}
Teniendo en cuenta la investigación desarrollada y las posibles mejoras a este trabajo, a continuación se presentan las siguientes recomendaciones para trabajos futuros: 

\begin{itemize}
\item Puede ocurrir que una cuenta de interés en Twitter presente limitaciones en la cantidad de información que se puede extraer, como fue el caso de @ClaroColombia. En esta situación, se sugiere extraer la información directamente de la web, lo que se conoce como \textit{Web Scraping}.

\item Para emplear las nuevas herramientas discponibles en el mercado de la tecnología, se hace preciso el uso de plataformas de servicios en la nube para el manejo y almacenamiento de datos obtenidos.  

\item Para la mejora de los resultados obtenidos del modelo, se sugiere optimizar los hiperparámetros del algoritmo de clasificación de texto Naive Bayes. Además, contrastar y validar los resultados aplicando otros algoritmos de clasificación de texto tales como los Maquinas de Soporte Vectorial o Redes Neuronales artificiales.

\item Construir un aplicativo de Visual Analytics permitiría tener una herramienta que automatizaría la interacción entre los datos generados y el negocio, facilitando de esta manera la toma de decisiones.  

\end{itemize}

\appendix
\chapter{Anexo I: Marco Legal de la investigación}

\begin{table}[H]  
\centering  
\begin{center}  
\begin{tabular}{m{2.33cm} m{5.0cm} m{5.0cm}}  
\toprule[0.6mm]  
\multicolumn{1}{c}{\textbf{Articulo}} & \multicolumn{1}{c}{\textbf{Delito Informático}} & \multicolumn{1}{c}{\textbf{Castigo}} \\  
\midrule[0.6mm]  
\centering Artículo 269A &Acceso abusivo a un sistema informático &Pena de prisión de 48 a 96 meses y multa de 100 a 1.000 smlmv \\ 
\midrule[0.25mm]  
\centering Artículo 269B &Obstaculización ilegitima de sistema informático o red de telecomunicación &Pena de prisión de 48 a 96 meses y multa de 100 1.000 smlmv \\  
\midrule[0.25mm]  
\centering Artículo 269C &Interceptación de datos informáticos &Pena de prisión de 36 a 76 meses \\ 
\midrule[0.25mm]  
\centering Artículo 269D &Daño informático &Pena de prisión de 48 a 96 meses y multa de 100 a 1.000 smlmv \\  
\midrule[0.25mm]  
\centering Artículo 269E &Uso de software malicioso &Pena de prisión de 48 a 96 meses y multa de 100 a 1.000 smlmv \\ 
\bottomrule[0.6mm]  
\end{tabular}  
\caption{Ley 1273 de 2009 De la protección de la información y de los datos. Fuente:(Ley 1273 de 2009 de Colombia, de la protección de la informacion y de los datos, 2009)}  
\label{tabla:marclegal1}  
\end{center}  
\end{table}  

\begin{table}[H]  
\centering  
\begin{center}  
\begin{tabular}{m{2.33cm} m{5.0cm} m{5.0cm}}  
\toprule[0.6mm]  
\multicolumn{1}{c}{\textbf{Articulo}} & \multicolumn{1}{c}{\textbf{Delito Informático}} & \multicolumn{1}{c}{\textbf{Castigo}} \\  
\midrule[0.6mm]  
\centering Artículo 269F &Violación de datos personales &Pena de prisión de 48 a 96 meses y multa de 100 a 1.000 smlmv \\  
\midrule[0.25mm]  
\centering Artículo 269G &Suplantación de sitios web para capturar datos personales &Pena de prisión de 48 a 96 meses y multa de 100 a 1.000 smlmv \\ 
\midrule[0.25mm]  
\centering Artículo 269I &Hurto por medios informáticos y semejantes &Pena de prisión de 36 a 96 meses \\ 
\midrule[0.25mm]  
\centering Artículo 269J &Transferencia no consentida de activos &Pena de prisión de 48 a 120 meses y multa de 200 a 1.500 smlmv \\ 
\bottomrule[0.6mm]  
\end{tabular}  
\caption{Ley 1273 de 2009 De la protección de la información y de los datos. Fuente:(Ley 1273 de 2009 de Colombia, de la protección de la informacion y de los datos, 2009)}  
\label{tabla:marclegal}  
\end{center}  
\end{table} 

\chapter{Anexo II: Caracterización de las variables}
\begin{table}[H]  
\centering  
\begin{center}  
\begin{tabular}{m{1.8cm} m{4.2cm} m{6.2cm}}  
\toprule[0.6mm]  
\multicolumn{1}{c}{\textbf{Variable}} & \multicolumn{1}{c}{\textbf{Estructura}} & \multicolumn{1}{c}{\textbf{Definición}} \\
\midrule[0.6mm]  
\centering text &Character &Este es el contenido del tweet \\ 
\midrule[0.25mm]  
\centering favorited &Logical &(Esto parece estar depreciado. VERDADERO o FALSO)\\  
\midrule[0.25mm]  
\centering favoriteCount &Numeric &¿Cuántas veces ha sido favorecido el tweet? \\ 
\midrule[0.25mm]  
\centering replyToSN &Character &¿Fue este tweet una respuesta a otra cuenta? Si es así, este es el nombre de usuario \\  
\midrule[0.25mm]  
\centering created &structure (numeric (0), class = c ('POSIXct', 'POSIXt'), tzone = 'UTC') &La fecha / hora en que se publicó el tweet, utilizando el formato POSIXct. Ejemplo: 2016-08-06 20:10:50 \\ 
\midrule[0.25mm]  
\centering truncated &Logical &¿Se truncó el tweet? VERDADERO o FALSO \\  
\bottomrule[0.6mm]  
\end{tabular}  
\caption{Caracterización de variables obtenidas durante la extracción de datos. Fuente:(Los autores)}
\label{tabla:variables}  
\end{center}  
\end{table}

\begin{table}[H]  
\centering  
\begin{center}  
\begin{tabular}{m{1.8cm} m{4.2cm} m{6.2cm}}  
\toprule[0.6mm]  
\multicolumn{1}{c}{\textbf{Variable}} & \multicolumn{1}{c}{\textbf{Estructura}} & \multicolumn{1}{c}{\textbf{Definición}} \\
\midrule[0.6mm]  
\centering replyToSID &Character &Si este tweet fue una respuesta a otro tweet, este contiene la ID del tweet en cuestión \\ 
\midrule[0.25mm]  
\centering id &Character &La identificación numérica para el tweet. Cada tweet debe tener una identificación única \\ 
\midrule[0.25mm]  
\centering replyToUID &Character &Si el tweet fue una respuesta a otro tweet, este contiene la ID de la cuenta en cuestión \\ 
\midrule[0.25mm]  
\centering statusSource &Character &¿De qué fuente se originó el tweet? Ejemplos: iPhone, Android \\
\midrule[0.25mm]  
\centering screenName &Character &El nombre de pantalla del usuario \\ 
\midrule[0.25mm]  
\centering retweetCount &Numeric &La cantidad de veces que el tweet ha sido retuiteado \\  
\bottomrule[0.6mm]  
\end{tabular}  
\caption{Caracterización de variables obtenidas durante la extracción de datos. Fuente:(Los autores)}
\label{tabla:variables2}  
\end{center}  
\end{table}

\begin{table}[H]  
\centering  
\begin{center}  
\begin{tabular}{m{1.8cm} m{4.2cm} m{6.2cm}}  
\toprule[0.6mm]  
\multicolumn{1}{c}{\textbf{Variable}} & \multicolumn{1}{c}{\textbf{Estructura}} & \multicolumn{1}{c}{\textbf{Definición}} \\
\midrule[0.6mm]  
\centering isRetweet &Logical &¿Es el tweet un retweet? VERDADERO o FALSO \\ 
\midrule[0.25mm]  
\centering retweeted &Logical &(Esto parece estar depreciado. VERDADERO o FALSO)\\  
\midrule[0.25mm]  
\centering longitude &Character &Coordenadas del origen del tweet, si el usuario tiene Geo Coordenadas habilitados \\ 
\midrule[0.25mm]  
\centering latitude &Character &Coordenadas del origen del tweet, si el usuario tiene Geo Coordenadas habilitados \\ 
\bottomrule[0.6mm]  
\end{tabular}  
\caption{Caracterización de variables obtenidas durante la extracción de datos. Fuente:(Los autores)}
\label{tabla:variables3}  
\end{center}  
\end{table}

\chapter{Anexo III: Siglas y acrónimos}
\begin{table}[H]  
\centering  
\begin{center}  
\begin{tabular}{m{1.5cm} m{5.5cm} m{5.5cm}}  
\toprule[0.6mm]  
\multicolumn{1}{c}{\textbf{Termino}} & \multicolumn{1}{c}{\textbf{Significado en Inglés}} & \multicolumn{1}{c}{\textbf{Significado en Español}} \\  
\midrule[0.6mm]  
\centering AI &Artificial Intelligence &Inteligencia Artificial \\ 
\midrule[0.25mm]  
\centering API &Application Programming Interface &Interfaz de Programación de Aplicaciones \\  
\midrule[0.25mm]  
\centering CRC &Communications Regulation Commission &Comisión de Regulación de Comunicaciones \\ 
\midrule[0.25mm]  
\centering CRISP-DM &Cross Industry Standard Process for Data Mining &Proceso estándar de la industria cruzada para la minería de datos \\  
\midrule[0.25mm]  
\centering CSV &Comma-Separated Values &Valores Separados por Comas \\ 
\midrule[0.25mm]  
\centering DA &Data Analysis &Análisis de Datos \\
\midrule[0.25mm]  
\centering DM &Direct Message &Mensaje privado \\ 
\midrule[0.25mm]  
\centering EDA &Exploratory data analysis &Análisis exploratorio de datos \\ 
\midrule[0.25mm]  
\centering FOSS &Free and Open Source Software &Software gratis y de código abierto \\
\midrule[0.25mm]  
\centering FP-growth &Frequent Pattern Growth &Crecimiento frecuente del patrón \\ 
\bottomrule[0.6mm]  
\end{tabular}  
\caption{Acrónimos. Fuente:(Los autores)}  
\label{tabla:parte1}  
\end{center}  
\end{table} 

\begin{table}[H]  
\centering  
\begin{center}  
\begin{tabular}{m{1.5cm} m{5.5cm} m{5.5cm}}  
\toprule[0.6mm]  
\multicolumn{1}{c}{\textbf{Termino}} & \multicolumn{1}{c}{\textbf{Significado en Inglés}} & \multicolumn{1}{c}{\textbf{Significado en Español}} \\  
\midrule[0.6mm]  
\centering GLM &Generalized linear model &Modelo lineal generalizado \\ 
\midrule[0.25mm]  
\centering HTML &HyperText Markup Language &Lenguaje de marcado de hipertexto \\  
\midrule[0.25mm]  
\centering IDF &Inverse Document Frequency &Frecuencia de documento inversa \\ 
\midrule[0.25mm]  
\centering IISE &Institute of Industrial and Systems Engineers &Instituto de Ingenieros Industriales y de Sistemas \\  
\midrule[0.25mm]  
\centering IoT &Internet of Things &Internet de las cosas \\ 
\midrule[0.25mm]  
\centering KDD &Knowledge Discovery in Data Bases &Descubrimiento de conocimiento en bases de datos \\
\midrule[0.25mm]  
\centering KDT &Knowledge Discovery in Texts &Descubrimiento del conocimiento en textos \\ 
\midrule[0.25mm]  
\centering n/a &Not available &No disponible \\ 
\midrule[0.25mm]  
\centering NLP &Natural Language Processing &Procesamiento de lenguajes naturales \\
\midrule[0.25mm]  
\centering ONG &Non-governmental organizations &Organización no gubernamental \\ 
\bottomrule[0.6mm]  
\end{tabular}  
\caption{Acrónimos. Fuente:(Los autores)}  
\label{tabla:parte2}  
\end{center}  
\end{table} 

\begin{table}[H]  
\centering  
\begin{center}  
\begin{tabular}{m{1.5cm} m{5.5cm} m{5.5cm}}  
\toprule[0.6mm]  
\multicolumn{1}{c}{\textbf{Termino}} & \multicolumn{1}{c}{\textbf{Significado en Inglés}} & \multicolumn{1}{c}{\textbf{Significado en Español}} \\  
\midrule[0.6mm]  
\centering PIB &Gross national product &Producto interno bruto \\ 
\midrule[0.25mm]  
\centering PQRS &Petitions, Complaints, Claims and Suggestions &Peticiones, Quejas, Reclamos y Sugerencias \\  
\midrule[0.25mm]  
\centering SVM &Support Vector Machines &Máquinas de vectores de soporte \\ 
\midrule[0.25mm]  
\centering TF &Term Frequency &Término Frecuencia \\  
\midrule[0.25mm]  
\centering TF-IDF &Term Frequency - Inverse Document Frequency &Término Frecuencia - Frecuencia inversa del documento \\ 
\midrule[0.25mm]  
\centering TI &Information technology &Tecnología de la información \\
\midrule[0.25mm]  
\centering TIC &Technology of the information and communication &Tecnologías de la información y la comunicación \\ 
\midrule[0.25mm]  
\centering URL &Uniform Resource Locator &Localizador Uniforme de Recursos \\ 
\midrule[0.25mm]  
\centering UTC &Coordinated Universal Time &Tiempo universal coordinado \\
\midrule[0.25mm]  
\centering VM &Virtual Machine &Máquina Virtual  \\ 
\bottomrule[0.6mm]  
\end{tabular}  
\caption{Acrónimos. Fuente:(Los autores)}  
\label{tabla:parte3}  
\end{center}  
\end{table} 





\chapter{Anexo IV: Conceptos principales}
\textbf{Visual Analytics:} solución analítica para descubrir, por medio de gráficos e interacciones visuales, relaciones relevantes en sus datos, crear informes o paneles para tomar decisiones más inteligentes basadas en datos.\\
\textbf{Corpus:} Es una colección de textos escritos o un cuerpo de escritura sobre un tema en particular.\\
\textbf{CSV:} Los archivos CSV son un tipo de documento para representar datos en forma de tablas y esta delimitado por comas. \\
\textbf{Outliers:} También conocido como un valor atípico, es una observación que es dista del resto de los datos. \\
\textbf{HTML:} Es un lenguaje basado en etiquetas para el desarrollo de páginas web. \\
\textbf{DataFrame:} Estructuras de datos en dos dimensiones, que contienen diferentes tipos de datos.\\
\textbf{Tibble:} Es una versión moderna de los Data Frames.\\
\textbf{Tidy Data sets:} Son conjuntos de datos obtenidos durante un proceso de limpieza importantes y procesamiento de grandes volúmenes de datos. \\
\textbf{String/Cadenas de texto:} Estructura de datos utilizada para el análisis de textos. \\
\textbf{Tidy tools:} Conjunto de herramientas que permite proporcionar una interfaz para que los paquetes tidyverse trabajen juntos. \\
\textbf{Libreria R:} Son colecciones de funciones y conjunto de datos desarrollados por la comunidad de RStudio. \\
\textbf{URLs:} Localizador Uniforme de Recursos, permite localizar y recuperar información determinada en la Internet. \\
\textbf{Train} Es un conjunto de ejemplos utilizados para ajustar los parámetros del modelo. \\
\textbf{Test:} Es un subconjunto para probar el modelo entrenado.\\
\textbf{Ggplot2:} Es un paquete de visualización de datos para el lenguaje de programación estadística R. \\
\textbf{Tweet:} Un tweet es una actualización de estado en Twitter que se transmite a otros usuarios.\\
\textbf{Chrome:} Es un navegador web de software privativo o código cerrado desarrollado por Google, aunque derivado de proyectos de código abierto.\\
\textbf{Stop-Word:} Es el nombre que reciben las palabras sin significado como artículos, pronombres, preposiciones o después del procesamiento de datos en lenguaje natural. \\
\textbf{Word-Cloud:} una nube de palabras es una representación visual de las palabras que conforman un texto, en donde el tamaño es mayor para las palabras que aparecen con más frecuencia. \\
\textbf{Valor p:} En estadística el valor p se define como la probabilidad de que un valor estadístico calculado sea posible dada una hipótesis nula.\\
\textbf{Confussion Matrix:} Es una herramienta que permite la visualización del desempeño de un algoritmo que se emplea en aprendizaje supervisado.\\
\textbf{Script:} Se usa este término para referirse al código fuente escrito.\\
\textbf{Web Scraping:} Es una de las formas más sólidas y confiables de obtener datos web de Internet.\\
\textbf{Datos Estructurados:} Son datos ordenados y procesados fácilmente por todas las herramientas de minería de datos. \\
\textbf{Datos no estructurados:} Los datos no estructurados se caracterizan por no tener un formato específico, no vienen ordenados, son datos que se encuentran en estructuras web, texto, videos etc. \\
\textbf{Aprendizaje Supervisado:} El aprendizaje supervisado es una técnica para predecir o deducir una función a partir de datos de entrenamiento. \\
\textbf{Aprendizaje no supervisado:} A diferencia del aprendizaje supervisado, en el no supervisado se le otorgan características, sin proporcionarle al algoritmo ninguna parámetro o etiqueta. \\
\textbf{ROC: Receiver Operating Characteristic:} Es una representación gráfica de comparación entre la sensibilidad y la especificidad de un algoritmo.

\printbibliography

\end{document}






